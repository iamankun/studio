Bước 1 & 2: Tạo Dự Án & Cài đặt Prisma
(Đã xong✔️)

Tạo dự án Next.js mới: npx create-next-app@latest aks-studio-v2

Di chuyển vào thư mục: cd aks-studio-v2

Cài đặt Prisma: npm install prisma --save-dev

Khởi tạo Prisma: npx prisma init

Bước 3: Định Nghĩa Schema Database
Mở tệp prisma/schema.prisma.

Xóa toàn bộ nội dung có sẵn.

Sao chép và dán toàn bộ schema đầy đủ nhất dưới đây vào.

// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- BẢNG QUẢN LÝ NGƯỜI DÙNG & HỒ SƠ ---
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String
  roles         UserRole[]   @default([ARTIST])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  profile       Profile?
  submissions   Submission[] @relation("SubmissionCreator")
  labelId       String?
  label         Label?       @relation(fields: [labelId], references: [id])
  files         File[]
  activityLogs  ActivityLog[]

  submissionContributions SubmissionContributor[]
  trackContributions      TrackContributor[]
  comments                SubmissionComment[]
  approvals               SubmissionApproval[]
}

model Profile {
  id            String @id @default(cuid())
  bio           String?
  avatarUrl     String?
  phone         String? @unique
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialLinks   Json?   // { "spotify": "url", "appleMusic": "url", ... }
}

model Label {
  id            String       @id @default(cuid())
  name          String       @unique
  ownerId       String       @unique
  members       User[]
  submissions   Submission[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// --- BẢNG QUẢN LÝ PHÁT HÀNH & BÀI HÁT ---
model Submission {
  id              String    @id @default(cuid())
  title           String
  artist          String
  upc             String?   @unique
  type            ReleaseType @default(SINGLE) // Loại hình: Single, EP, Album
  coverImagePath  String
  releaseDate     DateTime
  status          SubmissionStatus @default(PENDING)
  metadataLocked  Boolean   @default(false)
  published       Boolean   @default(false)

  userId          String
  user            User      @relation("SubmissionCreator", fields: [userId], references: [id])

  labelId         String
  label           Label     @relation(fields: [labelId], references: [id])

  tracks          Track[]
  contributors    SubmissionContributor[]
  comments        SubmissionComment[]
  approvals       SubmissionApproval[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Track {
  id            String      @id @default(cuid())
  title         String
  artist        String
  filePath      String
  duration      Int         // in seconds
  isrc          String?     @unique

  submissionId  String
  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  contributors  TrackContributor[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// --- CÁC BẢNG HỖ TRỢ QUY TRÌNH & LOGIC ---

model SubmissionContributor {
  id            String @id @default(cuid())
  role          String // e.g., "Featured Artist"
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model TrackContributor {
  id            String @id @default(cuid())
  role          ContributorRole
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  trackId       String
  track         Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model SubmissionApproval {
  id              String    @id @default(cuid())
  type            ApprovalType // DSP, CONTENT_ID, ACR_CLOUD
  isApproved      Boolean

  submissionId    String
  submission      Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  approverId      String
  approver        User @relation(fields: [approverId], references: [id])

  createdAt       DateTime @default(now())
}

model SubmissionComment {
  id            String @id @default(cuid())
  content       String

  userId        String
  user          User   @relation(fields: [userId], references: [id])

  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
}

model File {
  id        String    @id @default(cuid())
  name      String
  path      String    @unique
  mimetype  String
  size      Int
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

model ActivityLog {
  id        String      @id @default(cuid())
  action    String
  details   Json?
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
}

// --- CÁC BỘ TRẠNG THÁI & VAI TRÒ ---
enum UserRole {
  ARTIST
  COMPOSER
  PRODUCER
  PERFORMER
  LABEL_MANAGER
  ADMINTRATOR
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  PUBLISHED
  CANCELLED
}

enum ReleaseType {
  SINGLE
  EP
  ALBUM
}

enum ContributorRole {
  COMPOSER
  LYRICIST
  PRODUCER
}

enum ApprovalType {
  DSP
  CONTENT_ID
  ACR_CLOUD
}

3.1 GIẢI THÍCH THÊM VỀ LOGIC HOẠT ĐỘNG CỦA CHƯƠNG TRÌNH:
- 1. Giai đoạn mới tạo tài khoản:
+ Yêu cầu phía nghệ sĩ nhập đủ thông tin tài khoản social cụ thể: Facebook, Instagram (nếu có), YouTube, ...
+ Yêu cầu phía nghệ sĩ nhập đủ tài khoản liên kết nghệ sĩ: Có 2 trường hợp a: Nghệ sĩ mới nên sẽ chưa có - b: Nghệ sĩ cũ yêu cầu bổ sung: Apple Music, Spotify, SoundCloud, ... chủ yếu vì tôi cần khai báo trước cho các nền tảng cập nhật đúng chủ nhân.
+ Yêu cầu họ nhật đầy đủ email và số điện thoại để label manager có thể liên hệ và hệ thống gửi thông báo khi nhạc được cập nhật trạng thái.
--> Khi đã đầy đủ thông tin hãy thông báo label duyệt tài khoản mới được phép dùng hệ thống vì lúc này label manager sẽ gán đúng danh xưng trong roles

- 2. Giai đoạn upload nhạc (Như đã nói Admin, Label Manager và Artist mới có thể tải lên)
Vui lòng theo dõi mẫu form dạng html
a/ Tạo track
b/ Tạo bản phát hành submission
c/ Phát hành 
d/ Kiểm duyệt

Những điều cần lưu ý:
-trang tạo bảng phát hành.html
-trang tạo video phát hành.html
-trang upload file nhạc.html