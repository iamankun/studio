// @ts-check
/**
 * Ti·ªán √≠ch ghi log v√†o b·∫£ng nhat_ky_studio
 * D√πng ƒë·ªÉ ghi l·∫°i c√°c ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
 */

import { neon } from "@neondatabase/serverless";
import fs from 'fs/promises';
import path from 'path';

/**
 * Ghi log v√†o file
 * @param {string} message - Th√¥ng b√°o c·∫ßn ghi
 */
async function logToFile(message) {
    try {
        const logDir = path.join(process.cwd(), "logs");
        await fs.mkdir(logDir, { recursive: true });
        const logFile = path.join(logDir, "nhat-ky-studio-helper.log");
        const timestamp = new Date().toISOString();
        await fs.appendFile(logFile, `[${timestamp}] ${message}\n`);
    } catch (e) {
        console.error("Failed to write to log file:", e);
    }
}

/**
 * K·∫øt n·ªëi ƒë·∫øn database
 * @returns {Promise<any>} - SQL client ƒë√£ k·∫øt n·ªëi
 */
async function connectToDatabase() {
    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        throw new Error('DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
    }
    return neon(DATABASE_URL);
}

/**
 * Th√™m log v√†o b·∫£ng nhat_ky_studio
 * @param {Object} logData - D·ªØ li·ªáu log
 * @param {string} logData.username - T√™n ng∆∞·ªùi d√πng
 * @param {string} [logData.user_id] - ID ng∆∞·ªùi d√πng (optional)
 * @param {string} logData.action - H√†nh ƒë·ªông ng∆∞·ªùi d√πng th·ª±c hi·ªán
 * @param {string} [logData.category] - Danh m·ª•c h√†nh ƒë·ªông (optional)
 * @param {string} [logData.ip_address] - ƒê·ªãa ch·ªâ IP (optional)
 * @param {string} [logData.user_agent] - User agent (optional)
 * @param {string} [logData.status] - Tr·∫°ng th√°i (optional)
 * @param {string} [logData.component_name] - T√™n component (optional)
 * @param {string} [logData.session_id] - ID phi√™n (optional)
 * @param {Object} [logData.details] - Chi ti·∫øt th√™m d·∫°ng JSON (optional)
 * @param {Object} [logData.related_ids] - ID li√™n quan d·∫°ng JSON (optional)
 * @returns {Promise<any>} - K·∫øt qu·∫£ insert
 */
export async function addActivityLog(logData) {
    try {
        const sql = await connectToDatabase();

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        if (!logData.username) throw new Error('Thi·∫øu tr∆∞·ªùng username');
        if (!logData.action) throw new Error('Thi·∫øu tr∆∞·ªùng action');
        if (!logData.category) {
            // M·∫∑c ƒë·ªãnh l√† 'system' n·∫øu kh√¥ng c√≥ category
            logData.category = 'system';
        }

        // Th√™m v√†o database
        const result = await sql`
            INSERT INTO nhat_ky_studio (
                username, 
                user_id, 
                action, 
                category, 
                details, 
                ip_address, 
                user_agent, 
                status, 
                component_name, 
                session_id, 
                related_ids
            ) VALUES (
                ${logData.username}, 
                ${logData.user_id || null}, 
                ${logData.action}, 
                ${logData.category}, 
                ${logData.details ? JSON.stringify(logData.details) : null}, 
                ${logData.ip_address || null}, 
                ${logData.user_agent || null}, 
                ${logData.status || null}, 
                ${logData.component_name || null}, 
                ${logData.session_id || null}, 
                ${logData.related_ids ? JSON.stringify(logData.related_ids) : null}
            ) RETURNING id
        `;

        await logToFile(`ƒê√£ th√™m log: ${logData.username} - ${logData.action}`);
        return result;
    } catch (error) {
        await logToFile(`‚ùå L·ªói khi th√™m log: ${error.message}`);
        console.error('‚ùå L·ªói khi th√™m log:', error.message);
        throw error;
    }
}

/**
 * L·∫•y logs g·∫ßn ƒë√¢y c·ªßa m·ªôt ng∆∞·ªùi d√πng
 * @param {string} username - T√™n ng∆∞·ªùi d√πng
 * @param {number} [limit=10] - S·ªë l∆∞·ª£ng logs mu·ªën l·∫•y
 * @param {string} [category] - L·ªçc theo danh m·ª•c (optional)
 * @returns {Promise<any[]>} - Danh s√°ch logs
 */
export async function getRecentLogs(username, limit = 10, category = null) {
    try {
        const sql = await connectToDatabase();

        // N·∫øu c√≥ category th√¨ l·ªçc th√™m
        if (category) {
            const logs = await sql`
                SELECT * FROM nhat_ky_studio
                WHERE username = ${username}
                AND category = ${category}
                ORDER BY created_at DESC
                LIMIT ${limit}
            `;
            return logs;
        }

        const logs = await sql`
            SELECT * FROM nhat_ky_studio
            WHERE username = ${username}
            ORDER BY created_at DESC
            LIMIT ${limit}
        `;

        await logToFile(`ƒê√£ l·∫•y ${logs.length} logs c·ªßa ${username}`);
        return logs;
    } catch (error) {
        await logToFile(`‚ùå L·ªói khi l·∫•y logs: ${error.message}`);
        console.error('‚ùå L·ªói khi l·∫•y logs:', error.message);
        throw error;
    }
}

/**
 * L·∫•y t·∫•t c·∫£ logs c·ªßa m·ªôt lo·∫°i h√†nh ƒë·ªông
 * @param {string} action - Lo·∫°i h√†nh ƒë·ªông
 * @param {number} [limit=50] - S·ªë l∆∞·ª£ng logs mu·ªën l·∫•y
 * @returns {Promise<any[]>} - Danh s√°ch logs
 */
export async function getLogsByAction(action, limit = 50) {
    try {
        const sql = await connectToDatabase();

        const logs = await sql`
            SELECT * FROM nhat_ky_studio
            WHERE action = ${action}
            ORDER BY created_at DESC
            LIMIT ${limit}
        `;

        await logToFile(`ƒê√£ l·∫•y ${logs.length} logs c·ªßa h√†nh ƒë·ªông ${action}`);
        return logs;
    } catch (error) {
        await logToFile(`‚ùå L·ªói khi l·∫•y logs theo h√†nh ƒë·ªông: ${error.message}`);
        console.error('‚ùå L·ªói khi l·∫•y logs theo h√†nh ƒë·ªông:', error.message);
        throw error;
    }
}

/**
 * L·∫•y th·ªëng k√™ logs cho dashboard
 * @param {number} [days=7] - S·ªë ng√†y mu·ªën l·∫•y th·ªëng k√™
 * @returns {Promise<Object>} - Th·ªëng k√™ logs
 */
export async function getDashboardStats(days = 7) {
    try {
        const sql = await connectToDatabase();

        // L·∫•y th·ªëng k√™ theo ng√†y
        const dailyStats = await sql`
            SELECT 
                DATE(created_at) as date, 
                COUNT(*) as count
            FROM nhat_ky_studio
            WHERE created_at > NOW() - INTERVAL '${days} days'
            GROUP BY DATE(created_at)
            ORDER BY date DESC
        `;

        // L·∫•y th·ªëng k√™ theo category
        const categoryStats = await sql`
            SELECT 
                category, 
                COUNT(*) as count
            FROM nhat_ky_studio
            WHERE created_at > NOW() - INTERVAL '${days} days'
            GROUP BY category
            ORDER BY count DESC
        `;

        // L·∫•y th·ªëng k√™ theo action
        const actionStats = await sql`
            SELECT 
                action, 
                COUNT(*) as count
            FROM nhat_ky_studio
            WHERE created_at > NOW() - INTERVAL '${days} days'
            GROUP BY action
            ORDER BY count DESC
            LIMIT 10
        `;

        // L·∫•y th·ªëng k√™ theo user
        const userStats = await sql`
            SELECT 
                username, 
                COUNT(*) as count
            FROM nhat_ky_studio
            WHERE created_at > NOW() - INTERVAL '${days} days'
            GROUP BY username
            ORDER BY count DESC
            LIMIT 10
        `;

        await logToFile(`ƒê√£ l·∫•y th·ªëng k√™ logs cho ${days} ng√†y`);

        return {
            dailyStats,
            categoryStats,
            actionStats,
            userStats
        };
    } catch (error) {
        await logToFile(`‚ùå L·ªói khi l·∫•y th·ªëng k√™ logs: ${error.message}`);
        console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™ logs:', error.message);
        throw error;
    }
}

// Test th√™m log
if (process.argv[2] === 'test') {
    (async () => {
        try {
            console.log('üîç Test th√™m log v√†o nhat_ky_studio');

            const result = await addActivityLog({
                username: 'test_user',
                action: 'test_log',
                category: 'test',
                status: 'success',
                component_name: 'TestComponent',
                details: { test: true, time: new Date().toISOString() }
            });

            console.log('‚úÖ ƒê√£ th√™m log th√†nh c√¥ng:', result);

            // L·∫•y logs c·ªßa test_user
            const logs = await getRecentLogs('test_user', 5);
            console.log('‚úÖ Logs c·ªßa test_user:', logs);

        } catch (error) {
            console.error('‚ùå Test th·∫•t b·∫°i:', error.message);
        }
    })();
}
