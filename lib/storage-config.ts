// Storage Configuration for DMG Platform
// Auto-generated by storage setup script

import path from 'path'

export const STORAGE_CONFIG = {
    // Base directories
    UPLOAD_BASE: '/uploads',
    PUBLIC_BASE: '/public/uploads',
    
    // Audio file storage
    AUDIO: {
        BASE: '/uploads/audio',
        PENDING: '/uploads/audio/pending',
        APPROVED: '/uploads/audio/approved', 
        REJECTED: '/uploads/audio/rejected',
        MAX_SIZE: 50 * 1024 * 1024, // 50MB
        ALLOWED_FORMATS: ['.mp3', '.wav', '.flac', '.m4a'],
        QUALITY_MIN_BITRATE: 128, // kbps
    },
    
    // Artwork storage
    ARTWORK: {
        BASE: '/uploads/artwork',
        COVERS: '/uploads/artwork/covers',
        THUMBNAILS: '/uploads/artwork/thumbnails',
        MAX_SIZE: 10 * 1024 * 1024, // 10MB
        ALLOWED_FORMATS: ['.jpg', '.jpeg', '.png', '.webp'],
        MIN_DIMENSIONS: { width: 400, height: 400 },
        PREFERRED_DIMENSIONS: { width: 1400, height: 1400 }
    },
    
    // Temporary uploads
    TEMP: {
        BASE: '/uploads/temp',
        TTL: 24 * 60 * 60 * 1000, // 24 hours
        CLEANUP_INTERVAL: 60 * 60 * 1000, // 1 hour
    },
    
    // User avatars
    AVATARS: {
        BASE: '/uploads/avatars',
        MAX_SIZE: 2 * 1024 * 1024, // 2MB
        ALLOWED_FORMATS: ['.jpg', '.jpeg', '.png', '.webp'],
        DIMENSIONS: { width: 200, height: 200 }
    },
    
    // Logs
    LOGS: {
        UPLOADS: '/logs/uploads',
        API: '/logs/api', 
        AUTH: '/logs/auth',
        RETENTION_DAYS: 30
    }
};

export const MIME_TYPES = {
    // Audio
    'audio/mpeg': '.mp3',
    'audio/wav': '.wav',
    'audio/flac': '.flac', 
    'audio/mp4': '.m4a',
    
    // Images
    'image/jpeg': '.jpg',
    'image/png': '.png',
    'image/webp': '.webp'
};

export function getStoragePath(type: keyof typeof STORAGE_CONFIG, subPath?: string): string {
    const config = STORAGE_CONFIG[type];
    const basePath = (typeof config === 'object' && 'BASE' in config ? config.BASE : config) as string;
    return subPath ? `${basePath}/${subPath}` : basePath;
}

export function validateFileSize(file: File, type: keyof typeof STORAGE_CONFIG): boolean {
    const config = STORAGE_CONFIG[type];
    if (typeof config === 'object' && 'MAX_SIZE' in config) {
        return file.size <= config.MAX_SIZE;
    }
    return true;
}

export function validateFileFormat(filename: string, type: keyof typeof STORAGE_CONFIG): boolean {
    const config = STORAGE_CONFIG[type];
    if (typeof config === 'object' && 'ALLOWED_FORMATS' in config) {
        const ext = path.extname(filename).toLowerCase();
        return config.ALLOWED_FORMATS.includes(ext);
    }
    return true;
}
