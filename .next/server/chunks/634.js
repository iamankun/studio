exports.id=634,exports.ids=[634],exports.modules={45740:(a,b,c)=>{"use strict";c.d(b,{v:()=>e});class d{createEntry(a,b,c,d){return{id:`${Date.now()}-${Math.random().toString(36).substring(2,11)}`,timestamp:new Date().toISOString(),level:a,message:b,data:c,userId:d?.userId,component:d?.component,action:d?.action}}debug(a,b,c){let d=this.createEntry("debug",a,b,c);this.addLog(d)}info(a,b,c){let d=this.createEntry("info",a,b,c);this.addLog(d),console.info(`[INFO] ${a}`,b)}warn(a,b,c){let d=this.createEntry("warn",a,b,c);this.addLog(d),console.warn(`[WARN] ${a}`,b)}error(a,b,c){let d=this.createEntry("error",a,b,c);this.addLog(d),console.error(`[ERROR] ${a}`,b)}addLog(a){this.logs.unshift(a),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(0,this.maxLogs))}getLogs(){return this.logs}clearLogs(){this.logs=[]}exportLogs(){return JSON.stringify(this.getLogs(),null,2)}filterLogs(a,b,c){return this.getLogs().filter(d=>(!a||d.level===a)&&(!b||d.component===b)&&(!c||!!d.message.toLowerCase().includes(c.toLowerCase())))}debugToConsole(){return"Console debugging only available in browser"}getConsoleStyle(a){switch(a){case"debug":return"background: #607d8b; color: white; padding: 2px 6px; border-radius: 2px;";case"info":return"background: #2196f3; color: white; padding: 2px 6px; border-radius: 2px;";case"warn":return"background: #ff9800; color: black; padding: 2px 6px; border-radius: 2px;";case"error":return"background: #f44336; color: white; padding: 2px 6px; border-radius: 2px;";default:return"color: inherit"}}constructor(){this.logs=[],this.maxLogs=1e3}}let e=new d},48194:(a,b,c)=>{"use strict";function d(a){return{id:a.id,track_title:a.songTitle,artist_name:a.artistName,artist_id:a.userId,user_id:a.userId,status:a.status,genre:a.mainCategory,submission_date:a.submissionDate,created_at:a.createdAt,updated_at:a.updatedAt,cover_art_url:a.imageUrl,artwork_path:a.imageFile,imageUrl:a.imageUrl,audio_file_url:a.audioUrl,file_path:a.audioUrl,audioUrl:a.audioUrl,release_date:a.releaseDate,upc:a.upc,rejection_reason:a.rejectionReason,isrc_code:a.isrc}}function e(a){return{submission:{id:a.id,title:a.songTitle,artist:a.artistName,UPC:a.upc||null,type:({single:"SINGLE",ep:"EP",lp:"ALBUM",album:"ALBUM",compilation:"COMPILATION"})[a.releaseType]||"SINGLE",coverImagePath:a.imageFile||a.imageUrl,releaseDate:new Date(a.releaseDate),status:({pending:"PENDING",approved:"APPROVED",rejected:"REJECTED",processing:"PROCESSING",published:"PUBLISHED",cancelled:"CANCELLED",draft:"DRAFT","Đ\xe3 nhận, đang chờ duyệt":"PENDING","Đ\xe3 duyệt, từ chối ph\xe1t h\xe0nh":"REJECTED","Đ\xe3 duyệt, đang chờ ph\xe1t h\xe0nh!":"APPROVED","Đ\xe3 ph\xe1t h\xe0nh, đang chờ ra mắt":"PROCESSING","Ho\xe0n th\xe0nh ph\xe1t h\xe0nh!":"PUBLISHED","Đ\xe3 hủy":"CANCELLED","Bản nh\xe1p":"DRAFT"})[a.status]||"PENDING",metadataLocked:a.metadataLocked||!1,published:a.published||!1,albumName:a.albumName||null,mainCategory:a.mainCategory||null,subCategory:a.subCategory||null,platforms:a.platforms?{platforms:a.platforms}:null,distributionLink:a.distributionLink||null,distributionPlatforms:a.distributionPlatforms?{platforms:a.distributionPlatforms}:null,statusVietnamese:a.statusVietnamese||null,rejectionReason:a.rejectionReason||null,notes:a.notes||null,signedDocumentPath:null,signedAt:null,signerFullName:null,isDocumentSigned:!1,userId:a.userId,labelId:a.labelId||""},tracks:a.trackInfos?.map(a=>({title:a.songTitle,artist:a.artistName,filePath:a.filePath||"",duration:a.duration||0,isrc:a.isrc||null,fileName:a.fileName||null,artistFullName:a.artistFullName||null,fileSize:a.fileSize||null,format:a.format||null,bitrate:a.bitrate||null,sampleRate:a.sampleRate||null,mainCategory:null,subCategory:null,lyrics:null}))||[]}}c.d(b,{i1:()=>d,ko:()=>e})},78335:()=>{},89934:(a,b,c)=>{"use strict";c.d(b,{sT:()=>g});var d=c(48194),e=c(45740);class f{constructor(){this.apiAvailable=!0,console.log("DatabaseApiService: Initialized (Production Only - API Based)")}normalizeSubmissions(a){return a.map(a=>{let b=a.artist_name??a.artists??"";return b&&""!==b.trim()?b.split(/[,&]|feat\.|featuring|ft\./gi).length>3&&(b="Various Artist"):b="Various Artist",{...a,cover_art_url:a.cover_art_url??a.artwork_path??"/dianhac.jpg",artwork_path:a.artwork_path??a.cover_art_url??"/dianhac.jpg",imageUrl:a.imageUrl??a.cover_art_url??a.artwork_path??"/dianhac.jpg",audio_file_url:a.audio_file_url??a.file_path??"/VNA2P25XXXXX.wav",file_path:a.file_path??a.audio_file_url??"/VNA2P25XXXXX.wav",audioUrl:a.audioUrl??a.audio_file_url??a.file_path??"/VNA2P25XXXXX.wav",track_title:a.track_title??a.title??"Untitled Track",artist_name:b,status:a.status??"pending",genre:a.genre??"Unknown",submission_date:a.submission_date??a.created_at??new Date().toISOString()}})}async initialize(){console.log("✅ Database API Service initialized (API-based)")}async authenticateUser(a,b){e.v.info("DatabaseApiService: Authentication attempt",{component:"DatabaseApiService",action:"authenticateUser",data:{username:a}});try{let c=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:a,password:b})}),d=await c.json();if(d.success)return e.v.info("DatabaseApiService: Authentication successful",{component:"DatabaseApiService",action:"authenticateUser",userId:d.user?.id}),console.log(`✅ API authentication successful for ${d.user?.role}`),{success:!0,data:d.user,source:"API"};return e.v.error("DatabaseApiService: Authentication failed",{component:"DatabaseApiService",action:"authenticateUser",error:d.message}),{success:!1,message:d.message??"Authentication failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Authentication error",{component:"DatabaseApiService",action:"authenticateUser",error:a}),console.error("API auth failed:",b),{success:!1,message:"Authentication service unavailable.",error:a}}}async createUser(a){let{username:b,email:c,password:d,fullName:e}=a;if(!b||!c||!d||!e)return{success:!1,message:"Missing required fields for user creation."};try{let a=await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:b,email:c,password:d,fullName:e})}),f=await a.json();if(f.success)return{success:!0,data:f.user,source:"API"};return{success:!1,message:f.message??"User creation failed"}}catch(a){return console.error("API createUser failed:",a),{success:!1,message:"User creation service unavailable."}}}async getArtists(){try{let a=await fetch("/api/artists"),b=await a.json();if(b.success)return{success:!0,data:b.data,source:"API"};return{success:!1,data:[],message:b.error??"Failed to retrieve artists"}}catch(a){return console.error("API: Failed to get artists:",a),{success:!1,data:[],message:"Artist service unavailable."}}}async updateArtistProfile(a,b){try{let c=await fetch("/api/profile/update",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:a,role:"Artist",...b})}),d=await c.json();if(d.success)return{success:!0,data:d.data,source:"API"};return{success:!1,message:d.error??"Artist profile update failed"}}catch(a){return console.error("API: Failed to update artist profile:",a),{success:!1,message:"Artist profile update service unavailable."}}}async updateLabelManagerProfile(a,b){try{let c=await fetch("/api/profile/update",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:a,role:"Label Manager",...b})}),d=await c.json();if(d.success)return{success:!0,data:d.data,source:"API"};return{success:!1,message:d.error??"Label Manager profile update failed"}}catch(a){return console.error("API: Failed to update label manager profile:",a),{success:!1,message:"Label Manager profile update service unavailable."}}}async getUserAvatar(a,b){try{let c=b?`?type=${b}`:"",d=await fetch(`/api/images/avatar/${a}${c}`),e=await d.json();if(e.success)return{success:!0,data:e.data,source:"API"};return{success:!1,message:e.error??"Failed to get user avatar"}}catch(a){return console.error("API: Failed to get user avatar:",a),{success:!1,message:"Avatar service unavailable."}}}async updateUserAvatar(a,b){try{let c=new FormData;c.append("file",b.file),c.append("artistName",b.artistName),c.append("userId",a);let d=await fetch("/api/upload/avatar",{method:"POST",body:c}),e=await d.json();if(e.success)return{success:!0,data:{url:e.url,path:e.path},source:"API"};return{success:!1,message:e.error??"Failed to update user avatar"}}catch(a){return console.error("API: Failed to update user avatar:",a),{success:!1,message:"Avatar update service unavailable."}}}async getSubmissions(a){e.v.info("DatabaseApiService: Getting submissions",{component:"DatabaseApiService",action:"getSubmissions",data:{username:a}});try{let b=a?`?username=${a}`:"",c=await fetch(`/api/submissions${b}`),d=await c.json();if(!d.success)return{success:!1,data:[],message:d.error??"Failed to retrieve submissions"};{let a=this.normalizeSubmissions(d.data);return{success:!0,data:a,source:"API"}}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Get submissions error",{component:"DatabaseApiService",action:"getSubmissions",error:a}),console.error("API: Failed to get submissions:",b),{success:!1,data:[],message:"Submission service unavailable.",error:a}}}async getSubmissionById(a){try{let b=await fetch(`/api/submissions/${a}`),c=await b.json();if(c.success)return{success:!0,data:c.data,source:"API"};return{success:!1,message:c.error??"Failed to get submission"}}catch(a){return console.error("API: Failed to get submission by ID:",a),{success:!1,message:"Submission service unavailable."}}}async createSubmission(a){e.v.info("DatabaseApiService: Creating submission",{component:"DatabaseApiService",action:"createSubmission"});try{let b=await fetch("/api/submissions",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),c=await b.json();if(c.success)return e.v.info("DatabaseApiService: Submission created",{component:"DatabaseApiService",action:"createSubmission",submissionId:c.data?.id}),{success:!0,data:c.data,source:"API"};return e.v.error("DatabaseApiService: Create submission failed",{component:"DatabaseApiService",action:"createSubmission",error:c.error}),{success:!1,message:c.error??"Create submission failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Create submission error",{component:"DatabaseApiService",action:"createSubmission",error:a}),{success:!1,message:"Create submission service unavailable.",error:a}}}async saveSubmission(a){let b=await this.createSubmission(a);return b.success&&b.data?{success:!0,data:b.data.id,source:b.source}:{success:!1,error:b.message}}async updateSubmission(a,b){e.v.info("DatabaseApiService: Updating submission",{component:"DatabaseApiService",action:"updateSubmission",data:{id:a}});try{let c=await fetch(`/api/submissions/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),d=await c.json();if(d.success)return e.v.info("DatabaseApiService: Submission updated",{component:"DatabaseApiService",action:"updateSubmission",submissionId:a}),{success:!0,data:d.data,source:"API"};return e.v.error("DatabaseApiService: Submission update failed",{component:"DatabaseApiService",action:"updateSubmission",error:d.error}),{success:!1,message:d.error??"Update failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Update submission error",{component:"DatabaseApiService",action:"updateSubmission",error:a}),console.error("API: Failed to update submission:",b),{success:!1,message:"Update service unavailable.",error:a}}}async updateSubmissionStatus(a,b){e.v.info("DatabaseApiService: Updating submission status",{component:"DatabaseApiService",action:"updateSubmissionStatus",data:{id:a,status:b}});try{let c=await fetch(`/api/submissions/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify({status:b})}),d=await c.json();if(d.success)return{success:!0,data:!0,source:"API"};return{success:!1,message:d.error??"Update status failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Update submission status error",{component:"DatabaseApiService",action:"updateSubmissionStatus",error:a}),{success:!1,message:"Update status service unavailable.",error:a}}}async deleteSubmission(a){e.v.info("DatabaseApiService: Deleting submission",{component:"DatabaseApiService",action:"deleteSubmission",data:{id:a}});try{let b=await fetch(`/api/submissions/${a}`,{method:"DELETE"}),c=await b.json();if(c.success)return e.v.info("DatabaseApiService: Submission deleted",{component:"DatabaseApiService",action:"deleteSubmission",submissionId:a}),{success:!0,data:!0,source:"API"};return e.v.error("DatabaseApiService: Submission deletion failed",{component:"DatabaseApiService",action:"deleteSubmission",error:c.error}),{success:!1,message:c.error??"Deletion failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Delete submission error",{component:"DatabaseApiService",action:"deleteSubmission",error:a}),{success:!1,message:"Delete service unavailable.",error:a}}}async createTrack(a){e.v.info("DatabaseApiService: Creating track",{component:"DatabaseApiService",action:"createTrack",data:{submissionId:a.submissionId,title:a.title}});try{let b=await fetch("/api/tracks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),c=await b.json();if(c.success)return e.v.info("DatabaseApiService: Track created",{component:"DatabaseApiService",action:"createTrack",trackId:c.data?.id}),{success:!0,data:c.data,source:"API"};return e.v.error("DatabaseApiService: Create track failed",{component:"DatabaseApiService",action:"createTrack",error:c.error}),{success:!1,message:c.error??"Create track failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Create track error",{component:"DatabaseApiService",action:"createTrack",error:a}),{success:!1,message:"Create track service unavailable.",error:a}}}async updateTrack(a,b){e.v.info("DatabaseApiService: Updating track",{component:"DatabaseApiService",action:"updateTrack",data:{trackId:a}});try{let c=await fetch(`/api/tracks/${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),d=await c.json();if(d.success)return e.v.info("DatabaseApiService: Track updated",{component:"DatabaseApiService",action:"updateTrack",trackId:a}),{success:!0,data:d.data,source:"API"};return e.v.error("DatabaseApiService: Track update failed",{component:"DatabaseApiService",action:"updateTrack",error:d.error}),{success:!1,message:d.error??"Update track failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Update track error",{component:"DatabaseApiService",action:"updateTrack",error:a}),{success:!1,message:"Update track service unavailable.",error:a}}}async getTracksBySubmissionId(a){e.v.info("DatabaseApiService: Getting tracks by submission ID",{component:"DatabaseApiService",action:"getTracksBySubmissionId",data:{submissionId:a}});try{let b=await fetch(`/api/submissions/${a}/tracks`),c=await b.json();if(c.success)return{success:!0,data:c.data,source:"API"};return{success:!1,data:[],message:c.error??"Failed to get tracks"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Get tracks by submission ID error",{component:"DatabaseApiService",action:"getTracksBySubmissionId",error:a}),{success:!1,data:[],message:"Get tracks service unavailable.",error:a}}}async getTrackById(a){try{let b=await fetch(`/api/tracks/${a}`),c=await b.json();if(c.success)return{success:!0,data:c.data,source:"API"};return{success:!1,message:c.error??"Failed to get track"}}catch(a){return console.error("API: Failed to get track by ID:",a),{success:!1,message:"Track service unavailable."}}}async deleteTrack(a){e.v.info("DatabaseApiService: Deleting track",{component:"DatabaseApiService",action:"deleteTrack",data:{trackId:a}});try{let b=await fetch(`/api/tracks/${a}`,{method:"DELETE"}),c=await b.json();if(c.success)return e.v.info("DatabaseApiService: Track deleted",{component:"DatabaseApiService",action:"deleteTrack",trackId:a}),{success:!0,data:!0,source:"API"};return e.v.error("DatabaseApiService: Track deletion failed",{component:"DatabaseApiService",action:"deleteTrack",error:c.error}),{success:!1,message:c.error??"Track deletion failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Delete track error",{component:"DatabaseApiService",action:"deleteTrack",error:a}),{success:!1,message:"Delete track service unavailable.",error:a}}}async createSubmissionWithTracks(a,b){e.v.info("DatabaseApiService: Creating submission with tracks",{component:"DatabaseApiService",action:"createSubmissionWithTracks",data:{title:a.title,trackCount:b.length}});try{let c=await fetch("/api/submissions/with-tracks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({submission:a,tracks:b})}),d=await c.json();if(d.success)return e.v.info("DatabaseApiService: Submission with tracks created",{component:"DatabaseApiService",action:"createSubmissionWithTracks",submissionId:d.data?.submission?.id}),{success:!0,data:d.data,source:"API"};return e.v.error("DatabaseApiService: Create submission with tracks failed",{component:"DatabaseApiService",action:"createSubmissionWithTracks",error:d.error}),{success:!1,message:d.error??"Create submission with tracks failed"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Create submission with tracks error",{component:"DatabaseApiService",action:"createSubmissionWithTracks",error:a}),{success:!1,message:"Create submission with tracks service unavailable.",error:a}}}async createSubmissionFromLegacy(a){try{let{submission:b,tracks:c}=(0,d.ko)(a);return await this.createSubmissionWithTracks(b,c)}catch(b){let a=b instanceof Error?b.message:"Unknown error";return e.v.error("DatabaseApiService: Create submission from legacy error",{component:"DatabaseApiService",action:"createSubmissionFromLegacy",error:a}),{success:!1,message:"Legacy submission conversion failed.",error:a}}}async getVideos(a){try{let b=a?`?${new URLSearchParams(a).toString()}`:"",c=await fetch(`/api/videos${b}`),d=await c.json();return d.success?{success:!0,data:d.data,source:"API"}:{success:!1,data:[],message:d.error??"Failed to get videos"}}catch(a){return console.error("API: Failed to get videos:",a),{success:!1,data:[],message:"Video service unavailable."}}}async saveVideo(a){try{let b=await fetch("/api/videos",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)}),c=await b.json();return c.success?{success:!0,data:c.data?.id,source:"API"}:{success:!1,message:c.error??"Save video failed"}}catch(a){return{success:!1,message:"Save video service unavailable.",error:a instanceof Error?a.message:"Unknown error"}}}async getFiles(a){try{let b=a?`?folderId=${a}`:"",c=await fetch(`/api/files${b}`),d=await c.json();return d.success?{success:!0,data:d.data,source:"API"}:{success:!1,data:[],message:d.error??"Failed to get files"}}catch(a){return console.error("API: Failed to get files:",a),{success:!1,data:[],message:"File service unavailable."}}}async getFolders(a){try{let b=a?`?parentId=${a}`:"",c=await fetch(`/api/folders${b}`),d=await c.json();return d.success?{success:!0,data:d.data,source:"API"}:{success:!1,data:[],message:d.error??"Failed to get folders"}}catch(a){return console.error("API: Failed to get folders:",a),{success:!1,data:[],message:"Folder service unavailable."}}}async getStatus(){try{let a=await fetch("http://localhost:3000/api/database-status"),b=await a.json();return{api:this.apiAvailable,prisma:b.success,database:b.success}}catch(a){return console.error("API: Failed to get status:",a),{api:!1,prisma:!1,database:!1}}}async testConnection(){e.v.info("DatabaseApiService: Testing connection",{component:"DatabaseApiService",action:"testConnection"});try{let a=await fetch("http://localhost:3000/api/database-status"),b=await a.json();return{success:b.success,data:b.success,source:"API"}}catch(b){let a=b instanceof Error?b.message:"Unknown error";return console.error("❌ Database connection test failed:",a),{success:!1,message:"Connection test failed.",error:a}}}}let g=new f},96487:()=>{}};