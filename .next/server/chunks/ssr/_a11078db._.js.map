{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///F:/studio.ankun/lib/logger.ts"],"sourcesContent":["// Logger Service - Tôi là An Kun\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error'\n\nexport interface LogEntry {\n    id: string\n    timestamp: string\n    level: LogLevel\n    message: string\n    data?: any\n    userId?: string\n    component?: string\n    action?: string\n}\n\nclass Logger {\n    private logs: LogEntry[] = []\n    private readonly maxLogs = 1000\n\n    private createEntry(level: LogLevel, message: string, data?: any, meta?: {\n        userId?: string\n        component?: string\n        action?: string\n    }): LogEntry {\n        return {\n            id: `${Date.now()}-${Math.random().toString(36).substring(2, 11)}`,\n            timestamp: new Date().toISOString(),\n            level,\n            message,\n            data,\n            userId: meta?.userId,\n            component: meta?.component,\n            action: meta?.action\n        }\n    }\n\n    debug(message: string, data?: any, meta?: any) {\n        const entry = this.createEntry('debug', message, data, meta)\n        this.addLog(entry)\n        if (process.env.NODE_ENV === 'development') {\n            console.debug(`[DEBUG] ${message}`, data)\n        }\n    }\n\n    info(message: string, data?: any, meta?: any) {\n        const entry = this.createEntry('info', message, data, meta)\n        this.addLog(entry)\n        console.info(`[INFO] ${message}`, data)\n    }\n\n    warn(message: string, data?: any, meta?: any) {\n        const entry = this.createEntry('warn', message, data, meta)\n        this.addLog(entry)\n        console.warn(`[WARN] ${message}`, data)\n    }\n\n    error(message: string, error?: any, meta?: any) {\n        const entry = this.createEntry('error', message, error, meta)\n        this.addLog(entry)\n        console.error(`[ERROR] ${message}`, error)\n    }\n\n    private addLog(entry: LogEntry) {\n        this.logs.unshift(entry)\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(0, this.maxLogs)\n        }\n\n        // Store in localStorage for persistence (only in browser)\n        if (typeof window !== 'undefined') {\n            try {\n                const storedLogs = JSON.parse(localStorage.getItem('aks_logs') || '[]')\n                storedLogs.unshift(entry)\n                if (storedLogs.length > this.maxLogs) {\n                    storedLogs.splice(this.maxLogs)\n                }\n                localStorage.setItem('aks_logs', JSON.stringify(storedLogs))\n            } catch (e) {\n                console.error('Failed to store logs:', e)\n            }\n        }\n    }\n\n    getLogs(): LogEntry[] {\n        if (typeof window !== 'undefined') {\n            try {\n                const stored = localStorage.getItem('aks_logs')\n                if (stored) {\n                    return JSON.parse(stored)\n                }\n            } catch (e) {\n                console.error('Failed to load logs:', e)\n            }\n        }\n        return this.logs\n    }\n\n    clearLogs() {\n        this.logs = []\n        if (typeof window !== 'undefined') {\n            localStorage.removeItem('aks_logs')\n        }\n    }\n\n    exportLogs(): string {\n        const logs = this.getLogs()\n        return JSON.stringify(logs, null, 2)\n    }\n\n    filterLogs(level?: LogLevel, component?: string, search?: string): LogEntry[] {\n        const logs = this.getLogs()\n        return logs.filter(log => {\n            if (level && log.level !== level) return false\n            if (component && log.component !== component) return false\n            if (search && !log.message.toLowerCase().includes(search.toLowerCase())) return false\n            return true\n        })\n    }\n\n    // Add a console helper method\n    debugToConsole() {\n        if (typeof window !== 'undefined') {\n            console.log('%c AKs Studio Logs', 'background: #7e57c2; color: white; padding: 2px 6px; border-radius: 2px;');\n            this.getLogs().forEach(log => {\n                const style = this.getConsoleStyle(log.level);\n                console.groupCollapsed(\n                    `%c${log.level.toUpperCase()}%c ${new Date(log.timestamp).toLocaleString()} - ${log.message}`,\n                    style,\n                    'color: inherit'\n                );\n                console.log('Component:', log.component || 'Not specified');\n                console.log('Action:', log.action || 'Not specified');\n                console.log('User ID:', log.userId || 'Not specified');\n                console.log('Data:', log.data ?? 'None');\n                console.groupEnd();\n            });\n            return `Displayed ${this.getLogs().length} logs in console`;\n        }\n        return 'Console debugging only available in browser';\n    }\n\n    private getConsoleStyle(level: LogLevel): string {\n        switch (level) {\n            case 'debug': return 'background: #607d8b; color: white; padding: 2px 6px; border-radius: 2px;';\n            case 'info': return 'background: #2196f3; color: white; padding: 2px 6px; border-radius: 2px;';\n            case 'warn': return 'background: #ff9800; color: black; padding: 2px 6px; border-radius: 2px;';\n            case 'error': return 'background: #f44336; color: white; padding: 2px 6px; border-radius: 2px;';\n            default: return 'color: inherit';\n        }\n    }\n}\n\nexport const logger = new Logger()\n"],"names":[],"mappings":"AAAA,iCAAiC;;;;AAcjC,MAAM;IACM,OAAmB,EAAE,CAAA;IACZ,UAAU,KAAI;IAEvB,YAAY,KAAe,EAAE,OAAe,EAAE,IAAU,EAAE,IAIjE,EAAY;QACT,OAAO;YACH,IAAI,GAAG,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG,KAAK;YAClE,WAAW,IAAI,OAAO,WAAW;YACjC;YACA;YACA;YACA,QAAQ,MAAM;YACd,WAAW,MAAM;YACjB,QAAQ,MAAM;QAClB;IACJ;IAEA,MAAM,OAAe,EAAE,IAAU,EAAE,IAAU,EAAE;QAC3C,MAAM,QAAQ,IAAI,CAAC,WAAW,CAAC,SAAS,SAAS,MAAM;QACvD,IAAI,CAAC,MAAM,CAAC;QACZ,wCAA4C;YACxC,QAAQ,KAAK,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE;QACxC;IACJ;IAEA,KAAK,OAAe,EAAE,IAAU,EAAE,IAAU,EAAE;QAC1C,MAAM,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAQ,SAAS,MAAM;QACtD,IAAI,CAAC,MAAM,CAAC;QACZ,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE;IACtC;IAEA,KAAK,OAAe,EAAE,IAAU,EAAE,IAAU,EAAE;QAC1C,MAAM,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAQ,SAAS,MAAM;QACtD,IAAI,CAAC,MAAM,CAAC;QACZ,QAAQ,IAAI,CAAC,CAAC,OAAO,EAAE,SAAS,EAAE;IACtC;IAEA,MAAM,OAAe,EAAE,KAAW,EAAE,IAAU,EAAE;QAC5C,MAAM,QAAQ,IAAI,CAAC,WAAW,CAAC,SAAS,SAAS,OAAO;QACxD,IAAI,CAAC,MAAM,CAAC;QACZ,QAAQ,KAAK,CAAC,CAAC,QAAQ,EAAE,SAAS,EAAE;IACxC;IAEQ,OAAO,KAAe,EAAE;QAC5B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QAClB,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,EAAE;YACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO;QAC/C;QAEA,0DAA0D;QAC1D;;IAYJ;IAEA,UAAsB;QAClB;;QAUA,OAAO,IAAI,CAAC,IAAI;IACpB;IAEA,YAAY;QACR,IAAI,CAAC,IAAI,GAAG,EAAE;QACd;;IAGJ;IAEA,aAAqB;QACjB,MAAM,OAAO,IAAI,CAAC,OAAO;QACzB,OAAO,KAAK,SAAS,CAAC,MAAM,MAAM;IACtC;IAEA,WAAW,KAAgB,EAAE,SAAkB,EAAE,MAAe,EAAc;QAC1E,MAAM,OAAO,IAAI,CAAC,OAAO;QACzB,OAAO,KAAK,MAAM,CAAC,CAAA;YACf,IAAI,SAAS,IAAI,KAAK,KAAK,OAAO,OAAO;YACzC,IAAI,aAAa,IAAI,SAAS,KAAK,WAAW,OAAO;YACrD,IAAI,UAAU,CAAC,IAAI,OAAO,CAAC,WAAW,GAAG,QAAQ,CAAC,OAAO,WAAW,KAAK,OAAO;YAChF,OAAO;QACX;IACJ;IAEA,8BAA8B;IAC9B,iBAAiB;QACb;;QAiBA,OAAO;IACX;IAEQ,gBAAgB,KAAe,EAAU;QAC7C,OAAQ;YACJ,KAAK;gBAAS,OAAO;YACrB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAS,OAAO;YACrB;gBAAS,OAAO;QACpB;IACJ;AACJ;AAEO,MAAM,SAAS,IAAI","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///F:/studio.ankun/lib/database-api-service.ts"],"sourcesContent":["// File: lib/database-api-service.ts\r\n// An Kun Studio Digital Music Distribution System\r\n// Service thống nhất cho tất cả database operations - SỬ DỤNG API ENDPOINTS\r\n\r\nimport type { User } from \"@/types/user\"\r\nimport type { \r\n  Submission, \r\n  SubmissionStatus, \r\n  VideoInfo, \r\n  ContributorInfo, \r\n  FileInfo, \r\n  FolderInfo,\r\n  PrismaSubmission,\r\n  PrismaTrack,\r\n  PrismaSubmissionStatus,\r\n  convertLegacySubmissionToPrisma,\r\n  convertPrismaSubmissionToLegacy\r\n} from \"@/types/submission\"\r\nimport { logger } from \"@/lib/logger\"\r\n\r\nexport interface DatabaseResult<T = unknown> {\r\n  success: boolean\r\n  data?: T\r\n  error?: string\r\n  message?: string\r\n  source?: string\r\n}\r\n\r\nexport class DatabaseApiService {\r\n  private apiAvailable = true;\r\n\r\n  constructor() {\r\n    console.log('DatabaseApiService: Initialized (Production Only - API Based)')\r\n  }\r\n\r\n  // Helper function để chuẩn hóa submissions với file mặc định\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  private normalizeSubmissions(submissions: unknown[]): any[] {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return (submissions as any[]).map((submission: any) => {\r\n      // Xử lý tên nghệ sĩ với logic Various Artist\r\n      let processedArtistName = submission.artist_name ?? submission.artists ?? '';\r\n\r\n      // Nếu không có tên nghệ sĩ hoặc rỗng\r\n      if (!processedArtistName || processedArtistName.trim() === '') {\r\n        processedArtistName = 'Various Artist';\r\n      } else {\r\n        // Kiểm tra nếu có nhiều hơn 3 nghệ sĩ (phân cách bằng dấu phẩy, &, hoặc feat)\r\n        const artistSeparators = /[,&]|feat\\.|featuring|ft\\./gi;\r\n        const artistCount = processedArtistName.split(artistSeparators).length;\r\n\r\n        if (artistCount > 3) {\r\n          processedArtistName = 'Various Artist';\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...submission,\r\n        // Nếu không có ảnh cover hoặc artwork, sử dụng ảnh mặc định\r\n        cover_art_url: submission.cover_art_url ?? submission.artwork_path ?? '/dianhac.jpg',\r\n        artwork_path: submission.artwork_path ?? submission.cover_art_url ?? '/dianhac.jpg',\r\n        imageUrl: submission.imageUrl ?? submission.cover_art_url ?? submission.artwork_path ?? '/dianhac.jpg',\r\n\r\n        // Nếu không có file audio, sử dụng file mặc định\r\n        audio_file_url: submission.audio_file_url ?? submission.file_path ?? '/VNA2P25XXXXX.wav',\r\n        file_path: submission.file_path ?? submission.audio_file_url ?? '/VNA2P25XXXXX.wav',\r\n        audioUrl: submission.audioUrl ?? submission.audio_file_url ?? submission.file_path ?? '/VNA2P25XXXXX.wav',\r\n\r\n        // Đảm bảo các trường bắt buộc với logic Various Artist\r\n        track_title: submission.track_title ?? submission.title ?? 'Untitled Track',\r\n        artist_name: processedArtistName,\r\n        status: submission.status ?? 'pending',\r\n        genre: submission.genre ?? 'Unknown',\r\n        submission_date: submission.submission_date ?? submission.created_at ?? new Date().toISOString()\r\n      }\r\n    })\r\n  }\r\n\r\n  public async initialize() {\r\n    // API-based service không cần initialize database connection\r\n    console.log(\"✅ Database API Service initialized (API-based)\");\r\n  }\r\n\r\n  // ==================== AUTHENTICATION METHODS ====================\r\n\r\n  public async authenticateUser(username: string, password?: string): Promise<DatabaseResult<User>> {\r\n    logger.info('DatabaseApiService: Authentication attempt', {\r\n      component: 'DatabaseApiService',\r\n      action: 'authenticateUser',\r\n      data: { username }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Authentication successful', {\r\n          component: 'DatabaseApiService',\r\n          action: 'authenticateUser',\r\n          userId: result.user?.id\r\n        })\r\n        console.log(`✅ API authentication successful for ${result.user?.role}`);\r\n        return { success: true, data: result.user, source: \"API\" };\r\n      } else {\r\n        logger.error('DatabaseApiService: Authentication failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'authenticateUser',\r\n          error: result.message\r\n        })\r\n        return { success: false, message: result.message ?? 'Authentication failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Authentication error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'authenticateUser',\r\n        error: errorMessage\r\n      })\r\n      console.error(\"API auth failed:\", error);\r\n      return { success: false, message: \"Authentication service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  public async createUser(userData: Partial<User>): Promise<DatabaseResult<User>> {\r\n    const { username, email, password, fullName } = userData;\r\n\r\n    if (!username || !email || !password || !fullName) {\r\n      return { success: false, message: \"Missing required fields for user creation.\" };\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, email, password, fullName })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.user, source: \"API\" };\r\n      } else {\r\n        return { success: false, message: result.message ?? 'User creation failed' };\r\n      }\r\n    } catch (error) {\r\n      console.error(\"API createUser failed:\", error);\r\n      return { success: false, message: \"User creation service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  // ==================== ARTIST METHODS ====================\r\n\r\n  public async getArtists(): Promise<DatabaseResult<User[]>> {\r\n    try {\r\n      const response = await fetch('/api/artists');\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, data: [], message: result.error ?? \"Failed to retrieve artists\" };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to get artists:', error);\r\n      return { success: false, data: [], message: \"Artist service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async updateArtistProfile(id: string, profileData: Partial<User>): Promise<DatabaseResult<User>> {\r\n    try {\r\n      const response = await fetch(`/api/profile/update`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id, role: 'Artist', ...profileData })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Artist profile update failed' };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to update artist profile:', error);\r\n      return { success: false, message: \"Artist profile update service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async updateLabelManagerProfile(id: string, profileData: Partial<User>): Promise<DatabaseResult<User>> {\r\n    try {\r\n      const response = await fetch(`/api/profile/update`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ id, role: 'Label Manager', ...profileData })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Label Manager profile update failed' };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to update label manager profile:', error);\r\n      return { success: false, message: \"Label Manager profile update service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async getUserAvatar(userId: string, type?: string): Promise<DatabaseResult<string>> {\r\n    try {\r\n      const queryParams = type ? `?type=${type}` : '';\r\n      const response = await fetch(`/api/images/avatar/${userId}${queryParams}`);\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Failed to get user avatar' };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to get user avatar:', error);\r\n      return { success: false, message: \"Avatar service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async updateUserAvatar(userId: string, avatarData: { file: File; artistName: string }): Promise<DatabaseResult<{ url: string; path: string }>> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', avatarData.file);\r\n      formData.append('artistName', avatarData.artistName);\r\n      formData.append('userId', userId);\r\n\r\n      const response = await fetch('/api/upload/avatar', {\r\n        method: 'POST',\r\n        body: formData\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: { url: result.url, path: result.path }, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Failed to update user avatar' };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to update user avatar:', error);\r\n      return { success: false, message: \"Avatar update service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  // ==================== SUBMISSION METHODS ====================\r\n\r\n  public async getSubmissions(username?: string): Promise<DatabaseResult<Submission[]>> {\r\n    logger.info('DatabaseApiService: Getting submissions', {\r\n      component: 'DatabaseApiService',\r\n      action: 'getSubmissions',\r\n      data: { username }\r\n    })\r\n\r\n    try {\r\n      const queryParams = username ? `?username=${username}` : '';\r\n      const response = await fetch(`/api/submissions${queryParams}`);\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        const normalized = this.normalizeSubmissions(result.data);\r\n        return { success: true, data: normalized, source: 'API' };\r\n      } else {\r\n        return { success: false, data: [], message: result.error ?? \"Failed to retrieve submissions\" };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Get submissions error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'getSubmissions',\r\n        error: errorMessage\r\n      })\r\n      console.error('API: Failed to get submissions:', error);\r\n      return { success: false, data: [], message: \"Submission service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  public async getSubmissionById(id: string): Promise<DatabaseResult<Submission>> {\r\n    try {\r\n      const response = await fetch(`/api/submissions/${id}`);\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Failed to get submission' };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to get submission by ID:', error);\r\n      return { success: false, message: \"Submission service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async createSubmission(submission: Omit<Submission, 'id'>): Promise<DatabaseResult<Submission>> {\r\n    logger.info('DatabaseApiService: Creating submission', {\r\n      component: 'DatabaseApiService',\r\n      action: 'createSubmission'\r\n    })\r\n\r\n    try {\r\n      const response = await fetch('/api/submissions', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(submission)\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Submission created', {\r\n          component: 'DatabaseApiService',\r\n          action: 'createSubmission',\r\n          submissionId: result.data?.id\r\n        })\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Create submission failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'createSubmission',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Create submission failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Create submission error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'createSubmission',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Create submission service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  public async saveSubmission(submission: Omit<Submission, 'id'>): Promise<DatabaseResult<string>> {\r\n    // Alias for createSubmission for backward compatibility\r\n    const result = await this.createSubmission(submission);\r\n    if (result.success && result.data) {\r\n      return { success: true, data: result.data.id, source: result.source };\r\n    }\r\n    return { success: false, error: result.message };\r\n  }\r\n\r\n  public async updateSubmission(id: string, updateData: Partial<Submission>): Promise<DatabaseResult<Submission>> {\r\n    logger.info('DatabaseApiService: Updating submission', {\r\n      component: 'DatabaseApiService',\r\n      action: 'updateSubmission',\r\n      data: { id }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch(`/api/submissions/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(updateData)\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Submission updated', {\r\n          component: 'DatabaseApiService',\r\n          action: 'updateSubmission',\r\n          submissionId: id\r\n        })\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Submission update failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'updateSubmission',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Update failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Update submission error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'updateSubmission',\r\n        error: errorMessage\r\n      })\r\n      console.error('API: Failed to update submission:', error);\r\n      return { success: false, message: \"Update service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  public async updateSubmissionStatus(id: string, status: SubmissionStatus): Promise<DatabaseResult<boolean>> {\r\n    logger.info('DatabaseApiService: Updating submission status', {\r\n      component: 'DatabaseApiService',\r\n      action: 'updateSubmissionStatus',\r\n      data: { id, status }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch(`/api/submissions/${id}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ status })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: true, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Update status failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Update submission status error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'updateSubmissionStatus',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Update status service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  public async deleteSubmission(id: string): Promise<DatabaseResult<boolean>> {\r\n    logger.info('DatabaseApiService: Deleting submission', {\r\n      component: 'DatabaseApiService',\r\n      action: 'deleteSubmission',\r\n      data: { id }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch(`/api/submissions/${id}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Submission deleted', {\r\n          component: 'DatabaseApiService',\r\n          action: 'deleteSubmission',\r\n          submissionId: id\r\n        })\r\n        return { success: true, data: true, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Submission deletion failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'deleteSubmission',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Deletion failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Delete submission error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'deleteSubmission',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Delete service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  // ==================== TRACK METHODS (NEW PRISMA-COMPATIBLE) ====================\r\n\r\n  /**\r\n   * Create a new track for a submission\r\n   */\r\n  public async createTrack(trackData: Omit<PrismaTrack, 'id' | 'createdAt' | 'updatedAt'>): Promise<DatabaseResult<PrismaTrack>> {\r\n    logger.info('DatabaseApiService: Creating track', {\r\n      component: 'DatabaseApiService',\r\n      action: 'createTrack',\r\n      data: { submissionId: trackData.submissionId, title: trackData.title }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch('/api/tracks', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(trackData)\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Track created', {\r\n          component: 'DatabaseApiService',\r\n          action: 'createTrack',\r\n          trackId: result.data?.id\r\n        })\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Create track failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'createTrack',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Create track failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Create track error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'createTrack',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Create track service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update an existing track\r\n   */\r\n  public async updateTrack(trackId: string, updateData: Partial<PrismaTrack>): Promise<DatabaseResult<PrismaTrack>> {\r\n    logger.info('DatabaseApiService: Updating track', {\r\n      component: 'DatabaseApiService',\r\n      action: 'updateTrack',\r\n      data: { trackId }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch(`/api/tracks/${trackId}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(updateData)\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Track updated', {\r\n          component: 'DatabaseApiService',\r\n          action: 'updateTrack',\r\n          trackId: trackId\r\n        })\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Track update failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'updateTrack',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Update track failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Update track error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'updateTrack',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Update track service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all tracks for a specific submission\r\n   */\r\n  public async getTracksBySubmissionId(submissionId: string): Promise<DatabaseResult<PrismaTrack[]>> {\r\n    logger.info('DatabaseApiService: Getting tracks by submission ID', {\r\n      component: 'DatabaseApiService',\r\n      action: 'getTracksBySubmissionId',\r\n      data: { submissionId }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch(`/api/submissions/${submissionId}/tracks`);\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, data: [], message: result.error ?? 'Failed to get tracks' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Get tracks by submission ID error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'getTracksBySubmissionId',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, data: [], message: \"Get tracks service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific track by ID\r\n   */\r\n  public async getTrackById(trackId: string): Promise<DatabaseResult<PrismaTrack>> {\r\n    try {\r\n      const response = await fetch(`/api/tracks/${trackId}`);\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        return { success: false, message: result.error ?? 'Failed to get track' };\r\n      }\r\n    } catch (error) {\r\n      console.error('API: Failed to get track by ID:', error);\r\n      return { success: false, message: \"Track service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete a track\r\n   */\r\n  public async deleteTrack(trackId: string): Promise<DatabaseResult<boolean>> {\r\n    logger.info('DatabaseApiService: Deleting track', {\r\n      component: 'DatabaseApiService',\r\n      action: 'deleteTrack',\r\n      data: { trackId }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch(`/api/tracks/${trackId}`, {\r\n        method: 'DELETE'\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Track deleted', {\r\n          component: 'DatabaseApiService',\r\n          action: 'deleteTrack',\r\n          trackId: trackId\r\n        })\r\n        return { success: true, data: true, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Track deletion failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'deleteTrack',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Track deletion failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Delete track error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'deleteTrack',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Delete track service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create submission with tracks in a transaction (Prisma-compatible)\r\n   */\r\n  public async createSubmissionWithTracks(\r\n    submissionData: Omit<PrismaSubmission, 'id' | 'createdAt' | 'updatedAt'>,\r\n    tracksData: Omit<PrismaTrack, 'id' | 'createdAt' | 'updatedAt' | 'submissionId'>[]\r\n  ): Promise<DatabaseResult<{ submission: PrismaSubmission; tracks: PrismaTrack[] }>> {\r\n    logger.info('DatabaseApiService: Creating submission with tracks', {\r\n      component: 'DatabaseApiService',\r\n      action: 'createSubmissionWithTracks',\r\n      data: { title: submissionData.title, trackCount: tracksData.length }\r\n    })\r\n\r\n    try {\r\n      const response = await fetch('/api/submissions/with-tracks', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ submission: submissionData, tracks: tracksData })\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.success) {\r\n        logger.info('DatabaseApiService: Submission with tracks created', {\r\n          component: 'DatabaseApiService',\r\n          action: 'createSubmissionWithTracks',\r\n          submissionId: result.data?.submission?.id\r\n        })\r\n        return { success: true, data: result.data, source: 'API' };\r\n      } else {\r\n        logger.error('DatabaseApiService: Create submission with tracks failed', {\r\n          component: 'DatabaseApiService',\r\n          action: 'createSubmissionWithTracks',\r\n          error: result.error\r\n        })\r\n        return { success: false, message: result.error ?? 'Create submission with tracks failed' };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Create submission with tracks error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'createSubmissionWithTracks',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Create submission with tracks service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to create submission from legacy format (backward compatibility)\r\n   */\r\n  public async createSubmissionFromLegacy(legacySubmission: Omit<Submission, 'id'>): Promise<DatabaseResult<{ submission: PrismaSubmission; tracks: PrismaTrack[] }>> {\r\n    try {\r\n      const { submission, tracks } = convertLegacySubmissionToPrisma(legacySubmission as Submission);\r\n      return await this.createSubmissionWithTracks(submission, tracks);\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      logger.error('DatabaseApiService: Create submission from legacy error', {\r\n        component: 'DatabaseApiService',\r\n        action: 'createSubmissionFromLegacy',\r\n        error: errorMessage\r\n      })\r\n      return { success: false, message: \"Legacy submission conversion failed.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  // ==================== VIDEO METHODS ====================\r\n\r\n  public async getVideos(filter?: Record<string, unknown>): Promise<DatabaseResult<VideoInfo[]>> {\r\n    try {\r\n      const queryParams = filter ? `?${new URLSearchParams(filter as Record<string, string>).toString()}` : '';\r\n      const response = await fetch(`/api/videos${queryParams}`);\r\n      const result = await response.json();\r\n\r\n      return result.success \r\n        ? { success: true, data: result.data, source: 'API' }\r\n        : { success: false, data: [], message: result.error ?? 'Failed to get videos' };\r\n    } catch (error) {\r\n      console.error('API: Failed to get videos:', error);\r\n      return { success: false, data: [], message: \"Video service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async saveVideo(video: Omit<VideoInfo, 'id'>): Promise<DatabaseResult<string>> {\r\n    try {\r\n      const response = await fetch('/api/videos', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(video)\r\n      });\r\n\r\n      const result = await response.json();\r\n      return result.success \r\n        ? { success: true, data: result.data?.id, source: 'API' }\r\n        : { success: false, message: result.error ?? 'Save video failed' };\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      return { success: false, message: \"Save video service unavailable.\", error: errorMessage };\r\n    }\r\n  }\r\n\r\n  // ==================== FILE EXPLORER METHODS ====================\r\n\r\n  public async getFiles(folderId?: string): Promise<DatabaseResult<FileInfo[]>> {\r\n    try {\r\n      const queryParams = folderId ? `?folderId=${folderId}` : '';\r\n      const response = await fetch(`/api/files${queryParams}`);\r\n      const result = await response.json();\r\n\r\n      return result.success \r\n        ? { success: true, data: result.data, source: 'API' }\r\n        : { success: false, data: [], message: result.error ?? 'Failed to get files' };\r\n    } catch (error) {\r\n      console.error('API: Failed to get files:', error);\r\n      return { success: false, data: [], message: \"File service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  public async getFolders(parentId?: string): Promise<DatabaseResult<FolderInfo[]>> {\r\n    try {\r\n      const queryParams = parentId ? `?parentId=${parentId}` : '';\r\n      const response = await fetch(`/api/folders${queryParams}`);\r\n      const result = await response.json();\r\n\r\n      return result.success \r\n        ? { success: true, data: result.data, source: 'API' }\r\n        : { success: false, data: [], message: result.error ?? 'Failed to get folders' };\r\n    } catch (error) {\r\n      console.error('API: Failed to get folders:', error);\r\n      return { success: false, data: [], message: \"Folder service unavailable.\" };\r\n    }\r\n  }\r\n\r\n  // ==================== SYSTEM METHODS ====================\r\n\r\n  public async getStatus(): Promise<{ api: boolean; prisma: boolean; database: boolean }> {\r\n    try {\r\n      const response = await fetch('/api/database-status');\r\n      const result = await response.json();\r\n      \r\n      return {\r\n        api: this.apiAvailable,\r\n        prisma: result.success,\r\n        database: result.success,\r\n      };\r\n    } catch (error) {\r\n      console.error('API: Failed to get status:', error);\r\n      return {\r\n        api: false,\r\n        prisma: false,\r\n        database: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  public async testConnection(): Promise<DatabaseResult<boolean>> {\r\n    logger.info('DatabaseApiService: Testing connection', {\r\n      component: 'DatabaseApiService',\r\n      action: 'testConnection'\r\n    })\r\n\r\n    try {\r\n      const response = await fetch('/api/database-status')\r\n      const result = await response.json()\r\n      return { success: result.success, data: result.success, source: 'API' }\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error'\r\n      console.error('❌ Database connection test failed:', errorMessage)\r\n      return { success: false, message: \"Connection test failed.\", error: errorMessage }\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instances\r\nexport const databaseApiService = new DatabaseApiService()\r\n\r\n// Backward compatibility exports\r\nexport const databaseService = databaseApiService\r\nexport const multiDB = databaseApiService\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1154, "column": 0}, "map": {"version":3,"sources":["file:///F:/studio.ankun/lib/authorization-service.ts"],"sourcesContent":["// Active: 1750877192019@@ep-mute - rice - a17ojtca - pooler.ap - southeast - 1.aws.neon.tech@5732@aksstudio\n// Tôi là An Kun\n// Hỗ trợ dự án, Copilot, Gemini\n// Tác giả kiêm xuất bản bởi An Kun Studio Digital Music\n\nimport type { User } from \"@/types/user\"\nimport type { SimpleSubmission, SubmissionStats } from \"@/types/submission\"\n\nexport enum UserRole {\n    LABEL_MANAGER = \"Label Manager\",\n    ARTIST = \"Artist\"\n}\n\nexport enum SubmissionStatus {\n    PENDING = \"pending\",\n    APPROVED = \"approved\",\n    REJECTED = \"rejected\",\n    PUBLISHED = \"published\",\n    CANCELLED = \"cancelled\"\n}\n\nexport interface PermissionResult {\n    allowed: boolean\n    reason?: string\n}\n\nexport class AuthorizationService {\n    // Kiểm tra quyền truy cập submissions\n    static canViewSubmission(user: User, submission: SimpleSubmission): PermissionResult {\n        // Label Manager có quyền xem tất cả submissions\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        // Artist chỉ được xem submissions của mình\n        if (user.role === UserRole.ARTIST) {\n            if (submission.artist_id === user.id || submission.user_id === user.id) {\n                return { allowed: true }\n            }\n            return {\n                allowed: false,\n                reason: \"Artists can only view their own submissions\"\n            }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Unauthorized role\"\n        }\n    }\n\n    // Kiểm tra quyền chỉnh sửa submissions\n    static canEditSubmission(user: User, submission: SimpleSubmission): PermissionResult {\n        // Label Manager có quyền chỉnh sửa tất cả submissions\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        // Artist chỉ được chỉnh sửa submissions của mình khi còn status \"pending\"\n        if (user.role === UserRole.ARTIST) {\n            // Kiểm tra xem có phải submission của artist này không\n            if (submission.artist_id !== user.id && submission.user_id !== user.id) {\n                return {\n                    allowed: false,\n                    reason: \"Artists can only edit their own submissions\"\n                }\n            }\n\n            // Kiểm tra status - chỉ cho phép chỉnh sửa khi còn \"pending\"\n            if (submission.status !== SubmissionStatus.PENDING) {\n                return {\n                    allowed: false,\n                    reason: \"Artists can only edit submissions that are still pending approval\"\n                }\n            }\n\n            return { allowed: true }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Unauthorized role\"\n        }\n    }\n\n    // Kiểm tra quyền xóa submissions\n    static canDeleteSubmission(user: User): PermissionResult {\n        // Chỉ Label Manager mới có quyền xóa\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Only Label Managers can delete submissions\"\n        }\n    }\n\n    // Kiểm tra quyền truy cập system settings\n    static canAccessSystemSettings(user: User): PermissionResult {\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Only Label Managers can access system settings\"\n        }\n    }\n\n    // Kiểm tra quyền sử dụng Debug Tools\n    static canUseDebugTools(user: User): PermissionResult {\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Only Label Managers can use debug tools\"\n        }\n    }\n\n    // Kiểm tra quyền xem thống kê tổng quan\n    static canViewFullStatistics(user: User): PermissionResult {\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Only Label Managers can view full statistics\"\n        }\n    }\n\n    // Kiểm tra quyền approve/reject submissions\n    static canApproveRejectSubmission(user: User): PermissionResult {\n        if (user.role === UserRole.LABEL_MANAGER) {\n            return { allowed: true }\n        }\n\n        return {\n            allowed: false,\n            reason: \"Only Label Managers can approve or reject submissions\"\n        }\n    }\n\n    // Kiểm tra quyền resubmit sau khi bị reject\n    static canResubmitAfterRejection(user: User, submission: SimpleSubmission): PermissionResult {\n        // Chỉ artist và submission phải ở trạng thái rejected\n        if (user.role !== UserRole.ARTIST) {\n            return {\n                allowed: false,\n                reason: \"Only artists can resubmit rejected submissions\"\n            }\n        }\n\n        if (submission.artist_id !== user.id && submission.user_id !== user.id) {\n            return {\n                allowed: false,\n                reason: \"Artists can only resubmit their own submissions\"\n            }\n        }\n\n        if (submission.status !== SubmissionStatus.REJECTED) {\n            return {\n                allowed: false,\n                reason: \"Can only resubmit rejected submissions\"\n            }\n        }\n\n        return { allowed: true }\n    }\n\n    // Kiểm tra ngày phát hành hợp lệ\n    static validateReleaseDate(user: User, submission: SimpleSubmission, releaseDate: string): PermissionResult {\n        const submissionDate = new Date(submission.submission_date ?? submission.created_at ?? new Date())\n        const requestedDate = new Date(releaseDate)\n\n        // Nếu là bản đã phát hành (published), cho phép chọn ngày trong quá khứ\n        if (submission.status === SubmissionStatus.PUBLISHED) {\n            return { allowed: true }\n        }\n\n        // Nếu là bản mới, chỉ cho phép từ ngày submit đến +2 ngày\n        const minDate = submissionDate\n        const maxDate = new Date(submissionDate.getTime() + (2 * 24 * 60 * 60 * 1000)) // +2 ngày\n\n        if (requestedDate < minDate || requestedDate > maxDate) {\n            return {\n                allowed: false,\n                reason: `Release date must be between ${minDate.toDateString()} and ${maxDate.toDateString()}`\n            }\n        }\n\n        return { allowed: true }\n    }\n\n    // Filter submissions dựa trên quyền của user\n    static filterSubmissionsForUser(user: User, submissions: SimpleSubmission[]): SimpleSubmission[] {\n        if (user.role === UserRole.LABEL_MANAGER) {\n            // Label Manager xem được tất cả\n            return submissions\n        }\n\n        if (user.role === UserRole.ARTIST) {\n            // Artist chỉ xem được submissions của mình\n            return submissions.filter(submission =>\n                submission.artist_id === user.id || submission.user_id === user.id\n            )\n        }\n\n        return []\n    }\n\n    // Generate statistics cho user dựa trên quyền\n    static generateUserStatistics(user: User, submissions: SimpleSubmission[]): SubmissionStats {\n        const userSubmissions = this.filterSubmissionsForUser(user, submissions)\n\n        const stats = {\n            total: userSubmissions.length,\n            pending: userSubmissions.filter(s => s.status === SubmissionStatus.PENDING).length,\n            approved: userSubmissions.filter(s => s.status === SubmissionStatus.APPROVED).length,\n            rejected: userSubmissions.filter(s => s.status === SubmissionStatus.REJECTED).length,\n            published: userSubmissions.filter(s => s.status === SubmissionStatus.PUBLISHED).length,\n            cancelled: userSubmissions.filter(s => s.status === SubmissionStatus.CANCELLED).length\n        }\n\n        if (user.role === UserRole.LABEL_MANAGER) {\n            // Label Manager có thêm thống kê tổng quan\n            return {\n                ...stats,\n                userRole: \"Label Manager\",\n                canViewAll: true,\n                totalArtists: [...new Set(submissions.map(s => s.artist_id ?? s.user_id))].length,\n                recentSubmissions: submissions.slice(0, 10)\n            }\n        }\n\n        return {\n            ...stats,\n            userRole: \"Artist\",\n            canViewAll: false,\n            artistName: user.fullName\n        }\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1392, "column": 0}, "map": {"version":3,"sources":["file:///F:/studio.ankun/types/submission.ts"],"sourcesContent":["export type ArtistPrimaryRole =\r\n  | \"singer\"\r\n  | \"singer-songwriter\" \r\n  | \"rapper\"\r\n  | \"producer\"\r\n  | \"composer\"\r\n  | \"songwriter\"\r\n  | \"instrumental\"\r\n\r\nexport type AdditionalArtistRole =\r\n  | \"featuring\"\r\n  | \"vocalist\"\r\n  | \"rapper\"\r\n  | \"producer\"\r\n  | \"composer\"\r\n  | \"songwriter\"\r\n  | \"instrumental\"\r\n\r\n// ==================== PRISMA-COMPATIBLE ENUMS ====================\r\n// These match the Prisma schema exactly\r\n\r\nexport enum PrismaUserRole {\r\n  ARTIST = \"ARTIST\",\r\n  COMPOSER = \"COMPOSER\", \r\n  PRODUCER = \"PRODUCER\",\r\n  PERFORMER = \"PERFORMER\",\r\n  LABEL_MANAGER = \"LABEL_MANAGER\",\r\n  ADMINISTRATOR = \"ADMINISTRATOR\"\r\n}\r\n\r\nexport enum PrismaSubmissionStatus {\r\n  PENDING = \"PENDING\",\r\n  APPROVED = \"APPROVED\", \r\n  REJECTED = \"REJECTED\",\r\n  PROCESSING = \"PROCESSING\",\r\n  PUBLISHED = \"PUBLISHED\",\r\n  CANCELLED = \"CANCELLED\",\r\n  DRAFT = \"DRAFT\"\r\n}\r\n\r\nexport enum PrismaReleaseType {\r\n  SINGLE = \"SINGLE\",\r\n  EP = \"EP\",\r\n  ALBUM = \"ALBUM\", \r\n  COMPILATION = \"COMPILATION\"\r\n}\r\n\r\nexport enum PrismaContributorRole {\r\n  COMPOSER = \"COMPOSER\",\r\n  LYRICIST = \"LYRICIST\",\r\n  PRODUCER = \"PRODUCER\",\r\n  PERFORMER = \"PERFORMER\",\r\n  VOCALIST = \"VOCALIST\",\r\n  RAPPER = \"RAPPER\"\r\n}\r\n\r\nexport enum PrismaApprovalType {\r\n  DSP = \"DSP\",\r\n  CONTENT_ID = \"CONTENT_ID\",\r\n  ACR_CLOUD = \"ACR_CLOUD\",\r\n  LABEL_REVIEW = \"LABEL_REVIEW\"\r\n}\r\n\r\nexport enum PrismaFileCategory {\r\n  AUDIO = \"AUDIO\",\r\n  VIDEO = \"VIDEO\",\r\n  IMAGE = \"IMAGE\",\r\n  DOCUMENT = \"DOCUMENT\",\r\n  OTHER = \"OTHER\"\r\n}\r\n\r\n// ==================== LEGACY TYPES (DEPRECATED) ====================\r\n// Keep for backward compatibility but mark as deprecated\r\n\r\n/** @deprecated Use PrismaReleaseType instead */\r\nexport type ReleaseType = \"single\" | \"ep\" | \"lp\" | \"album\" | \"compilation\"\r\n\r\n/** @deprecated Use appropriate category system instead */\r\nexport type MainCategory = \"pop\" | \"singer-songwriter\" | \"hiphoprap\" | \"edm\" | \"rnb\" | \"ballad\" | \"acoustic\" | \"indie\" | \"other_main\"\r\n/** @deprecated Use appropriate category system instead */\r\nexport type SubCategory = \"official\" | \"cover\" | \"vpop\" | \"lofi\" | \"chill\" | \"trap\" | \"house\" | \"alternative\" | \"folk\" | \"other_sub\"\r\n\r\n/** @deprecated Use boolean fields instead */\r\nexport type CopyrightOwnershipStatus = \"yes\" | \"no\"\r\n/** @deprecated Use boolean fields instead */\r\nexport type ReleaseHistoryStatus = \"yes\" | \"no\"\r\n/** @deprecated Use boolean fields instead */\r\nexport type LyricsStatus = \"yes\" | \"no\"\r\n\r\n/** @deprecated Use platform-specific fields instead */\r\nexport type Platform = \"youtube\" | \"spotify\" | \"apple_music\" | \"soundcloud\" | \"other_platform\"\r\n\r\n/** @deprecated Use PrismaSubmissionStatus instead */\r\nexport type SubmissionStatus =\r\n  | \"pending\"\r\n  | \"approved\"\r\n  | \"rejected\"\r\n  | \"processing\"\r\n  | \"published\"\r\n  | \"cancelled\"\r\n  | \"draft\"\r\n  | \"Đã nhận, đang chờ duyệt\"\r\n  | \"Đã duyệt, từ chối phát hành\"\r\n  | \"Đã duyệt, đang chờ phát hành!\"\r\n  | \"Đã phát hành, đang chờ ra mắt\"\r\n  | \"Hoàn thành phát hành!\"\r\n  | \"Đã hủy\"\r\n  | \"Bản nháp\"\r\n\r\n// ==================== PRISMA-COMPATIBLE INTERFACES ====================\r\n// These match the Prisma schema exactly\r\n\r\nexport interface PrismaUser {\r\n  id: string\r\n  email: string\r\n  name: string | null\r\n  password: string\r\n  roles: PrismaUserRole[]\r\n  createdAt: Date\r\n  updatedAt: Date\r\n  labelId: string | null\r\n}\r\n\r\nexport interface PrismaProfile {\r\n  id: string\r\n  bio: string | null\r\n  avatarUrl: string | null\r\n  phone: string | null\r\n  artistName: string | null\r\n  fullName: string | null\r\n  facebookUrl: string | null\r\n  instagramUrl: string | null\r\n  youtubeUrl: string | null\r\n  spotifyUrl: string | null\r\n  appleMusicUrl: string | null\r\n  soundcloudUrl: string | null\r\n  userId: string\r\n  socialLinks: Record<string, unknown> | null\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface PrismaLabel {\r\n  id: string\r\n  name: string\r\n  ownerId: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface PrismaSubmission {\r\n  id: string\r\n  title: string\r\n  artist: string\r\n  upc: string | null\r\n  type: PrismaReleaseType\r\n  coverImagePath: string\r\n  releaseDate: Date\r\n  status: PrismaSubmissionStatus\r\n  metadataLocked: boolean\r\n  published: boolean\r\n  albumName: string | null\r\n  mainCategory: string | null\r\n  subCategory: string | null\r\n  platforms: Record<string, unknown> | null\r\n  distributionLink: string | null\r\n  distributionPlatforms: Record<string, unknown> | null\r\n  statusVietnamese: string | null\r\n  rejectionReason: string | null\r\n  notes: string | null\r\n  userId: string\r\n  labelId: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface PrismaTrack {\r\n  id: string\r\n  title: string\r\n  artist: string\r\n  filePath: string\r\n  duration: number\r\n  isrc: string | null\r\n  fileName: string | null\r\n  artistFullName: string | null\r\n  fileSize: number | null\r\n  format: string | null\r\n  bitrate: string | null\r\n  sampleRate: string | null\r\n  submissionId: string\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface PrismaVideo {\r\n  id: string\r\n  title: string\r\n  artist: string\r\n  youtubeVideoId: string | null\r\n  youtubeUrl: string | null\r\n  thumbnailUrl: string | null\r\n  duration: number | null\r\n  description: string | null\r\n  tags: string | null\r\n  category: string | null\r\n  language: string | null\r\n  contentIdEnabled: boolean\r\n  contentIdStatus: string | null\r\n  userId: string\r\n  labelId: string\r\n  submissionId: string | null\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface PrismaSubmissionContributor {\r\n  id: string\r\n  role: string\r\n  percentage: number | null\r\n  userId: string\r\n  submissionId: string\r\n  createdAt: Date\r\n}\r\n\r\nexport interface PrismaTrackContributor {\r\n  id: string\r\n  role: PrismaContributorRole\r\n  percentage: number | null\r\n  userId: string\r\n  trackId: string\r\n  createdAt: Date\r\n}\r\n\r\nexport interface PrismaVideoContributor {\r\n  id: string\r\n  role: string\r\n  percentage: number | null\r\n  userId: string\r\n  videoId: string\r\n  createdAt: Date\r\n}\r\n\r\nexport interface PrismaSubmissionApproval {\r\n  id: string\r\n  type: PrismaApprovalType\r\n  isApproved: boolean\r\n  reason: string | null\r\n  submissionId: string\r\n  approverId: string\r\n  createdAt: Date\r\n}\r\n\r\nexport interface PrismaSubmissionComment {\r\n  id: string\r\n  content: string\r\n  userId: string\r\n  submissionId: string\r\n  createdAt: Date\r\n}\r\n\r\nexport interface PrismaFile {\r\n  id: string\r\n  name: string\r\n  path: string\r\n  mimetype: string\r\n  size: number\r\n  category: PrismaFileCategory\r\n  folderId: string | null\r\n  userId: string | null\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\nexport interface PrismaFileFolder {\r\n  id: string\r\n  name: string\r\n  path: string\r\n  parentId: string | null\r\n  ownerId: string | null\r\n  isPublic: boolean\r\n  createdAt: Date\r\n  updatedAt: Date\r\n}\r\n\r\n// ==================== LEGACY INTERFACES (DEPRECATED) ====================\r\n// Keep for backward compatibility but mark as deprecated\r\n\r\n/** @deprecated Use PrismaTrack instead */\r\nexport interface TrackInfo {\r\n  id?: string\r\n  fileName: string\r\n  songTitle: string\r\n  artistName: string\r\n  artistFullName: string\r\n  additionalArtists: AdditionalArtist[]\r\n  isrc: string\r\n  duration?: number\r\n  fileSize?: number\r\n  format?: string\r\n  bitrate?: string\r\n  sampleRate?: string\r\n  filePath?: string\r\n}\r\n\r\nexport interface AdditionalArtist {\r\n  name: string\r\n  fullName?: string\r\n  role: AdditionalArtistRole\r\n  percentage: number\r\n}\r\n\r\nexport interface TextStyle {\r\n  gradient: string\r\n  animation: string\r\n  font: string\r\n}\r\n\r\n/** @deprecated Use PrismaSubmission with related PrismaTrack[] instead */\r\nexport interface Submission {\r\n  id: string\r\n  isrc: string\r\n  upc?: string\r\n  uploaderUsername: string\r\n  artistName: string\r\n  songTitle: string\r\n  albumName?: string\r\n  userEmail: string\r\n  imageFile: string\r\n  imageUrl: string\r\n  audioUrl?: string\r\n  audioUrls?: string[]\r\n  videoUrl?: string\r\n  videoFile?: string\r\n  audioFilesCount: number\r\n  submissionDate: string\r\n  status: SubmissionStatus\r\n  mainCategory: MainCategory\r\n  subCategory?: SubCategory\r\n  releaseType: ReleaseType\r\n  isCopyrightOwner: CopyrightOwnershipStatus\r\n  hasBeenReleased: ReleaseHistoryStatus\r\n  platforms: Platform[]\r\n  hasLyrics: LyricsStatus\r\n  lyrics?: string\r\n  notes?: string\r\n  fullName: string\r\n  artistRole: ArtistPrimaryRole\r\n  additionalArtists: AdditionalArtist[]\r\n  trackInfos: TrackInfo[]\r\n  releaseDate: string\r\n  titleStyle?: TextStyle\r\n  albumStyle?: TextStyle\r\n  userId: string\r\n  distributionLink?: string\r\n  distributionPlatforms?: {\r\n    platform: string;\r\n    url: string;\r\n    logo: string;\r\n  }[]\r\n  \r\n  // Thêm các trường mới từ schema\r\n  title?: string\r\n  artist?: string\r\n  coverImagePath?: string\r\n  metadataLocked?: boolean\r\n  published?: boolean\r\n  statusVietnamese?: string\r\n  rejectionReason?: string\r\n  labelId?: string\r\n  videos?: VideoInfo[]\r\n  contributors?: ContributorInfo[]\r\n  createdAt?: string\r\n  updatedAt?: string\r\n}\r\n\r\n// Interface cho Video (CHỈ CẤP THÔNG TIN - theo MAU/)\r\nexport interface VideoInfo {\r\n  id?: string\r\n  title: string\r\n  artist: string\r\n  \r\n  // CHỈ CẤP THÔNG TIN VIDEO - KHÔNG CẦN FILE VIDEO\r\n  // Thông tin này dùng cho YouTube Content ID\r\n  youtubeVideoId?: string   // ID video trên YouTube\r\n  youtubeUrl?: string       // URL đầy đủ của video\r\n  thumbnailUrl?: string     // URL thumbnail từ YouTube\r\n  duration?: number         // Thời lượng (seconds)\r\n  \r\n  // Thông tin từ mẫu MAU/ để đăng ký Content ID\r\n  description?: string      // Mô tả video\r\n  tags?: string            // Tags, keywords\r\n  category?: string        // Thể loại video\r\n  language?: string        // Ngôn ngữ\r\n  \r\n  // Thông tin cho YouTube Content ID\r\n  contentIdEnabled?: boolean\r\n  contentIdStatus?: string  // Trạng thái đăng ký Content ID\r\n  \r\n  contributors?: VideoContributorInfo[]\r\n}\r\n\r\n// Thêm interface cho Contributors\r\nexport interface ContributorInfo {\r\n  id?: string\r\n  role: string\r\n  percentage?: number\r\n  userId: string\r\n  userName?: string\r\n  userEmail?: string\r\n}\r\n\r\nexport interface VideoContributorInfo {\r\n  id?: string\r\n  role: string\r\n  percentage?: number\r\n  userId: string\r\n  userName?: string\r\n  userEmail?: string\r\n}\r\n\r\n// Additional interfaces for authorization system\r\nexport interface SimpleSubmission {\r\n  id: string\r\n  track_title: string\r\n  artist_name: string\r\n  artist_id?: string\r\n  user_id?: string\r\n  status: SubmissionStatus\r\n  genre: string\r\n  submission_date: string\r\n  created_at?: string\r\n  updated_at?: string\r\n  cover_art_url?: string\r\n  artwork_path?: string\r\n  imageUrl?: string\r\n  audio_file_url?: string\r\n  file_path?: string\r\n  audioUrl?: string\r\n  release_date?: string\r\n  upc?: string\r\n  release_links?: string[]\r\n  comment?: string\r\n  rejection_reason?: string\r\n  isrc_code?: string\r\n  duration?: number\r\n  file_size?: number\r\n  language?: string\r\n  explicit_content?: boolean\r\n  mood_tags?: string[]\r\n  instruments?: string[]\r\n  bpm?: number\r\n  key_signature?: string\r\n  label?: string\r\n  copyright?: string\r\n  producer?: string\r\n  composer?: string\r\n  lyricist?: string\r\n}\r\n\r\nexport interface SubmissionStats {\r\n  total: number\r\n  pending: number\r\n  approved: number\r\n  rejected: number\r\n  published: number\r\n  cancelled: number\r\n  userRole: string\r\n  canViewAll: boolean\r\n  artistName?: string\r\n  totalArtists?: number\r\n  recentSubmissions?: SimpleSubmission[]\r\n}\r\n\r\n// Status color helper functions\r\nexport function getStatusColor(status: SubmissionStatus): string {\r\n  switch (status) {\r\n    case \"Đã nhận, đang chờ duyệt\":\r\n      return \"bg-yellow-600 text-yellow-100\";\r\n    case \"Đã duyệt, từ chối phát hành\":\r\n      return \"bg-red-600 text-red-100\";\r\n    case \"Đã duyệt, đang chờ phát hành!\":\r\n      return \"bg-blue-600 text-blue-100\";\r\n    case \"Đã phát hành, đang chờ ra mắt\":\r\n      return \"bg-purple-600 text-purple-100\";\r\n    case \"Hoàn thành phát hành!\":\r\n      return \"bg-green-600 text-green-100\";\r\n    case \"pending\":\r\n      return \"bg-yellow-600 text-yellow-100\";\r\n    case \"approved\":\r\n      return \"bg-blue-600 text-blue-100\";\r\n    case \"rejected\":\r\n      return \"bg-red-600 text-red-100\";\r\n    case \"processing\":\r\n      return \"bg-purple-600 text-purple-100\";\r\n    case \"published\":\r\n      return \"bg-green-600 text-green-100\";\r\n    case \"draft\":\r\n      return \"bg-gray-600 text-gray-100\";\r\n    default:\r\n      return \"bg-gray-600 text-gray-100\";\r\n  }\r\n}\r\n\r\n// Get a human-readable status text\r\nexport function getStatusText(status: SubmissionStatus): string {\r\n  switch (status) {\r\n    case \"pending\":\r\n      return \"Đã nhận, đang chờ duyệt\";\r\n    case \"approved\":\r\n      return \"Đã duyệt, đang chờ phát hành!\";\r\n    case \"rejected\":\r\n      return \"Đã duyệt, từ chối phát hành\";\r\n    case \"processing\":\r\n      return \"Đã phát hành, đang chờ ra mắt\";\r\n    case \"published\":\r\n      return \"Hoàn thành phát hành!\";\r\n    case \"cancelled\":\r\n      return \"Đã hủy\";\r\n    case \"draft\":\r\n      return \"Bản nháp\";\r\n    default:\r\n      return status;\r\n  }\r\n}\r\n\r\n// Thêm các interface cho File Explorer System\r\nexport interface FileInfo {\r\n  id: string\r\n  name: string\r\n  path: string\r\n  mimeType: string\r\n  size: number\r\n  category: FileCategory\r\n  folderId?: string\r\n  userId?: string\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\nexport interface FolderInfo {\r\n  id: string\r\n  name: string\r\n  path: string\r\n  parentId?: string\r\n  ownerId?: string\r\n  isPublic: boolean\r\n  files?: FileInfo[]\r\n  children?: FolderInfo[]\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\nexport type FileCategory = \"audio\" | \"video\" | \"image\" | \"document\" | \"other\"\r\n\r\n// Thêm interface cho Distribution Platforms\r\nexport interface DistributionPlatformInfo {\r\n  id: string\r\n  name: string\r\n  logoUrl?: string\r\n  apiEndpoint?: string\r\n  isActive: boolean\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\n// Helper function để convert Submission thành SimpleSubmission\r\nexport function toSimpleSubmission(submission: Submission): SimpleSubmission {\r\n  return {\r\n    id: submission.id,\r\n    track_title: submission.songTitle,\r\n    artist_name: submission.artistName,\r\n    artist_id: submission.userId,\r\n    user_id: submission.userId,\r\n    status: submission.status,\r\n    genre: submission.mainCategory,\r\n    submission_date: submission.submissionDate,\r\n    created_at: submission.createdAt,\r\n    updated_at: submission.updatedAt,\r\n    cover_art_url: submission.imageUrl,\r\n    artwork_path: submission.imageFile,\r\n    imageUrl: submission.imageUrl,\r\n    audio_file_url: submission.audioUrl,\r\n    file_path: submission.audioUrl,\r\n    audioUrl: submission.audioUrl,\r\n    release_date: submission.releaseDate,\r\n    upc: submission.upc,\r\n    rejection_reason: submission.rejectionReason,\r\n    isrc_code: submission.isrc\r\n  }\r\n}\r\n\r\n// Helper function để convert SimpleSubmission thành Submission (nếu cần)\r\nexport function fromSimpleSubmission(simple: SimpleSubmission, userId: string): Partial<Submission> {\r\n  return {\r\n    id: simple.id,\r\n    songTitle: simple.track_title,\r\n    artistName: simple.artist_name,\r\n    userId: userId,\r\n    status: simple.status,\r\n    mainCategory: simple.genre as MainCategory,\r\n    submissionDate: simple.submission_date,\r\n    createdAt: simple.created_at,\r\n    updatedAt: simple.updated_at,\r\n    imageUrl: simple.imageUrl || simple.cover_art_url || '',\r\n    imageFile: simple.artwork_path || '',\r\n    audioUrl: simple.audioUrl || simple.audio_file_url,\r\n    releaseDate: simple.release_date || '',\r\n    upc: simple.upc,\r\n    rejectionReason: simple.rejection_reason,\r\n    isrc: simple.isrc_code || ''\r\n  }\r\n}\r\n\r\n// ==================== PRISMA CONVERSION UTILITIES ====================\r\n// Functions to convert between legacy flat structure and new relational structure\r\n\r\n/**\r\n * Convert legacy Submission with trackInfos array to Prisma relational structure\r\n */\r\nexport function convertLegacySubmissionToPrisma(\r\n  legacySubmission: Submission\r\n): { submission: Omit<PrismaSubmission, 'createdAt' | 'updatedAt'>, tracks: Omit<PrismaTrack, 'id' | 'createdAt' | 'updatedAt' | 'submissionId'>[] } {\r\n  // Convert legacy status to Prisma status\r\n  const statusMap: Record<string, PrismaSubmissionStatus> = {\r\n    'pending': PrismaSubmissionStatus.PENDING,\r\n    'approved': PrismaSubmissionStatus.APPROVED,\r\n    'rejected': PrismaSubmissionStatus.REJECTED,\r\n    'processing': PrismaSubmissionStatus.PROCESSING,\r\n    'published': PrismaSubmissionStatus.PUBLISHED,\r\n    'cancelled': PrismaSubmissionStatus.CANCELLED,\r\n    'draft': PrismaSubmissionStatus.DRAFT,\r\n    'Đã nhận, đang chờ duyệt': PrismaSubmissionStatus.PENDING,\r\n    'Đã duyệt, từ chối phát hành': PrismaSubmissionStatus.REJECTED,\r\n    'Đã duyệt, đang chờ phát hành!': PrismaSubmissionStatus.APPROVED,\r\n    'Đã phát hành, đang chờ ra mắt': PrismaSubmissionStatus.PROCESSING,\r\n    'Hoàn thành phát hành!': PrismaSubmissionStatus.PUBLISHED,\r\n    'Đã hủy': PrismaSubmissionStatus.CANCELLED,\r\n    'Bản nháp': PrismaSubmissionStatus.DRAFT\r\n  };\r\n\r\n  // Convert legacy release type to Prisma release type\r\n  const releaseTypeMap: Record<string, PrismaReleaseType> = {\r\n    'single': PrismaReleaseType.SINGLE,\r\n    'ep': PrismaReleaseType.EP,\r\n    'lp': PrismaReleaseType.ALBUM,\r\n    'album': PrismaReleaseType.ALBUM,\r\n    'compilation': PrismaReleaseType.COMPILATION\r\n  };\r\n\r\n  const prismaSubmission: Omit<PrismaSubmission, 'createdAt' | 'updatedAt'> = {\r\n    id: legacySubmission.id,\r\n    title: legacySubmission.songTitle,\r\n    artist: legacySubmission.artistName,\r\n    upc: legacySubmission.upc || null,\r\n    type: releaseTypeMap[legacySubmission.releaseType] || PrismaReleaseType.SINGLE,\r\n    coverImagePath: legacySubmission.imageFile || legacySubmission.imageUrl,\r\n    releaseDate: new Date(legacySubmission.releaseDate),\r\n    status: statusMap[legacySubmission.status] || PrismaSubmissionStatus.PENDING,\r\n    metadataLocked: legacySubmission.metadataLocked || false,\r\n    published: legacySubmission.published || false,\r\n    albumName: legacySubmission.albumName || null,\r\n    mainCategory: legacySubmission.mainCategory || null,\r\n    subCategory: legacySubmission.subCategory || null,\r\n    platforms: legacySubmission.platforms ? { platforms: legacySubmission.platforms } : null,\r\n    distributionLink: legacySubmission.distributionLink || null,\r\n    distributionPlatforms: legacySubmission.distributionPlatforms ? { platforms: legacySubmission.distributionPlatforms } : null,\r\n    statusVietnamese: legacySubmission.statusVietnamese || null,\r\n    rejectionReason: legacySubmission.rejectionReason || null,\r\n    notes: legacySubmission.notes || null,\r\n    userId: legacySubmission.userId,\r\n    labelId: legacySubmission.labelId || '' // This should be provided by the caller\r\n  };\r\n\r\n  const prismaTracks: Omit<PrismaTrack, 'id' | 'createdAt' | 'updatedAt' | 'submissionId'>[] = \r\n    legacySubmission.trackInfos?.map(trackInfo => ({\r\n      title: trackInfo.songTitle,\r\n      artist: trackInfo.artistName,\r\n      filePath: trackInfo.filePath || '',\r\n      duration: trackInfo.duration || 0,\r\n      isrc: trackInfo.isrc || null,\r\n      fileName: trackInfo.fileName || null,\r\n      artistFullName: trackInfo.artistFullName || null,\r\n      fileSize: trackInfo.fileSize || null,\r\n      format: trackInfo.format || null,\r\n      bitrate: trackInfo.bitrate || null,\r\n      sampleRate: trackInfo.sampleRate || null\r\n    })) || [];\r\n\r\n  return { submission: prismaSubmission, tracks: prismaTracks };\r\n}\r\n\r\n/**\r\n * Convert Prisma relational structure back to legacy flat structure for backward compatibility\r\n */\r\nexport function convertPrismaSubmissionToLegacy(\r\n  prismaSubmission: PrismaSubmission,\r\n  prismaTracks: PrismaTrack[]\r\n): Submission {\r\n  // Convert Prisma status back to legacy status\r\n  const statusMap: Record<PrismaSubmissionStatus, SubmissionStatus> = {\r\n    [PrismaSubmissionStatus.PENDING]: 'Đã nhận, đang chờ duyệt',\r\n    [PrismaSubmissionStatus.APPROVED]: 'Đã duyệt, đang chờ phát hành!',\r\n    [PrismaSubmissionStatus.REJECTED]: 'Đã duyệt, từ chối phát hành',\r\n    [PrismaSubmissionStatus.PROCESSING]: 'Đã phát hành, đang chờ ra mắt',\r\n    [PrismaSubmissionStatus.PUBLISHED]: 'Hoàn thành phát hành!',\r\n    [PrismaSubmissionStatus.CANCELLED]: 'Đã hủy',\r\n    [PrismaSubmissionStatus.DRAFT]: 'Bản nháp'\r\n  };\r\n\r\n  // Convert Prisma release type back to legacy release type\r\n  const releaseTypeMap: Record<PrismaReleaseType, ReleaseType> = {\r\n    [PrismaReleaseType.SINGLE]: 'single',\r\n    [PrismaReleaseType.EP]: 'ep',\r\n    [PrismaReleaseType.ALBUM]: 'album',\r\n    [PrismaReleaseType.COMPILATION]: 'compilation'\r\n  };\r\n\r\n  const trackInfos: TrackInfo[] = prismaTracks.map(track => ({\r\n    id: track.id,\r\n    fileName: track.fileName || '',\r\n    songTitle: track.title,\r\n    artistName: track.artist,\r\n    artistFullName: track.artistFullName || '',\r\n    additionalArtists: [], // This would need to be populated from contributors\r\n    isrc: track.isrc || '',\r\n    duration: track.duration,\r\n    fileSize: track.fileSize || undefined,\r\n    format: track.format || undefined,\r\n    bitrate: track.bitrate || undefined,\r\n    sampleRate: track.sampleRate || undefined,\r\n    filePath: track.filePath\r\n  }));\r\n\r\n  const legacySubmission: Submission = {\r\n    id: prismaSubmission.id,\r\n    isrc: prismaTracks[0]?.isrc || '',\r\n    upc: prismaSubmission.upc || undefined,\r\n    uploaderUsername: '', // This would need to be populated from user data\r\n    artistName: prismaSubmission.artist,\r\n    songTitle: prismaSubmission.title,\r\n    albumName: prismaSubmission.albumName || undefined,\r\n    userEmail: '', // This would need to be populated from user data\r\n    imageFile: prismaSubmission.coverImagePath,\r\n    imageUrl: prismaSubmission.coverImagePath,\r\n    audioUrl: prismaTracks[0]?.filePath || undefined,\r\n    audioUrls: prismaTracks.map(track => track.filePath),\r\n    videoUrl: undefined,\r\n    videoFile: undefined,\r\n    audioFilesCount: prismaTracks.length,\r\n    submissionDate: prismaSubmission.createdAt.toISOString(),\r\n    status: statusMap[prismaSubmission.status],\r\n    mainCategory: (prismaSubmission.mainCategory as MainCategory) || 'other_main',\r\n    subCategory: (prismaSubmission.subCategory as SubCategory) || undefined,\r\n    releaseType: releaseTypeMap[prismaSubmission.type],\r\n    isCopyrightOwner: 'yes', // Default value, should be determined from business logic\r\n    hasBeenReleased: 'no', // Default value, should be determined from business logic\r\n    platforms: [], // This would need to be extracted from platforms JSON\r\n    hasLyrics: 'no', // Default value, should be determined from business logic\r\n    lyrics: undefined,\r\n    notes: prismaSubmission.notes || undefined,\r\n    fullName: '', // This would need to be populated from user data\r\n    artistRole: 'singer', // Default value, should be determined from business logic\r\n    additionalArtists: [], // This would need to be populated from contributors\r\n    trackInfos: trackInfos,\r\n    releaseDate: prismaSubmission.releaseDate.toISOString(),\r\n    titleStyle: undefined,\r\n    albumStyle: undefined,\r\n    userId: prismaSubmission.userId,\r\n    distributionLink: prismaSubmission.distributionLink || undefined,\r\n    distributionPlatforms: prismaSubmission.distributionPlatforms ? \r\n      (prismaSubmission.distributionPlatforms as { platforms?: { platform: string; url: string; logo: string; }[] }).platforms : \r\n      undefined,\r\n    title: prismaSubmission.title,\r\n    artist: prismaSubmission.artist,\r\n    coverImagePath: prismaSubmission.coverImagePath,\r\n    metadataLocked: prismaSubmission.metadataLocked,\r\n    published: prismaSubmission.published,\r\n    statusVietnamese: prismaSubmission.statusVietnamese || undefined,\r\n    rejectionReason: prismaSubmission.rejectionReason || undefined,\r\n    labelId: prismaSubmission.labelId,\r\n    videos: [], // This would need to be populated from related videos\r\n    contributors: [], // This would need to be populated from related contributors\r\n    createdAt: prismaSubmission.createdAt.toISOString(),\r\n    updatedAt: prismaSubmission.updatedAt.toISOString()\r\n  };\r\n\r\n  return legacySubmission;\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1708, "column": 0}, "map": {"version":3,"sources":["file:///F:/studio.ankun/hooks/use-user.ts"],"sourcesContent":["// Active: 1750877192019@@ep-mute - rice - a17ojtca - pooler.ap - southeast - 1.aws.neon.tech@5432@aksstudio\n// Tôi là An Kun\n// Hỗ trợ dự án, Copilot, Gemini\n// Tác giả kiêm xuất bản bởi An Kun Studio Digital Music\n\n\"use client\"\n\nimport { useContext, createContext } from \"react\"\nimport type { User } from \"@/types/user\"\n\n// Import từ AuthProvider để tránh circular dependency\ninterface AuthContextType {\n    user: User | null\n    login: (username: string, password: string) => Promise<boolean>\n    logout: () => void\n    loading: boolean\n}\n\n// Tạm thời tạo context riêng cho authorization\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined)\n\nexport interface UseUserReturn {\n    user: User | null\n    isAuthenticated: boolean\n    isLoading: boolean\n    login: (username: string, password: string) => Promise<boolean>\n    logout: () => void\n}\n\nexport function useUser(): UseUserReturn {\n    const context = useContext(AuthContext)\n\n    if (!context) {\n        // Fallback nếu không có AuthProvider\n        return {\n            user: null,\n            isAuthenticated: false,\n            isLoading: false,\n            login: async () => false,\n            logout: () => { }\n        }\n    }\n\n    return {\n        user: context.user,\n        isAuthenticated: !!context.user,\n        isLoading: context.loading,\n        login: context.login,\n        logout: context.logout\n    }\n}\n"],"names":[],"mappings":"AAAA,4GAA4G;AAC5G,gBAAgB;AAChB,gCAAgC;AAChC,wDAAwD;;;;;AAIxD;AAFA;;AAcO,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAU/D,SAAS;IACZ,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,CAAC,SAAS;QACV,qCAAqC;QACrC,OAAO;YACH,MAAM;YACN,iBAAiB;YACjB,WAAW;YACX,OAAO,UAAY;YACnB,QAAQ,KAAQ;QACpB;IACJ;IAEA,OAAO;QACH,MAAM,QAAQ,IAAI;QAClB,iBAAiB,CAAC,CAAC,QAAQ,IAAI;QAC/B,WAAW,QAAQ,OAAO;QAC1B,OAAO,QAAQ,KAAK;QACpB,QAAQ,QAAQ,MAAM;IAC1B;AACJ","debugId":null}},
    {"offset": {"line": 1744, "column": 0}, "map": {"version":3,"sources":["file:///F:/studio.ankun/app/page.tsx"],"sourcesContent":["// Tôi là An Kun\n// Tác giả kiêm xuất bản bởi An Kun Studio Digital Music\n\n\"use client\"\nimport MainAppView from \"@/components/main-app-view\"\nimport FallbackView from \"@/components/fallback-view\"\nimport { AuthProvider } from \"@/components/auth-provider\"\nimport { useEffect, useState } from \"react\"\nimport React from \"react\"\n\nexport default function HomePage() {\n  const [hasFailed, setHasFailed] = useState(false);\n\n  // Debug code - check localStorage and display any errors\n  useEffect(() => {\n    try {\n      // Check if localStorage is corrupted\n      const storedUser = localStorage.getItem('currentUser')\n      console.log(\"🔍 DEBUG - Stored user:\", storedUser)\n\n      if (storedUser) {\n        try {\n          // Try to parse the JSON\n          const userData = JSON.parse(storedUser)\n          console.log(\"✅ DEBUG - User data parsed successfully:\", userData)\n        } catch (parseError) {\n          console.error(\"❌ DEBUG - Error parsing stored user:\", parseError)\n          // Clear the corrupted data\n          localStorage.removeItem('currentUser')\n          console.log(\"🧹 DEBUG - Cleared corrupted localStorage\")\n          // Set failure state to use fallback\n          setHasFailed(true);\n        }\n      } else {\n        console.log(\"ℹ️ DEBUG - No user data in localStorage\")\n      }\n    } catch (error) {\n      console.error(\"❌ DEBUG - Error accessing localStorage:\", error)\n      setHasFailed(true);\n    }\n  }, [])\n\n  // Check if the page is running in a minimal mode for debugging\n  const urlParams = new URLSearchParams(\n    typeof window !== 'undefined' ? window.location.search : ''\n  );\n  const fallbackMode = urlParams.get('mode') === 'fallback';\n\n  // Use fallback view if debugging or if an error occurred\n  if (fallbackMode || hasFailed) {\n    return <FallbackView />;\n  }\n\n  // Otherwise use normal view with error boundary\n  return (\n    <ErrorBoundary fallback={<FallbackView />}>\n      <AuthProvider>\n        <MainAppView />\n      </AuthProvider>\n    </ErrorBoundary>\n  );\n}\n\n// Simple error boundary component\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback: React.ReactNode },\n  { hasError: boolean }\n> {\n  constructor(props: { children: React.ReactNode; fallback: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    // Update state so the next render will show the fallback UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Log the error to console\n    console.error(\"❌ ERROR BOUNDARY CAUGHT ERROR:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.fallback;\n    }\n\n    return this.props.children;\n  }\n}\n"],"names":[],"mappings":"AAAA,gBAAgB;AAChB,wDAAwD;;;;;AAGxD;AACA;AACA;AACA;AAJA;;;;;;;AAOe,SAAS;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,yDAAyD;IACzD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI;YACF,qCAAqC;YACrC,MAAM,aAAa,aAAa,OAAO,CAAC;YACxC,QAAQ,GAAG,CAAC,2BAA2B;YAEvC,IAAI,YAAY;gBACd,IAAI;oBACF,wBAAwB;oBACxB,MAAM,WAAW,KAAK,KAAK,CAAC;oBAC5B,QAAQ,GAAG,CAAC,4CAA4C;gBAC1D,EAAE,OAAO,YAAY;oBACnB,QAAQ,KAAK,CAAC,wCAAwC;oBACtD,2BAA2B;oBAC3B,aAAa,UAAU,CAAC;oBACxB,QAAQ,GAAG,CAAC;oBACZ,oCAAoC;oBACpC,aAAa;gBACf;YACF,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2CAA2C;YACzD,aAAa;QACf;IACF,GAAG,EAAE;IAEL,+DAA+D;IAC/D,MAAM,YAAY,IAAI,gBACpB,sCAAgC,0BAAyB;IAE3D,MAAM,eAAe,UAAU,GAAG,CAAC,YAAY;IAE/C,yDAAyD;IACzD,IAAI,gBAAgB,WAAW;QAC7B,qBAAO,8OAAC,+HAAA,CAAA,UAAY;;;;;IACtB;IAEA,gDAAgD;IAChD,qBACE,8OAAC;QAAc,wBAAU,8OAAC,+HAAA,CAAA,UAAY;;;;;kBACpC,cAAA,8OAAC,+HAAA,CAAA,eAAY;sBACX,cAAA,8OAAC,kIAAA,CAAA,UAAW;;;;;;;;;;;;;;;AAIpB;AAEA,kCAAkC;AAClC,MAAM,sBAAsB,qMAAA,CAAA,UAAK,CAAC,SAAS;IAIzC,YAAY,KAA+D,CAAE;QAC3E,KAAK,CAAC;QACN,IAAI,CAAC,KAAK,GAAG;YAAE,UAAU;QAAM;IACjC;IAEA,OAAO,2BAA2B;QAChC,4DAA4D;QAC5D,OAAO;YAAE,UAAU;QAAK;IAC1B;IAEA,kBAAkB,KAAY,EAAE,SAA0B,EAAE;QAC1D,2BAA2B;QAC3B,QAAQ,KAAK,CAAC,kCAAkC,OAAO;IACzD;IAEA,SAAS;QACP,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACvB,wCAAwC;YACxC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;QAC5B;QAEA,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;IAC5B;AACF","debugId":null}}]
}