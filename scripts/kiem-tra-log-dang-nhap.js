// @ts-check
/**
 * Script ƒë·ªÉ ki·ªÉm tra xem activity log cho login ƒë√£ ƒë∆∞·ª£c ghi l·∫°i ƒë√∫ng c√°ch
 */

import { neon } from "@neondatabase/serverless";
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

async function logToFile(message) {
    try {
        const logDir = path.join(process.cwd(), "logs");
        await fs.mkdir(logDir, { recursive: true });
        const logFile = path.join(logDir, "kiem-tra-log-dang-nhap.log");
        const timestamp = new Date().toISOString();
        await fs.appendFile(logFile, `[${timestamp}] ${message}\n`);
    } catch (e) {
        console.error("Failed to write to log file:", e);
    }
}

async function connectToDatabase() {
    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        throw new Error('DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
    }
    return neon(DATABASE_URL);
}

async function getLoginLogs() {
    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        throw new Error('DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
    }
    const sql = neon(DATABASE_URL);

    return await sql`
        SELECT * FROM nhat_ky_studio
        WHERE action = 'login' OR action = 'registration' OR action = 'ui_interaction'
        ORDER BY created_at DESC
        LIMIT 20
    `;
}

async function main() {
    try {
        console.log('üîç Ki·ªÉm tra log ho·∫°t ƒë·ªông ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω');
        console.log('='.repeat(60));

        await logToFile('B·∫Øt ƒë·∫ßu ki·ªÉm tra log ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω');

        // K·∫øt n·ªëi ƒë·∫øn database
        console.log('=== 1. K·∫øt n·ªëi ƒë·∫øn database ===');
        if (!process.env.DATABASE_URL) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y DATABASE_URL trong .env.local');
            return;
        }
        console.log('Database URL t√¨m th·∫•y, ƒëang k·∫øt n·ªëi...');

        // L·∫•y log ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω
        console.log('=== 2. L·∫•y log ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω ===');
        const logs = await getLoginLogs();

        if (logs && logs.length > 0) {
            console.log(`‚úÖ T√¨m th·∫•y ${logs.length} log li√™n quan ƒë·∫øn ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω`);

            // Ph√¢n lo·∫°i logs
            const loginLogs = logs.filter(log => log.action === 'login');
            const registrationLogs = logs.filter(log => log.action === 'registration');
            const uiLogs = logs.filter(log => log.action === 'ui_interaction');

            console.log(`\n=== Log ƒëƒÉng nh·∫≠p (${loginLogs.length}) ===`);
            if (loginLogs.length > 0) {
                loginLogs.forEach((log, index) => {
                    console.log(`\nLog #${index + 1}:`);
                    console.log(`- Username: ${log.username || 'N/A'}`);
                    console.log(`- Th·ªùi gian: ${new Date(log.created_at).toLocaleString()}`);
                    console.log(`- Tr·∫°ng th√°i: ${log.status || 'N/A'}`);
                    console.log(`- Component: ${log.component_name || 'N/A'}`);
                    if (log.details) {
                        console.log(`- Chi ti·∫øt: ${JSON.stringify(log.details, null, 2)}`);
                    }
                });
            } else {
                console.log('Kh√¥ng c√≥ log ƒëƒÉng nh·∫≠p');
            }

            console.log(`\n=== Log ƒëƒÉng k√Ω (${registrationLogs.length}) ===`);
            if (registrationLogs.length > 0) {
                registrationLogs.forEach((log, index) => {
                    console.log(`\nLog #${index + 1}:`);
                    console.log(`- Username: ${log.username || 'N/A'}`);
                    console.log(`- Th·ªùi gian: ${new Date(log.created_at).toLocaleString()}`);
                    console.log(`- Tr·∫°ng th√°i: ${log.status || 'N/A'}`);
                    console.log(`- Component: ${log.component_name || 'N/A'}`);
                    if (log.details) {
                        console.log(`- Chi ti·∫øt: ${JSON.stringify(log.details, null, 2)}`);
                    }
                });
            } else {
                console.log('Kh√¥ng c√≥ log ƒëƒÉng k√Ω');
            }

            console.log(`\n=== Log t∆∞∆°ng t√°c UI (${uiLogs.length}) ===`);
            if (uiLogs.length > 0) {
                const uiCategories = {};
                uiLogs.forEach(log => {
                    const category = log.category || 'unknown';
                    uiCategories[category] = (uiCategories[category] || 0) + 1;
                });

                console.log('Th·ªëng k√™ theo danh m·ª•c UI:');
                Object.entries(uiCategories).forEach(([category, count]) => {
                    console.log(`- ${category}: ${count} log`);
                });

                // Hi·ªÉn th·ªã 5 log g·∫ßn nh·∫•t
                console.log('\n5 log t∆∞∆°ng t√°c UI g·∫ßn nh·∫•t:');
                uiLogs.slice(0, 5).forEach((log, index) => {
                    console.log(`\nLog #${index + 1}:`);
                    console.log(`- Th·ªùi gian: ${new Date(log.created_at).toLocaleString()}`);
                    console.log(`- Danh m·ª•c: ${log.category || 'N/A'}`);
                    console.log(`- Component: ${log.component_name || 'N/A'}`);
                    if (log.details) {
                        console.log(`- Chi ti·∫øt: ${JSON.stringify(log.details, null, 2)}`);
                    }
                });
            } else {
                console.log('Kh√¥ng c√≥ log t∆∞∆°ng t√°c UI');
            }
        } else {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y log ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω');
        }

        console.log('\n=== 3. T·ªïng k·∫øt ===');
        console.log('‚úÖ Ki·ªÉm tra log ƒëƒÉng nh·∫≠p/ƒëƒÉng k√Ω ho√†n t·∫•t');

    } catch (error) {
        console.error('L·ªói:', error.message);
        await logToFile(`L·ªói: ${error.message}`);
    }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(console.error);
}

export { getLoginLogs };
