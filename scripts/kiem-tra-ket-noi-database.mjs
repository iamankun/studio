// Database Connection Test - Multi-Database Service Architecture
/**
 * Script ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi database qua Multi-Database Service API
 * Ch·∫°y b·∫±ng l·ªánh: node scripts/kiem-tra-ket-noi-database.mjs
 */

import * as dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c cho dotenv
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config({ path: path.resolve(__dirname, '../.env.local') });

async function checkDatabaseStatusAPI(baseUrl) {
    console.log('\n3. Ki·ªÉm tra Database Status API');
    try {
        const statusResponse = await fetch(`${baseUrl}/api/database-status`);
        if (statusResponse.ok) {
            const statusData = await statusResponse.json();
            console.log('‚úÖ Database Status API ho·∫°t ƒë·ªông');
            console.log(`   Status: ${statusData.status || 'Unknown'}`);
            console.log(`   Provider: ${statusData.provider || 'Unknown'}`);
            console.log(`   Connection: ${statusData.connected ? 'Connected' : 'Disconnected'}`);
        } else {
            console.log('‚ö†Ô∏è Database Status API kh√¥ng kh·∫£ d·ª•ng');
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Database Status API kh√¥ng th·ªÉ truy c·∫≠p:', error.message);
    }
}

async function checkSubmissionsAPI(baseUrl) {
    console.log('\n4. Ki·ªÉm tra Submissions API (Database qua API)');
    try {
        const submissionsResponse = await fetch(`${baseUrl}/api/submissions`);
        if (submissionsResponse.ok) {
            const submissionsData = await submissionsResponse.json();
            console.log('‚úÖ Submissions API ho·∫°t ƒë·ªông');
            console.log(`   Success: ${submissionsData.success}`);
            console.log(`   Data count: ${submissionsData.data?.length || 0}`);
            if (submissionsData.data && submissionsData.data.length > 0) {
                console.log(`   Sample submission: "${submissionsData.data[0].title}" by ${submissionsData.data[0].artist}`);
            }
        } else {
            console.log('‚ùå Submissions API l·ªói:', submissionsResponse.status);
        }
    } catch (error) {
        console.log('‚ùå Submissions API kh√¥ng th·ªÉ truy c·∫≠p:', error.message);
    }
}

async function checkUsersAPI(baseUrl) {
    console.log('\n5. Ki·ªÉm tra Users API');
    try {
        const usersResponse = await fetch(`${baseUrl}/api/users`);
        if (usersResponse.ok) {
            const usersData = await usersResponse.json();
            console.log('‚úÖ Users API ho·∫°t ƒë·ªông');
            console.log(`   Success: ${usersData.success}`);
            console.log(`   Users count: ${usersData.data?.length || 0}`);
        } else {
            console.log('‚ùå Users API l·ªói:', usersResponse.status);
        }
    } catch (error) {
        console.log('‚ùå Users API kh√¥ng th·ªÉ truy c·∫≠p:', error.message);
    }
}

async function checkActivityLogAPI(baseUrl) {
    console.log('\n6. Ki·ªÉm tra Activity Log API');
    try {
        const logResponse = await fetch(`${baseUrl}/api/activity-log`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                action: 'database_connection_test',
                details: { timestamp: new Date().toISOString() }
            })
        });
        if (logResponse.ok) {
            const logData = await logResponse.json();
            console.log('‚úÖ Activity Log API ho·∫°t ƒë·ªông');
            console.log(`   Success: ${logData.success}`);
            console.log(`   Mode: ${logData.mode || 'database'}`);
        } else {
            console.log('‚ùå Activity Log API l·ªói:', logResponse.status);
        }
    } catch (error) {
        console.log('‚ùå Activity Log API kh√¥ng th·ªÉ truy c·∫≠p:', error.message);
    }
}

function printSystemArchitecture() {
    console.log('\n7. T√≥m t·∫Øt ki·∫øn tr√∫c h·ªá th·ªëng');
    console.log('üìã Ki·∫øn tr√∫c Multi-Database Service:');
    console.log('   Client ‚Üí API Routes ‚Üí Multi-Database Service ‚Üí Database');
    console.log('   - API Layer: X·ª≠ l√Ω authentication, validation, business logic');
    console.log('   - Multi-DB Service: H·ªó tr·ª£ nhi·ªÅu database providers');
    console.log('   - Database: PostgreSQL/MySQL qua DATABASE_URL');
    console.log('   - Fallback: LocalStorage cho offline mode');
}

function handleConnectionError(connectionError) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi t·ªïng th·ªÉ:', connectionError.message);
    if (connectionError.message.includes('ENOTFOUND')) {
        console.log('‚Üí Kh√¥ng t√¨m th·∫•y server. Ki·ªÉm tra l·∫°i NEXT_PUBLIC_API_URL');
    } else if (connectionError.message.includes('ECONNREFUSED')) {
        console.log('‚Üí Server t·ª´ ch·ªëi k·∫øt n·ªëi. Ki·ªÉm tra Next.js server ƒë√£ ch·∫°y ch∆∞a');
    } else if (connectionError.message.includes('fetch')) {
        console.log('‚Üí L·ªói fetch API. Ki·ªÉm tra server v√† network connection');
    }
    console.log('\nüîß Troubleshooting:');
    console.log('- Ch·∫°y Next.js server: npm run dev');
    console.log('- Ki·ªÉm tra DATABASE_URL trong .env.local');
    console.log('- Ki·ªÉm tra NEXT_PUBLIC_API_URL');
    console.log('- Ki·ªÉm tra Multi-Database Service configuration');
}

async function debugDatabaseConnection() {
    console.log('=== B·∫Øt ƒë·∫ßu ki·ªÉm tra Multi-Database Service ===');
    console.log('1. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng DATABASE_URL');

    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        console.error('‚ùå L·ªói: DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
        console.log('Vui l√≤ng ki·ªÉm tra file .env.local v√† ƒë·∫£m b·∫£o c√≥ bi·∫øn DATABASE_URL');
        return;
    }

    console.log('‚úÖ T√¨m th·∫•y DATABASE_URL');
    console.log(`DATABASE_URL b·∫Øt ƒë·∫ßu v·ªõi: ${DATABASE_URL.substring(0, 20)}...`);

    console.log('\n2. Ki·ªÉm tra API endpoints');

    const baseUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000';
    console.log(`üåê API Base URL: ${baseUrl}`);

    try {
        await checkDatabaseStatusAPI(baseUrl);
        await checkSubmissionsAPI(baseUrl);
        await checkUsersAPI(baseUrl);
        await checkActivityLogAPI(baseUrl);
        printSystemArchitecture();
    } catch (connectionError) {
        handleConnectionError(connectionError);
    }

    console.log('\n=== K·∫øt th√∫c ki·ªÉm tra ===');
}

// Ch·∫°y h√†m debug
debugDatabaseConnection()
    .then(async () => {
        console.log('\n‚úÖ Script ki·ªÉm tra ho√†n t·∫•t.');
        console.log('üí° L∆∞u √Ω: H·ªá th·ªëng s·ª≠ d·ª•ng Multi-Database Service API');
        console.log('   Kh√¥ng truy c·∫≠p tr·ª±c ti·∫øp database m√† qua API layer');
    })
    .catch(async (err) => {
        console.error('‚ùå Script g·∫∑p l·ªói kh√¥ng mong mu·ªën:', err.message);
        process.exit(1);
    });