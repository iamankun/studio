/**
 * Script ƒë·ªìng b·ªô ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng h·ªá th·ªëng
 * Ch·∫°y: node scripts/simple-sync-check.js
 */

import dotenv from 'dotenv';
import { neon } from "@neondatabase/serverless";
import chalk from 'chalk';

// Load environment variables
dotenv.config({ path: '.env.local' });

let DATABASE_URL = process.env.DATABASE_URL;
let ADMIN_USERNAME = process.env.ADMIN_USERNAME;

// Fallback values if env not loaded
if (!DATABASE_URL) {
    DATABASE_URL = 'postgresql://aksstudio_owner:npg_HzPUo8Xn1wfD@ep-mute-rice-a17ojtca-pooler.ap-southeast-1.aws.neon.tech/aksstudio?sslmode=require';
    ADMIN_USERNAME = 'ankunstudio';
    console.log('‚ö†Ô∏è S·ª≠ d·ª•ng database URL t·ª´ fallback');
}

async function simpleSyncCheck() {
    console.log(chalk.blue('üîÑ KI·ªÇM TRA ƒê·ªíNG B·ªò H·ªÜ TH·ªêNG'));
    console.log('='.repeat(50));

    // Debug environment variables
    console.log('üîç Debug env vars:');
    console.log('DATABASE_URL length:', DATABASE_URL ? DATABASE_URL.length : 0);
    console.log('ADMIN_USERNAME:', ADMIN_USERNAME);

    // 1. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    console.log(chalk.yellow('=== 1. Bi·∫øn M√¥i Tr∆∞·ªùng ==='));
    
    console.log('DATABASE_URL:', DATABASE_URL ? '‚úÖ C√≥' : '‚ùå Kh√¥ng c√≥');
    console.log('ADMIN_USERNAME:', ADMIN_USERNAME || 'Kh√¥ng c√≥');
    
    if (!DATABASE_URL) {
        console.log(chalk.red('‚ùå Thi·∫øu DATABASE_URL'));
        return;
    }

    // 2. Ki·ªÉm tra k·∫øt n·ªëi database
    console.log(chalk.yellow('\n=== 2. K·∫øt N·ªëi Database ==='));
    try {
        const sql = neon(DATABASE_URL);
        const result = await sql`SELECT NOW() as current_time`;
        console.log(chalk.green('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng'));
        console.log('Th·ªùi gian server:', result[0].current_time);
    } catch (error) {
        console.log(chalk.red('‚ùå L·ªói k·∫øt n·ªëi:'), error.message);
        return;
    }

    // 3. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
    console.log(chalk.yellow('\n=== 3. C·∫•u Tr√∫c B·∫£ng ==='));
    const sql = neon(DATABASE_URL);
    
    const requiredTables = [
        'users',
        'submissions',
        'label_templates',
        'label_manager',
        'label_assignments',
        'nhat_ky_studio'
    ];

    for (const tableName of requiredTables) {
        try {
            const result = await sql`
                SELECT COUNT(*) as count
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = ${tableName}
            `;

            if (result[0].count > 0) {
                const recordCount = await sql`
                    SELECT COUNT(*) as total FROM ${sql(tableName)}
                `;
                console.log(chalk.green(`‚úÖ ${tableName}: ${recordCount[0].total} records`));
            } else {
                console.log(chalk.red(`‚ùå ${tableName}: Kh√¥ng t·ªìn t·∫°i`));
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå ${tableName}: L·ªói - ${error.message}`));
        }
    }

    // 4. Ki·ªÉm tra t√†i kho·∫£n ankunstudio
    console.log(chalk.yellow('\n=== 4. T√†i Kho·∫£n ankunstudio ==='));
    try {
        const users = await sql`
            SELECT id, username, email, role, created_at
            FROM users 
            WHERE username = 'ankunstudio'
        `;

        if (users.length > 0) {
            const user = users[0];
            console.log(chalk.green('‚úÖ T√†i kho·∫£n ankunstudio t·ªìn t·∫°i:'));
            console.log(`   ID: ${user.id}`);
            console.log(`   Email: ${user.email}`);
            console.log(`   Role: ${user.role}`);
            console.log(`   Created: ${user.created_at}`);
        } else {
            console.log(chalk.red('‚ùå T√†i kho·∫£n ankunstudio kh√¥ng t·ªìn t·∫°i'));
        }
    } catch (error) {
        console.log(chalk.red('‚ùå L·ªói ki·ªÉm tra t√†i kho·∫£n:'), error.message);
    }

    // 5. Th·ªëng k√™ t·ªïng quan
    console.log(chalk.yellow('\n=== 5. Th·ªëng K√™ T·ªïng Quan ==='));
    try {
        const stats = await sql`
            SELECT 
                (SELECT COUNT(*) FROM users) as total_users,
                (SELECT COUNT(*) FROM submissions) as total_submissions,
                (SELECT COUNT(*) FROM label_templates) as total_templates,
                (SELECT COUNT(*) FROM label_manager) as total_label_managers,
                (SELECT COUNT(*) FROM label_assignments) as total_assignments,
                (SELECT COUNT(*) FROM nhat_ky_studio) as total_logs
        `;

        const stat = stats[0];
        console.log(chalk.cyan('üìä Th·ªëng k√™:'));
        console.log(`   Users: ${stat.total_users}`);
        console.log(`   Submissions: ${stat.total_submissions}`);
        console.log(`   Templates: ${stat.total_templates}`);
        console.log(`   Label Managers: ${stat.total_label_managers}`);
        console.log(`   Assignments: ${stat.total_assignments}`);
        console.log(`   Logs: ${stat.total_logs}`);
    } catch (error) {
        console.log(chalk.red('‚ùå L·ªói th·ªëng k√™:'), error.message);
    }

    // 6. Ki·ªÉm tra scripts c·∫ßn c·∫≠p nh·∫≠t
    console.log(chalk.yellow('\n=== 6. Scripts C·∫ßn C·∫≠p Nh·∫≠t ==='));
    console.log('C√°c script ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô v·ªõi t√†i kho·∫£n ankunstudio:');
    console.log('‚úÖ generateData.js - T·∫°o d·ªØ li·ªáu m·∫´u');
    console.log('‚úÖ kiem-tra-cau-truc-bang-label.js - Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng');
    console.log('‚ö†Ô∏è C√°c script kh√°c c√≥ th·ªÉ c·∫ßn c·∫≠p nh·∫≠t ƒë·ªÉ s·ª≠ d·ª•ng ankunstudio');

    console.log(chalk.green('\nüéâ Ki·ªÉm tra ho√†n t·∫•t!'));
}

simpleSyncCheck().catch(console.error);
