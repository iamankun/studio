// @ts-check
/**
 * Script ki·ªÉm tra chi ti·∫øt d·ªØ li·ªáu trong b·∫£ng nhat_ky_studio
 * Cung c·∫•p th·ªëng k√™ v√† ph√¢n t√≠ch v·ªÅ nh·∫≠t k√Ω ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
 */

import { neon } from "@neondatabase/serverless";
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

async function logToFile(message) {
    try {
        const logDir = path.join(process.cwd(), "logs");
        await fs.mkdir(logDir, { recursive: true });
        const logFile = path.join(logDir, "kiem-tra-chi-tiet-nhat-ky.log");
        const timestamp = new Date().toISOString();
        await fs.appendFile(logFile, `[${timestamp}] ${message}\n`);
    } catch (e) {
        console.error("Failed to write to log file:", e);
    }
}

async function connectToDatabase() {
    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        throw new Error('DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
    }
    return neon(DATABASE_URL);
}

async function kiemTraChiTietNhatKy() {
    console.log('üîç Ki·ªÉm tra chi ti·∫øt d·ªØ li·ªáu trong b·∫£ng nhat_ky_studio');
    console.log('='.repeat(70));
    await logToFile('B·∫Øt ƒë·∫ßu ki·ªÉm tra chi ti·∫øt nhat_ky_studio');

    try {
        // K·∫øt n·ªëi ƒë·∫øn database
        console.log('=== 1. K·∫øt n·ªëi ƒë·∫øn database ===');
        const sql = await connectToDatabase();
        await logToFile('K·∫øt n·ªëi database th√†nh c√¥ng');

        // Ki·ªÉm tra b·∫£ng t·ªìn t·∫°i
        console.log('\n=== 2. Ki·ªÉm tra b·∫£ng nhat_ky_studio ===');
        const existingTable = await sql`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'nhat_ky_studio'
        `;

        if (existingTable.length === 0) {
            console.error('‚ùå B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
            await logToFile('B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
            console.log('Vui l√≤ng ch·∫°y script tao-bang-nhat-ky.js tr∆∞·ªõc');
            return;
        }

        console.log('‚úÖ B·∫£ng nhat_ky_studio t·ªìn t·∫°i');

        // Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
        console.log('\n=== 3. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng ===');
        const columns = await sql`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns
            WHERE table_schema = 'public' AND table_name = 'nhat_ky_studio'
            ORDER BY ordinal_position
        `;

        console.log('C·∫•u tr√∫c b·∫£ng nhat_ky_studio:');
        columns.forEach(col => {
            console.log(`- ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
        console.log('\n=== 4. Th·ªëng k√™ s·ªë l∆∞·ª£ng b·∫£n ghi ===');
        const countResult = await sql`
            SELECT COUNT(*) as total FROM nhat_ky_studio
        `;

        const totalRecords = countResult[0].total;
        console.log(`‚úÖ T·ªïng s·ªë b·∫£n ghi: ${totalRecords}`);
        await logToFile(`T·ªïng s·ªë b·∫£n ghi: ${totalRecords}`);

        // Th·ªëng k√™ theo username
        console.log('\n=== 5. Th·ªëng k√™ theo username ===');
        const userStats = await sql`
            SELECT username, COUNT(*) as count
            FROM nhat_ky_studio
            GROUP BY username
            ORDER BY count DESC
            LIMIT 10
        `;

        console.log('Top 10 username c√≥ nhi·ªÅu ho·∫°t ƒë·ªông nh·∫•t:');
        userStats.forEach((stat, index) => {
            console.log(`${index + 1}. ${stat.username}: ${stat.count} ho·∫°t ƒë·ªông`);
        });

        // Th·ªëng k√™ theo lo·∫°i action
        console.log('\n=== 6. Th·ªëng k√™ theo action ===');
        const actionStats = await sql`
            SELECT action, COUNT(*) as count
            FROM nhat_ky_studio
            GROUP BY action
            ORDER BY count DESC
        `;

        console.log('Th·ªëng k√™ theo lo·∫°i action:');
        actionStats.forEach(stat => {
            console.log(`- ${stat.action}: ${stat.count} l·∫ßn`);
        });

        // Th·ªëng k√™ theo category
        console.log('\n=== 7. Th·ªëng k√™ theo category ===');
        const categoryStats = await sql`
            SELECT category, COUNT(*) as count
            FROM nhat_ky_studio
            GROUP BY category
            ORDER BY count DESC
        `;

        console.log('Th·ªëng k√™ theo category:');
        categoryStats.forEach(stat => {
            console.log(`- ${stat.category}: ${stat.count} l·∫ßn`);
        });

        // Th·ªëng k√™ theo status
        console.log('\n=== 8. Th·ªëng k√™ theo status ===');
        const statusStats = await sql`
            SELECT status, COUNT(*) as count
            FROM nhat_ky_studio
            GROUP BY status
            ORDER BY count DESC
        `;

        console.log('Th·ªëng k√™ theo status:');
        statusStats.forEach(stat => {
            console.log(`- ${stat.status || 'NULL'}: ${stat.count} l·∫ßn`);
        });

        // Th·ªëng k√™ theo component_name
        console.log('\n=== 9. Th·ªëng k√™ theo component_name ===');
        const componentStats = await sql`
            SELECT component_name, COUNT(*) as count
            FROM nhat_ky_studio
            WHERE component_name IS NOT NULL
            GROUP BY component_name
            ORDER BY count DESC
            LIMIT 10
        `;

        console.log('Top 10 component c√≥ nhi·ªÅu ho·∫°t ƒë·ªông nh·∫•t:');
        if (componentStats.length > 0) {
            componentStats.forEach((stat, index) => {
                console.log(`${index + 1}. ${stat.component_name}: ${stat.count} ho·∫°t ƒë·ªông`);
            });
        } else {
            console.log('Kh√¥ng c√≥ d·ªØ li·ªáu component_name');
        }

        // Th·ªëng k√™ theo th·ªùi gian
        console.log('\n=== 10. Th·ªëng k√™ theo th·ªùi gian ===');
        const timeStats = await sql`
            SELECT 
                DATE(created_at) as date, 
                COUNT(*) as count
            FROM nhat_ky_studio
            GROUP BY DATE(created_at)
            ORDER BY date DESC
            LIMIT 7
        `;

        console.log('Ho·∫°t ƒë·ªông 7 ng√†y g·∫ßn ƒë√¢y:');
        timeStats.forEach(stat => {
            console.log(`- ${stat.date}: ${stat.count} ho·∫°t ƒë·ªông`);
        });

        // Ph√¢n t√≠ch chi ti·∫øt
        console.log('\n=== 11. Ph√¢n t√≠ch chi ti·∫øt ===');

        // Ph√¢n t√≠ch theo IP
        const ipStats = await sql`
            SELECT ip_address, COUNT(*) as count
            FROM nhat_ky_studio
            WHERE ip_address IS NOT NULL
            GROUP BY ip_address
            ORDER BY count DESC
            LIMIT 5
        `;

        console.log('Top 5 IP address:');
        ipStats.forEach((stat, index) => {
            console.log(`${index + 1}. ${stat.ip_address}: ${stat.count} ho·∫°t ƒë·ªông`);
        });

        // Ph√¢n t√≠ch theo session_id
        const sessionStats = await sql`
            SELECT session_id, COUNT(*) as count
            FROM nhat_ky_studio
            WHERE session_id IS NOT NULL
            GROUP BY session_id
            ORDER BY count DESC
            LIMIT 5
        `;

        console.log('\nTop 5 session c√≥ nhi·ªÅu ho·∫°t ƒë·ªông nh·∫•t:');
        if (sessionStats.length > 0) {
            sessionStats.forEach((stat, index) => {
                console.log(`${index + 1}. ${stat.session_id}: ${stat.count} ho·∫°t ƒë·ªông`);
            });
        } else {
            console.log('Kh√¥ng c√≥ d·ªØ li·ªáu session_id');
        }

        // L·∫•y c√°c b·∫£n ghi m·ªõi nh·∫•t
        console.log('\n=== 12. C√°c ho·∫°t ƒë·ªông m·ªõi nh·∫•t ===');
        const recentLogs = await sql`
            SELECT *
            FROM nhat_ky_studio
            ORDER BY created_at DESC
            LIMIT 5
        `;

        console.log('5 ho·∫°t ƒë·ªông g·∫ßn nh·∫•t:');
        recentLogs.forEach((log, index) => {
            console.log(`\n${index + 1}. ID: ${log.id}`);
            console.log(`   Username: ${log.username}`);
            console.log(`   Th·ªùi gian: ${log.created_at}`);
            console.log(`   Action: ${log.action}`);
            console.log(`   Category: ${log.category}`);
            console.log(`   Status: ${log.status || 'N/A'}`);
            console.log(`   Component: ${log.component_name || 'N/A'}`);
            console.log(`   Details: ${JSON.stringify(log.details) || 'N/A'}`);
        });

        // Ki·ªÉm tra d·ªØ li·ªáu b·∫•t th∆∞·ªùng
        console.log('\n=== 13. Ki·ªÉm tra d·ªØ li·ªáu b·∫•t th∆∞·ªùng ===');

        // Ki·ªÉm tra c√°c b·∫£n ghi kh√¥ng c√≥ username
        const missingUsername = await sql`
            SELECT COUNT(*) as count
            FROM nhat_ky_studio
            WHERE username IS NULL OR username = ''
        `;

        console.log(`- B·∫£n ghi kh√¥ng c√≥ username: ${missingUsername[0].count}`);

        // Ki·ªÉm tra c√°c b·∫£n ghi kh√¥ng c√≥ action
        const missingAction = await sql`
            SELECT COUNT(*) as count
            FROM nhat_ky_studio
            WHERE action IS NULL OR action = ''
        `;

        console.log(`- B·∫£n ghi kh√¥ng c√≥ action: ${missingAction[0].count}`);

        // Ki·ªÉm tra c√°c b·∫£n ghi kh√¥ng c√≥ category
        const missingCategory = await sql`
            SELECT COUNT(*) as count
            FROM nhat_ky_studio
            WHERE category IS NULL OR category = ''
        `;

        console.log(`- B·∫£n ghi kh√¥ng c√≥ category: ${missingCategory[0].count}`);

        // T·ªïng k·∫øt
        console.log('\n=== 14. T·ªïng k·∫øt ===');
        console.log(`‚úÖ T·ªïng s·ªë b·∫£n ghi: ${totalRecords}`);
        console.log(`‚úÖ S·ªë lo·∫°i action kh√°c nhau: ${actionStats.length}`);
        console.log(`‚úÖ S·ªë category kh√°c nhau: ${categoryStats.length}`);
        console.log(`‚úÖ S·ªë username kh√°c nhau: ${userStats.length}`);

        await logToFile(`Ki·ªÉm tra chi ti·∫øt th√†nh c√¥ng. T·ªïng s·ªë b·∫£n ghi: ${totalRecords}`);

    } catch (error) {
        console.error('‚ùå Error:', error.message);
        await logToFile(`‚ùå Error: ${error.message}`);
    }
}

// Ch·∫°y function ch√≠nh
kiemTraChiTietNhatKy().catch(console.error);
