/**
 * C√¥ng c·ª• ki·ªÉm tra th√¥ng tin v√† quy·ªÅn c·ªßa Label Manager trong database
 * 
 * Script n√†y th·ª±c hi·ªán:
 * 1. K·∫øt n·ªëi ƒë·∫øn database
 * 2. Ki·ªÉm tra b·∫£ng label_manager
 * 3. Ki·ªÉm tra quy·ªÅn c·ªßa label manager
 * 4. Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
 * 5. Ki·ªÉm tra ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y t·ª´ b·∫£ng nhat_ky_studio (activity_log)
 */

import dotenv from 'dotenv';
import pg from 'pg';
import chalk from 'chalk';
const { Pool } = pg;

// Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng
dotenv.config({ path: '.env.local' });

// C√°c bi·∫øn m√¥i tr∆∞·ªùng
const DATABASE_URL = process.env.DATABASE_URL;

console.log(chalk.blue('üîç Ki·ªÉm tra Label Manager...'));
console.log('='.repeat(50));

async function main() {
    if (!DATABASE_URL) {
        console.error(chalk.red('‚ùå Kh√¥ng t√¨m th·∫•y DATABASE_URL trong file .env'));
        process.exit(1);
    }

    console.log('ƒêang k·∫øt n·ªëi database...');

    const pool = new Pool({
        connectionString: DATABASE_URL,
    });

    try {
        // Ki·ªÉm tra Label Manager
        console.log(chalk.yellow('=== Ki·ªÉm tra Label Manager ==='));
        const labelManagerResult = await pool.query('SELECT * FROM label_manager LIMIT 1');

        if (labelManagerResult.rows.length === 0) {
            console.log(chalk.red('‚ùå Kh√¥ng t√¨m th·∫•y Label Manager n√†o trong database'));
            return;
        }

        const labelManager = labelManagerResult.rows[0];
        console.log(chalk.green('‚úÖ T√¨m th·∫•y Label Manager:'));
        console.log(`- Username: ${labelManager.username}`);
        console.log(`  Email: ${labelManager.email}`);
        console.log(`  Role: ${labelManager.role}`);
        console.log(`  Created: ${new Date(labelManager.created_at)}`);
        console.log('-'.repeat(40));

        // Ki·ªÉm tra quy·ªÅn
        console.log(chalk.yellow('=== Ki·ªÉm tra Quy·ªÅn Label Manager ==='));
        console.log('Th√¥ng tin Label Manager:');
        console.log(`- Username: ${labelManager.username}`);
        console.log(`- Email: ${labelManager.email}`);

        // Ph√¢n t√≠ch quy·ªÅn t·ª´ tr∆∞·ªùng permissions
        let permissions = labelManager.permissions;
        let permissionsRaw = permissions;
        let permissionsParsed = permissions;

        if (typeof permissions === 'string') {
            try {
                permissionsParsed = JSON.parse(permissions);
            } catch (error) {
                console.log(chalk.yellow(`‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ parse JSON permissions: ${error.message}`));
                // N·∫øu kh√¥ng ph·∫£i JSON, gi·ªØ nguy√™n gi√° tr·ªã
            }
        }

        console.log(`- Permissions raw: ${JSON.stringify(permissionsRaw)}`);
        console.log(`- Permissions parsed: ${JSON.stringify(permissionsParsed)}`);

        // Ki·ªÉm tra quy·ªÅn admin
        const hasAdminRole =
            (permissionsParsed && permissionsParsed.role === 'admin') ||
            (labelManager.role === 'admin');

        if (hasAdminRole) {
            console.log(chalk.green(`‚úÖ T√†i kho·∫£n c√≥ quy·ªÅn admin h·ª£p l·ªá ${JSON.stringify(permissionsParsed)}`));
        } else {
            console.log(chalk.red(`‚ùå T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn admin: ${JSON.stringify(permissionsParsed)}`));
        }

        // Hi·ªÉn th·ªã t·∫•t c·∫£ thu·ªôc t√≠nh
        console.log('T·∫•t c·∫£ thu·ªôc t√≠nh c·ªßa Label Manager:');
        Object.entries(labelManager).forEach(([key, value]) => {
            console.log(`- ${key}: ${JSON.stringify(value)}`);
        });

        // Ki·ªÉm tra ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
        console.log(chalk.yellow('=== Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y ==='));
        try {
            const recentActivities = await pool.query(
                'SELECT * FROM nhat_ky_studio WHERE username = $1 ORDER BY created_at DESC LIMIT 5',
                [labelManager.username]
            );

            if (recentActivities.rows.length > 0) {
                console.log(chalk.green(`‚úÖ T√¨m th·∫•y ${recentActivities.rows.length} ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y:`));
                recentActivities.rows.forEach((activity, index) => {
                    console.log(`${index + 1}. ${activity.action} - ${activity.description} (${new Date(activity.created_at).toLocaleString()})`);
                });
            } else {
                console.log(chalk.yellow('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y'));
            }
        } catch (error) {
            console.error(chalk.red(`‚ùå L·ªói: ${error.message}`));
        }

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi truy v·∫•n database: ${error.message}`));
    } finally {
        await pool.end();
    }
}

main().catch(error => {
    console.error(chalk.red(`‚ùå L·ªói kh√¥ng mong mu·ªën: ${error.message}`));
    process.exit(1);
});
