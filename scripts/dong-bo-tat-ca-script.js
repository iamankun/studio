/**
 * Script ƒë·ªÉ ƒë·ªìng b·ªô h√≥a t·∫•t c·∫£ c√°c script v·ªõi h·ªá th·ªëng database v√† t√†i kho·∫£n th·ª±c t·∫ø
 * Ch·∫°y: node scripts/sync-all-scripts.js
 */

import { connectToDatabase } from './utils/db-helper.js';
import { logToFile } from './utils/env-loader.js';
import chalk from 'chalk';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

/**
 * Ki·ªÉm tra v√† ƒë·ªìng b·ªô h√≥a t·∫•t c·∫£ c√°c script
 */
async function syncAllScripts() {
    console.log(chalk.blue('üîÑ ƒê·ªíNG B·ªò H√ìA T·∫§T C·∫¢ SCRIPTS'));
    console.log('='.repeat(60));

    try {
        // 1. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
        await checkEnvironmentVariables();

        // 2. Ki·ªÉm tra k·∫øt n·ªëi database
        await testDatabaseConnection();

        // 3. Ki·ªÉm tra t√†i kho·∫£n th·ª±c t·∫ø
        await checkRealAccounts();

        // 4. Ki·ªÉm tra c·∫•u tr√∫c database
        await checkDatabaseStructure();

        // 5. X√°c minh quy·ªÅn truy c·∫≠p
        await verifyPermissions();

        // 6. T·ªïng k·∫øt
        await showSummary();

        console.log(chalk.green('\n‚úÖ ƒê·ªìng b·ªô h√≥a ho√†n t·∫•t!'));
        await logToFile('Scripts synchronization completed successfully', 'sync-scripts.log');

    } catch (error) {
        console.error(chalk.red('‚ùå L·ªói khi ƒë·ªìng b·ªô:'), error.message);
        await logToFile(`Sync error: ${error.message}`, 'sync-scripts.log');
    }
}

/**
 * Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
 */
async function checkEnvironmentVariables() {
    console.log(chalk.yellow('\n=== 1. Ki·ªÉm tra Bi·∫øn M√¥i Tr∆∞·ªùng ==='));
    
    const requiredVars = [
        'DATABASE_URL',
        'ADMIN_USERNAME',
        'ADMIN_PASSWORD'
    ];

    for (const varName of requiredVars) {
        const value = process.env[varName];
        if (value) {
            console.log(chalk.green(`‚úÖ ${varName}: ${varName === 'DATABASE_URL' ? '***' : value}`));
        } else {
            console.log(chalk.red(`‚ùå ${varName}: Kh√¥ng t·ªìn t·∫°i`));
        }
    }

    // Ki·ªÉm tra t√†i kho·∫£n admin
    const adminUsername = process.env.ADMIN_USERNAME;
    if (adminUsername === 'ankunstudio') {
        console.log(chalk.green('‚úÖ T√†i kho·∫£n admin ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng: ankunstudio'));
    } else {
        console.log(chalk.yellow(`‚ö†Ô∏è T√†i kho·∫£n admin hi·ªán t·∫°i: ${adminUsername}, khuy√™n d√πng: ankunstudio`));
    }
}

/**
 * Ki·ªÉm tra k·∫øt n·ªëi database
 */
async function testDatabaseConnection() {
    console.log(chalk.yellow('\n=== 2. Ki·ªÉm tra K·∫øt N·ªëi Database ==='));
    
    try {
        const sql = await connectToDatabase();
        const result = await sql`SELECT NOW() as current_time`;
        console.log(chalk.green('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng'));
        console.log(chalk.gray(`   Server time: ${result[0].current_time}`));
    } catch (error) {
        console.log(chalk.red('‚ùå L·ªói k·∫øt n·ªëi database:'), error.message);
        throw error;
    }
}

/**
 * Ki·ªÉm tra t√†i kho·∫£n th·ª±c t·∫ø
 */
async function checkRealAccounts() {
    console.log(chalk.yellow('\n=== 3. Ki·ªÉm tra T√†i Kho·∫£n Th·ª±c T·∫ø ==='));
    
    const sql = await connectToDatabase();
    
    // Ki·ªÉm tra t√†i kho·∫£n ankunstudio
    const users = await sql`
        SELECT id, username, email, role, created_at
        FROM users 
        WHERE username = 'ankunstudio'
    `;

    if (users.length > 0) {
        const user = users[0];
        console.log(chalk.green('‚úÖ T√†i kho·∫£n ankunstudio t·ªìn t·∫°i:'));
        console.log(`   ID: ${user.id}`);
        console.log(`   Email: ${user.email}`);
        console.log(`   Role: ${user.role}`);
        console.log(`   Created: ${user.created_at}`);
    } else {
        console.log(chalk.red('‚ùå T√†i kho·∫£n ankunstudio ch∆∞a t·ªìn t·∫°i trong database'));
    }

    // Ki·ªÉm tra trong b·∫£ng label_manager
    const labelManagers = await sql`
        SELECT id, username, email, role, created_at
        FROM label_manager 
        WHERE username = 'ankunstudio'
    `;

    if (labelManagers.length > 0) {
        console.log(chalk.green('‚úÖ ankunstudio c√≥ quy·ªÅn Label Manager'));
    } else {
        console.log(chalk.yellow('‚ö†Ô∏è ankunstudio ch∆∞a c√≥ quy·ªÅn Label Manager'));
    }

    // Ki·ªÉm tra trong b·∫£ng artist
    const artists = await sql`
        SELECT id, username, email, full_name, created_at
        FROM artist 
        WHERE username = 'ankunstudio'
    `;

    if (artists.length > 0) {
        console.log(chalk.green('‚úÖ ankunstudio c√≥ quy·ªÅn Artist'));
    } else {
        console.log(chalk.yellow('‚ö†Ô∏è ankunstudio ch∆∞a c√≥ quy·ªÅn Artist'));
    }
}

/**
 * Ki·ªÉm tra c·∫•u tr√∫c database
 */
async function checkDatabaseStructure() {
    console.log(chalk.yellow('\n=== 4. Ki·ªÉm tra C·∫•u Tr√∫c Database ==='));
    
    const sql = await connectToDatabase();
    
    const requiredTables = [
        'users',
        'label_manager',
        'artist',
        'submissions',
        'label_templates',
        'label_assignments',
        'nhat_ky_studio'
    ];

    for (const tableName of requiredTables) {
        try {
            const result = await sql`
                SELECT COUNT(*) as count
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = ${tableName}
            `;

            if (result[0].count > 0) {
                // ƒê·∫øm s·ªë record trong b·∫£ng
                const recordCount = await sql`
                    SELECT COUNT(*) as total FROM ${sql(tableName)}
                `;
                console.log(chalk.green(`‚úÖ ${tableName}: ${recordCount[0].total} records`));
            } else {
                console.log(chalk.red(`‚ùå ${tableName}: Kh√¥ng t·ªìn t·∫°i`));
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå ${tableName}: L·ªói ki·ªÉm tra - ${error.message}`));
        }
    }
}

/**
 * X√°c minh quy·ªÅn truy c·∫≠p
 */
async function verifyPermissions() {
    console.log(chalk.yellow('\n=== 5. X√°c Minh Quy·ªÅn Truy C·∫≠p ==='));
    
    const sql = await connectToDatabase();
    
    // Ki·ªÉm tra quy·ªÅn c·ªßa ankunstudio
    const permissions = await sql`
        SELECT 
            u.username,
            u.role as user_role,
            lm.role as label_manager_role,
            a.username as artist_username
        FROM users u
        LEFT JOIN label_manager lm ON u.username = lm.username
        LEFT JOIN artist a ON u.username = a.username
        WHERE u.username = 'ankunstudio'
    `;

    if (permissions.length > 0) {
        const perm = permissions[0];
        console.log(chalk.green('‚úÖ Quy·ªÅn truy c·∫≠p ankunstudio:'));
        console.log(`   User Role: ${perm.user_role}`);
        console.log(`   Label Manager Role: ${perm.label_manager_role || 'Kh√¥ng c√≥'}`);
        console.log(`   Artist Access: ${perm.artist_username ? 'C√≥' : 'Kh√¥ng c√≥'}`);
    } else {
        console.log(chalk.red('‚ùå Kh√¥ng t√¨m th·∫•y quy·ªÅn truy c·∫≠p cho ankunstudio'));
    }
}

/**
 * Hi·ªÉn th·ªã t·ªïng k·∫øt
 */
async function showSummary() {
    console.log(chalk.yellow('\n=== 6. T·ªïng K·∫øt ==='));
    
    const sql = await connectToDatabase();
    
    // Th·ªëng k√™ t·ªïng quan
    const stats = await sql`
        SELECT 
            (SELECT COUNT(*) FROM users) as total_users,
            (SELECT COUNT(*) FROM label_manager) as total_label_managers,
            (SELECT COUNT(*) FROM artist) as total_artists,
            (SELECT COUNT(*) FROM submissions) as total_submissions,
            (SELECT COUNT(*) FROM label_templates) as total_templates,
            (SELECT COUNT(*) FROM label_assignments) as total_assignments
    `;

    const stat = stats[0];
    console.log(chalk.cyan('üìä Th·ªëng k√™ h·ªá th·ªëng:'));
    console.log(`   Users: ${stat.total_users}`);
    console.log(`   Label Managers: ${stat.total_label_managers}`);
    console.log(`   Artists: ${stat.total_artists}`);
    console.log(`   Submissions: ${stat.total_submissions}`);
    console.log(`   Templates: ${stat.total_templates}`);
    console.log(`   Assignments: ${stat.total_assignments}`);

    // Ki·ªÉm tra t√†i kho·∫£n ƒë·∫∑c bi·ªát
    const specialAccount = await sql`
        SELECT COUNT(*) as count
        FROM users 
        WHERE username = 'ankunstudio'
    `;

    if (specialAccount[0].count > 0) {
        console.log(chalk.green('‚úÖ T√†i kho·∫£n th·ª±c t·∫ø ankunstudio ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh'));
    } else {
        console.log(chalk.yellow('‚ö†Ô∏è C·∫ßn t·∫°o t√†i kho·∫£n th·ª±c t·∫ø ankunstudio'));
    }
}

// Export functions
export { syncAllScripts };

// Auto-run if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
    syncAllScripts().catch(console.error);
}
