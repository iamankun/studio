// @ts-check
/**
 * Script ƒë·ªÉ ki·ªÉm tra b·∫£ng artists trong database
 * Ch·∫°y: node scripts/check-artists-table.js
 */
import {
    connectToDatabase,
    checkTableExists,
    getTableStructure,
    countRecords
} from './utils/db-helper.js';
import { loadEnvVariables, logToFile } from './utils/env-loader.js';

// Load environment variables
loadEnvVariables();

async function checkArtistsTable() {
    console.log('üîç Ki·ªÉm tra b·∫£ng artists...');
    console.log('='.repeat(50));

    try {
        // Ki·ªÉm tra k·∫øt n·ªëi database
        const sql = await connectToDatabase();

        // Ki·ªÉm tra b·∫£ng artists t·ªìn t·∫°i kh√¥ng
        const tableExists = await checkTableExists('artists');

        if (!tableExists) {
            console.error('‚ùå B·∫£ng artists kh√¥ng t·ªìn t·∫°i trong database!');
            await logToFile('B·∫£ng artists kh√¥ng t·ªìn t·∫°i!', 'artists-check.log');
            return;
        }

        console.log('‚úÖ B·∫£ng artists t·ªìn t·∫°i');

        // L·∫•y c·∫•u tr√∫c b·∫£ng
        const columns = await getTableStructure('artists');

        console.log('\n=== C·∫•u tr√∫c b·∫£ng artists ===');
        columns.forEach(col => {
            console.log(`- ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });

        // ƒê·∫øm s·ªë l∆∞·ª£ng artists
        const artistCount = await countRecords('artists');
        console.log(`\n‚úÖ T·ªïng s·ªë artists: ${artistCount}`);

        // L·∫•y danh s√°ch artists
        const artists = await sql`
            SELECT * FROM artists
            ORDER BY id
            LIMIT 5
        `;

        console.log('\n=== M·∫´u d·ªØ li·ªáu artists ===');
        if (artists.length > 0) {
            artists.forEach((artist, index) => {
                console.log(`\n${index + 1}. Artist ID: ${artist.id}`);
                console.log(`   Username: ${artist.username}`);
                console.log(`   Name: ${artist.name || artist.artist_name || 'N/A'}`);
                console.log(`   Email: ${artist.email || 'N/A'}`);
                console.log(`   Created: ${artist.created_at || 'N/A'}`);
            });
        } else {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng artists');
        }

        // Ki·ªÉm tra c·∫•u tr√∫c permissions n·∫øu c√≥
        console.log('\n=== Ki·ªÉm tra c·∫•u tr√∫c permissions ===');
        const hasPermissions = columns.some(col => col.column_name === 'permissions');

        if (hasPermissions) {
            console.log('‚úÖ B·∫£ng artists c√≥ tr∆∞·ªùng permissions');

            // Ki·ªÉm tra d·ªØ li·ªáu permissions c·ªßa m·ªôt s·ªë artist
            const artistsWithPermissions = await sql`
                SELECT id, username, permissions 
                FROM artists 
                WHERE permissions IS NOT NULL
                LIMIT 3
            `;

            if (artistsWithPermissions.length > 0) {
                console.log('M·∫´u d·ªØ li·ªáu permissions:');
                artistsWithPermissions.forEach(artist => {
                    console.log(`- ${artist.username}: ${JSON.stringify(artist.permissions)}`);
                });
            } else {
                console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y artist n√†o c√≥ d·ªØ li·ªáu permissions');
            }
        } else {
            console.log('‚ö†Ô∏è B·∫£ng artists kh√¥ng c√≥ tr∆∞·ªùng permissions');
        }

        console.log('\n=== Ki·ªÉm tra k·∫øt n·ªëi v·ªõi b·∫£ng submissions ===');
        // Ki·ªÉm tra artist c√≥ submissions kh√¥ng
        const artistWithSubmissions = await sql`
            SELECT a.id, a.username, COUNT(s.id) as submission_count
            FROM artists a
            LEFT JOIN submissions s ON a.id = s.artist_id
            GROUP BY a.id, a.username
            ORDER BY submission_count DESC
            LIMIT 3
        `;

        if (artistWithSubmissions.length > 0) {
            console.log('Artists v·ªõi submissions:');
            artistWithSubmissions.forEach(row => {
                console.log(`- ${row.username}: ${row.submission_count} submissions`);
            });
        } else {
            console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·ªëi li√™n k·∫øt gi·ªØa artists v√† submissions');
        }

        console.log('\n‚úÖ Ki·ªÉm tra ho√†n t·∫•t!');
        console.log('ƒê√£ ghi log v√†o th∆∞ m·ª•c logs/');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        await logToFile(`Error: ${error.message}`, 'artists-check.log');
    }
}

// Ch·∫°y ki·ªÉm tra
checkArtistsTable().catch(console.error);
