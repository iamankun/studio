/**
 * Script ƒë·ªÉ c·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c script c≈© s·ª≠ d·ª•ng ƒë√∫ng t√†i kho·∫£n ankunstudio
 * Ch·∫°y: node scripts/update-script-accounts.js
 */

import { readFileSync, writeFileSync, readdirSync, statSync } from 'fs';
import { join } from 'path';
import chalk from 'chalk';
import { loadEnvVariables, logToFile } from './utils/env-loader.js';

// Load environment variables
loadEnvVariables();

/**
 * C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c script ƒë·ªÉ s·ª≠ d·ª•ng ƒë√∫ng t√†i kho·∫£n
 */
async function updateScriptAccounts() {
    console.log(chalk.blue('üîÑ C·∫¨P NH·∫¨T T·∫§T C·∫¢ SCRIPTS S·ª¨ D·ª§NG ƒê√öNG T√ÄI KHO·∫¢N'));
    console.log('='.repeat(60));

    try {
        const scriptsDir = 'f:\\Dev\\DMG\\scripts';
        const updates = [];

        // Danh s√°ch c√°c pattern c·∫ßn thay th·∫ø
        const replacements = [
            // Thay th·∫ø t√†i kho·∫£n admin c≈©
            { from: /username.*=.*['"]admin['"]/, to: "username = 'ankunstudio'" },
            { from: /username.*:.*['"]admin['"]/, to: "username: 'ankunstudio'" },
            { from: /WHERE username = ['"]admin['"]/, to: "WHERE username = 'ankunstudio'" },
            { from: /username.*=.*['"]testadmin['"]/, to: "username = 'ankunstudio'" },
            
            // Thay th·∫ø email admin c≈©
            { from: /email.*=.*['"]admin@ankun\.dev['"]/, to: "email = 'ankunstudio@ankun.dev'" },
            { from: /email.*:.*['"]admin@ankun\.dev['"]/, to: "email: 'ankunstudio@ankun.dev'" },
            
            // Thay th·∫ø role
            { from: /role.*=.*['"]Admin['"]/, to: "role = 'Label Manager & Artist'" },
            { from: /role.*:.*['"]Admin['"]/, to: "role: 'Label Manager & Artist'" },
            
            // Thay th·∫ø trong comment
            { from: /\/\/ Real users.*admin \(Label Manager\)/, to: "// Real users: ankunstudio (Label Manager & Artist)" },
            { from: /admin \(Label Manager\)/, to: "ankunstudio (Label Manager & Artist)" },
            
            // Thay th·∫ø trong object definitions
            { from: /labelManager:\s*{\s*username:\s*['"]admin['"]/, to: "labelManager: {\n        username: 'ankunstudio'" },
            { from: /username:\s*['"]admin['"],\s*email:\s*['"]admin@ankun\.dev['"]/, to: "username: 'ankunstudio',\n        email: 'ankunstudio@ankun.dev'" },
        ];

        // Duy·ªát qua t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c scripts
        await processDirectory(scriptsDir, replacements, updates);

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        console.log(chalk.green(`\n‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updates.length} file:`));
        updates.forEach(update => {
            console.log(chalk.gray(`   - ${update.file}: ${update.changes} thay ƒë·ªïi`));
        });

        await logToFile(`Updated ${updates.length} script files for ankunstudio account`, 'update-scripts.log');

    } catch (error) {
        console.error(chalk.red('‚ùå L·ªói khi c·∫≠p nh·∫≠t scripts:'), error.message);
        await logToFile(`Update error: ${error.message}`, 'update-scripts.log');
    }
}

/**
 * X·ª≠ l√Ω th∆∞ m·ª•c v√† t·∫•t c·∫£ c√°c file trong ƒë√≥
 */
async function processDirectory(dirPath, replacements, updates) {
    const items = readdirSync(dirPath);

    for (const item of items) {
        const itemPath = join(dirPath, item);
        const stat = statSync(itemPath);

        if (stat.isDirectory()) {
            // B·ªè qua th∆∞ m·ª•c logs v√† node_modules
            if (item !== 'logs' && item !== 'node_modules' && item !== '.git') {
                await processDirectory(itemPath, replacements, updates);
            }
        } else if (stat.isFile()) {
            // Ch·ªâ x·ª≠ l√Ω c√°c file JavaScript, TypeScript, JSON
            if (item.match(/\.(js|mjs|ts|json)$/)) {
                await processFile(itemPath, replacements, updates);
            }
        }
    }
}

/**
 * X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ
 */
async function processFile(filePath, replacements, updates) {
    try {
        const content = readFileSync(filePath, 'utf8');
        let newContent = content;
        let changeCount = 0;

        // √Åp d·ª•ng t·∫•t c·∫£ c√°c thay th·∫ø
        for (const replacement of replacements) {
            const matches = newContent.match(replacement.from);
            if (matches) {
                newContent = newContent.replace(replacement.from, replacement.to);
                changeCount++;
            }
        }

        // N·∫øu c√≥ thay ƒë·ªïi, ghi l·∫°i file
        if (changeCount > 0) {
            writeFileSync(filePath, newContent, 'utf8');
            updates.push({
                file: filePath.replace('f:\\Dev\\DMG\\scripts\\', ''),
                changes: changeCount
            });
            
            console.log(chalk.yellow(`üìù C·∫≠p nh·∫≠t: ${filePath.replace('f:\\Dev\\DMG\\scripts\\', '')}`));
        }

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi x·ª≠ l√Ω file ${filePath}:`), error.message);
    }
}

/**
 * C·∫≠p nh·∫≠t c√°c file SQL c·ª• th·ªÉ
 */
async function updateSqlFiles() {
    console.log(chalk.yellow('\n=== C·∫≠p nh·∫≠t SQL Files ==='));
    
    const sqlFiles = [
        'f:\\Dev\\DMG\\scripts\\001_create_initial_tables.sql',
        'f:\\Dev\\DMG\\scripts\\002_insert_demo_data.sql',
        'f:\\Dev\\DMG\\scripts\\003_simple_demo_data.sql'
    ];

    for (const sqlFile of sqlFiles) {
        try {
            // T·∫°o n·ªôi dung SQL c∆° b·∫£n n·∫øu file tr·ªëng
            const content = readFileSync(sqlFile, 'utf8');
            if (content.trim().length <= 200) { // File h·∫ßu nh∆∞ tr·ªëng
                await createBasicSqlContent(sqlFile);
            }
        } catch (error) {
            console.log(chalk.red(`‚ùå L·ªói khi c·∫≠p nh·∫≠t ${sqlFile}:`), error.message);
        }
    }
}

/**
 * T·∫°o n·ªôi dung SQL c∆° b·∫£n
 */
async function createBasicSqlContent(filePath) {
    const fileName = filePath.split('\\').pop();
    
    if (fileName === '001_create_initial_tables.sql') {
        const sqlContent = `-- Active: 1751325959747@@ep-mute-rice-a17ojtca-pooler.ap-southeast-1.aws.neon.tech@5432@aksstudio
-- Script t·∫°o c√°c b·∫£ng c∆° b·∫£n cho h·ªá th·ªëng AKS Studio
-- ƒê√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi tao-du-lieu-mau.js, tham kh·∫£o file ƒë√≥ ƒë·ªÉ c√≥ n·ªôi dung ƒë·∫ßy ƒë·ªß

-- C√°c b·∫£ng s·∫Ω ƒë∆∞·ª£c t·∫°o:
-- 1. users - B·∫£ng ng∆∞·ªùi d√πng ch√≠nh
-- 2. label_manager - B·∫£ng qu·∫£n l√Ω label
-- 3. artist - B·∫£ng ngh·ªá sƒ©
-- 4. submissions - B·∫£ng n·ªôp b√†i
-- 5. label_templates - B·∫£ng m·∫´u label
-- 6. label_assignments - B·∫£ng g√°n label
-- 7. nhat_ky_studio - B·∫£ng nh·∫≠t k√Ω

-- Ch·∫°y: node src/data/tao-du-lieu-mau.js ƒë·ªÉ t·∫°o ƒë·∫ßy ƒë·ªß
`;
        writeFileSync(filePath, sqlContent, 'utf8');
        console.log(chalk.green(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${fileName}`));
    }
    
    if (fileName === '002_insert_demo_data.sql') {
        const sqlContent = `-- Active: 1751325959747@@ep-mute-rice-a17ojtca-pooler.ap-southeast-1.aws.neon.tech@5432@aksstudio
-- Script ch√®n d·ªØ li·ªáu demo cho h·ªá th·ªëng AKS Studio
-- Bao g·ªìm t√†i kho·∫£n th·ª±c t·∫ø ankunstudio v√† d·ªØ li·ªáu m·∫´u

-- T√†i kho·∫£n th·ª±c t·∫ø:
-- Username: ankunstudio
-- Role: Label Manager & Artist
-- Email: ankunstudio@ankun.dev

-- Ch·∫°y: node src/data/generateData.js ƒë·ªÉ ch√®n d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß
`;
        writeFileSync(filePath, sqlContent, 'utf8');
        console.log(chalk.green(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${fileName}`));
    }
}

/**
 * Ki·ªÉm tra v√† s·ª≠a c√°c script quan tr·ªçng
 */
async function fixImportantScripts() {
    console.log(chalk.yellow('\n=== S·ª≠a Scripts Quan Tr·ªçng ==='));
    
    const importantScripts = [
        'check-admin-auth.js',
        'test-real-users.js',
        'check-label-manager.js',
        'test-real-authorization.js'
    ];

    for (const script of importantScripts) {
        await ensureScriptUsesCorrectAccount(script);
    }
}

/**
 * ƒê·∫£m b·∫£o script s·ª≠ d·ª•ng ƒë√∫ng t√†i kho·∫£n
 */
async function ensureScriptUsesCorrectAccount(scriptName) {
    const filePath = `f:\\Dev\\DMG\\scripts\\${scriptName}`;
    
    try {
        let content = readFileSync(filePath, 'utf8');
        let changed = false;

        // Thay th·∫ø ADMIN_USERNAME check
        if (content.includes('process.env.ADMIN_USERNAME')) {
            content = content.replace(
                /const adminUsername = process\.env\.ADMIN_USERNAME;/g,
                `const adminUsername = process.env.ADMIN_USERNAME || 'ankunstudio';`
            );
            changed = true;
        }

        // Thay th·∫ø hardcoded admin username
        if (content.includes("'admin'") && !content.includes('ankunstudio')) {
            content = content.replace(
                /WHERE username = ['"]admin['"](?! AND)/g,
                "WHERE username = 'ankunstudio'"
            );
            changed = true;
        }

        if (changed) {
            writeFileSync(filePath, content, 'utf8');
            console.log(chalk.green(`‚úÖ ƒê√£ s·ª≠a ${scriptName}`));
        } else {
            console.log(chalk.gray(`‚û°Ô∏è ${scriptName} ƒë√£ ƒë√∫ng`));
        }

    } catch (error) {
        console.log(chalk.red(`‚ùå L·ªói khi s·ª≠a ${scriptName}:`), error.message);
    }
}

// Export functions
export { updateScriptAccounts, updateSqlFiles, fixImportantScripts };

// Auto-run if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
    updateScriptAccounts()
        .then(() => updateSqlFiles())
        .then(() => fixImportantScripts())
        .catch(console.error);
}
