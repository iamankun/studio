// @ts-check
/**
 * Script ki·ªÉm tra l·ªói v√† v·∫•n ƒë·ªÅ trong b·∫£ng nhat_ky_studio
 * Ph√°t hi·ªán c√°c b·∫£n ghi kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ v·∫•n ƒë·ªÅ
 */

import { neon } from "@neondatabase/serverless";
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

async function logToFile(message) {
    try {
        const logDir = path.join(process.cwd(), "logs");
        await fs.mkdir(logDir, { recursive: true });
        const logFile = path.join(logDir, "kiem-tra-loi-nhat-ky.log");
        const timestamp = new Date().toISOString();
        await fs.appendFile(logFile, `[${timestamp}] ${message}\n`);
    } catch (e) {
        console.error("Failed to write to log file:", e);
    }
}

async function connectToDatabase() {
    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        throw new Error('DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
    }
    return neon(DATABASE_URL);
}

async function kiemTraLoiNhatKy() {
    console.log('üîç Ki·ªÉm tra l·ªói trong b·∫£ng nhat_ky_studio');
    console.log('='.repeat(70));
    await logToFile('B·∫Øt ƒë·∫ßu ki·ªÉm tra l·ªói nhat_ky_studio');

    try {
        // K·∫øt n·ªëi ƒë·∫øn database
        console.log('=== 1. K·∫øt n·ªëi ƒë·∫øn database ===');
        const sql = await connectToDatabase();
        await logToFile('K·∫øt n·ªëi database th√†nh c√¥ng');

        // Ki·ªÉm tra b·∫£ng t·ªìn t·∫°i
        console.log('\n=== 2. Ki·ªÉm tra b·∫£ng nhat_ky_studio ===');
        const existingTable = await sql`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'nhat_ky_studio'
        `;

        if (existingTable.length === 0) {
            console.error('‚ùå B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
            await logToFile('‚ùå B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
            console.log('Vui l√≤ng ch·∫°y script tao-bang-nhat-ky.js tr∆∞·ªõc');
            return;
        }

        console.log('‚úÖ B·∫£ng nhat_ky_studio t·ªìn t·∫°i');
        await logToFile('‚úÖ B·∫£ng nhat_ky_studio t·ªìn t·∫°i');

        // Ki·ªÉm tra d·ªØ li·ªáu tr·ªëng ho·∫∑c null
        console.log('\n=== 3. Ki·ªÉm tra d·ªØ li·ªáu tr·ªëng ===');

        // Ki·ªÉm tra username tr·ªëng
        const nullUsername = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE username IS NULL OR TRIM(username) = ''
        `;

        console.log(`Username tr·ªëng: ${nullUsername[0].count} b·∫£n ghi`);
        if (nullUsername[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi thi·∫øu username');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${nullUsername[0].count} b·∫£n ghi thi·∫øu username`);
        }

        // Ki·ªÉm tra action tr·ªëng
        const nullAction = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE action IS NULL OR TRIM(action) = ''
        `;

        console.log(`Action tr·ªëng: ${nullAction[0].count} b·∫£n ghi`);
        if (nullAction[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi thi·∫øu action');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${nullAction[0].count} b·∫£n ghi thi·∫øu action`);
        }

        // Ki·ªÉm tra category tr·ªëng
        const nullCategory = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE category IS NULL OR TRIM(category) = ''
        `;

        console.log(`Category tr·ªëng: ${nullCategory[0].count} b·∫£n ghi`);
        if (nullCategory[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi thi·∫øu category');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${nullCategory[0].count} b·∫£n ghi thi·∫øu category`);
        }

        // Ki·ªÉm tra d·ªØ li·ªáu b·∫•t th∆∞·ªùng
        console.log('\n=== 4. Ki·ªÉm tra d·ªØ li·ªáu b·∫•t th∆∞·ªùng ===');

        // Ki·ªÉm tra details kh√¥ng ph·∫£i JSON
        const invalidDetails = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE details IS NOT NULL AND jsonb_typeof(details) IS NULL
        `;

        console.log(`Details kh√¥ng ph·∫£i JSON: ${invalidDetails[0].count} b·∫£n ghi`);
        if (invalidDetails[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi c√≥ tr∆∞·ªùng details kh√¥ng ph·∫£i JSON h·ª£p l·ªá');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${invalidDetails[0].count} b·∫£n ghi c√≥ details kh√¥ng h·ª£p l·ªá`);
        }

        // Ki·ªÉm tra related_ids kh√¥ng ph·∫£i JSON
        const invalidRelatedIds = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE related_ids IS NOT NULL AND jsonb_typeof(related_ids) IS NULL
        `;

        console.log(`Related IDs kh√¥ng ph·∫£i JSON: ${invalidRelatedIds[0].count} b·∫£n ghi`);
        if (invalidRelatedIds[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi c√≥ tr∆∞·ªùng related_ids kh√¥ng ph·∫£i JSON h·ª£p l·ªá');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${invalidRelatedIds[0].count} b·∫£n ghi c√≥ related_ids kh√¥ng h·ª£p l·ªá`);
        }

        // Ki·ªÉm tra c√°c b·∫£n ghi l·ªói
        console.log('\n=== 5. Ki·ªÉm tra b·∫£n ghi c√≥ d·∫•u hi·ªáu l·ªói ===');
        const errorRecords = await sql`
            SELECT * FROM nhat_ky_studio
            WHERE 
                status = 'error' OR 
                status = 'failed' OR
                status LIKE '%l·ªói%' OR
                status LIKE '%fail%' OR
                status LIKE '%error%'
            ORDER BY created_at DESC
            LIMIT 5
        `;

        if (errorRecords.length > 0) {
            console.log(`‚ö†Ô∏è Ph√°t hi·ªán ${errorRecords.length} b·∫£n ghi c√≥ d·∫•u hi·ªáu l·ªói:`);
            errorRecords.forEach((record, index) => {
                console.log(`\n${index + 1}. ID: ${record.id}`);
                console.log(`   Username: ${record.username}`);
                console.log(`   Th·ªùi gian: ${record.created_at}`);
                console.log(`   Action: ${record.action}`);
                console.log(`   Status: ${record.status}`);
                console.log(`   Details: ${JSON.stringify(record.details) || 'N/A'}`);
            });
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${errorRecords.length} b·∫£n ghi c√≥ d·∫•u hi·ªáu l·ªói`);
        } else {
            console.log('‚úÖ Kh√¥ng ph√°t hi·ªán b·∫£n ghi c√≥ d·∫•u hi·ªáu l·ªói');
        }

        // Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p
        console.log('\n=== 6. Ki·ªÉm tra d·ªØ li·ªáu tr√πng l·∫∑p ===');
        const duplicateRecords = await sql`
            SELECT 
                username, action, category, COUNT(*) as count
            FROM nhat_ky_studio
            GROUP BY username, action, category
            HAVING COUNT(*) > 10
            ORDER BY count DESC
            LIMIT 5
        `;

        if (duplicateRecords.length > 0) {
            console.log('‚ö†Ô∏è Nh√≥m b·∫£n ghi c√≥ d·∫•u hi·ªáu tr√πng l·∫∑p:');
            duplicateRecords.forEach((record, index) => {
                console.log(`${index + 1}. ${record.username} - ${record.action} - ${record.category}: ${record.count} l·∫ßn`);
            });
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${duplicateRecords.length} nh√≥m b·∫£n ghi c√≥ d·∫•u hi·ªáu tr√πng l·∫∑p`);
        } else {
            console.log('‚úÖ Kh√¥ng ph√°t hi·ªán d·ªØ li·ªáu tr√πng l·∫∑p b·∫•t th∆∞·ªùng');
        }

        // Ki·ªÉm tra timestamps b·∫•t th∆∞·ªùng
        console.log('\n=== 7. Ki·ªÉm tra timestamps b·∫•t th∆∞·ªùng ===');

        // Ki·ªÉm tra th·ªùi gian trong t∆∞∆°ng lai
        const futureRecords = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE created_at > NOW()
        `;

        console.log(`Th·ªùi gian trong t∆∞∆°ng lai: ${futureRecords[0].count} b·∫£n ghi`);
        if (futureRecords[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi c√≥ th·ªùi gian trong t∆∞∆°ng lai');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${futureRecords[0].count} b·∫£n ghi c√≥ th·ªùi gian trong t∆∞∆°ng lai`);
        }

        // Ki·ªÉm tra th·ªùi gian qu√° kh·ª© xa
        const oldRecords = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE created_at < NOW() - INTERVAL '1 year'
        `;

        console.log(`Th·ªùi gian qu√° kh·ª© xa (>1 nƒÉm): ${oldRecords[0].count} b·∫£n ghi`);
        if (oldRecords[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi c√≥ th·ªùi gian qu√° kh·ª© xa (>1 nƒÉm)');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${oldRecords[0].count} b·∫£n ghi c√≥ th·ªùi gian qu√° kh·ª© xa`);
        }

        // Ki·ªÉm tra user_agent b·∫•t th∆∞·ªùng
        console.log('\n=== 8. Ki·ªÉm tra user_agent b·∫•t th∆∞·ªùng ===');
        const suspiciousUserAgents = await sql`
            SELECT user_agent, COUNT(*) as count FROM nhat_ky_studio
            WHERE 
                user_agent LIKE '%bot%' OR
                user_agent LIKE '%crawl%' OR
                user_agent LIKE '%spider%' OR
                user_agent LIKE '%scan%'
            GROUP BY user_agent
            ORDER BY count DESC
        `;

        if (suspiciousUserAgents.length > 0) {
            console.log(`‚ö†Ô∏è Ph√°t hi·ªán ${suspiciousUserAgents.length} user_agent c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng:`);
            suspiciousUserAgents.forEach((agent, index) => {
                console.log(`${index + 1}. ${agent.user_agent}: ${agent.count} l·∫ßn`);
            });
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${suspiciousUserAgents.length} user_agent b·∫•t th∆∞·ªùng`);
        } else {
            console.log('‚úÖ Kh√¥ng ph√°t hi·ªán user_agent b·∫•t th∆∞·ªùng');
        }

        // T·ªïng k·∫øt
        console.log('\n=== 9. T·ªïng k·∫øt ===');

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi c√≥ v·∫•n ƒë·ªÅ
        const totalProblems = 
            parseInt(nullUsername[0].count) + 
            parseInt(nullAction[0].count) + 
            parseInt(nullCategory[0].count) + 
            parseInt(invalidDetails[0].count) + 
            parseInt(invalidRelatedIds[0].count) + 
            parseInt(futureRecords[0].count);

        // ƒê·∫øm t·ªïng s·ªë b·∫£n ghi
        const totalRecords = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
        `;

        const problemPercentage = (totalProblems / parseInt(totalRecords[0].count)) * 100;

        console.log(`‚úÖ T·ªïng s·ªë b·∫£n ghi: ${totalRecords[0].count}`);
        console.log(`‚ö†Ô∏è T·ªïng s·ªë b·∫£n ghi c√≥ v·∫•n ƒë·ªÅ: ${totalProblems} (${problemPercentage.toFixed(2)}%)`);

        if (problemPercentage > 5) {
            console.log('‚ö†Ô∏è T·ª∑ l·ªá l·ªói cao, c·∫ßn ki·ªÉm tra l·∫°i h·ªá th·ªëng ghi log');
        } else {
            console.log('‚úÖ T·ª∑ l·ªá l·ªói trong ng∆∞·ª°ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c');
        }

        await logToFile(`T·ªïng k·∫øt: ${totalProblems}/${totalRecords[0].count} b·∫£n ghi c√≥ v·∫•n ƒë·ªÅ (${problemPercentage.toFixed(2)}%)`);

    } catch (error) {
        console.error('‚ùå Error:', error.message);
        await logToFile(`‚ùå Error: ${error.message}`);
    }
}

// Ch·∫°y function ch√≠nh
kiemTraLoiNhatKy().catch(console.error);
