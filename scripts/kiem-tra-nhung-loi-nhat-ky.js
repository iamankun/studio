// @ts-check
/**
 * Script ki·ªÉm tra l·ªói v√† v·∫•n ƒë·ªÅ trong b·∫£ng nhat_ky_studio
 * Ph√°t hi·ªán c√°c b·∫£n ghi kh√¥ng h·ª£p l·ªá ho·∫∑c c√≥ v·∫•n ƒë·ªÅ
 */

import { neon } from "@neondatabase/serverless";
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config({ path: '.env.local' });

async function logToFile(message) {
    try {
        const logDir = path.join((/** @type {any} */ (process)).cwd(), "logs");
        await fs.mkdir(logDir, { recursive: true });
        const logFile = path.join(logDir, "kiem-tra-loi-nhat-ky.log");
        const timestamp = new Date().toISOString();
        await fs.appendFile(logFile, `[${timestamp}] ${message}\n`);
    } catch (e) {
        console.error("Failed to write to log file:", e);
    }
}

async function connectToDatabase() {
    const DATABASE_URL = process.env.DATABASE_URL;
    if (!DATABASE_URL) {
        throw new Error('DATABASE_URL kh√¥ng t√¨m th·∫•y trong .env.local');
    }
    return neon(DATABASE_URL);
}

async function kiemTraLoiNhatKy() {
    console.log('üîç Ki·ªÉm tra l·ªói trong b·∫£ng nhat_ky_studio');
    console.log('='.repeat(70));
    await logToFile('B·∫Øt ƒë·∫ßu ki·ªÉm tra l·ªói nhat_ky_studio');

    try {
        // K·∫øt n·ªëi ƒë·∫øn database
        console.log('=== 1. K·∫øt n·ªëi ƒë·∫øn database ===');
        const sql = await connectToDatabase();
        await logToFile('K·∫øt n·ªëi database th√†nh c√¥ng');

        // Ki·ªÉm tra b·∫£ng t·ªìn t·∫°i
        console.log('\n=== 2. Ki·ªÉm tra b·∫£ng nhat_ky_studio ===');
        const existingTable = await sql`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'nhat_ky_studio'
        `;

        if (existingTable.length === 0) {
            console.error('‚ùå B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
            await logToFile('‚ùå B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
            console.log('Vui l√≤ng ch·∫°y script tao-bang-nhat-ky.js tr∆∞·ªõc');
            return;
        }

        console.log('‚úÖ B·∫£ng nhat_ky_studio t·ªìn t·∫°i');
        await logToFile('‚úÖ B·∫£ng nhat_ky_studio t·ªìn t·∫°i');

        // Ki·ªÉm tra d·ªØ li·ªáu tr·ªëng ho·∫∑c null
        console.log('\n=== 3. Ki·ªÉm tra d·ªØ li·ªáu tr·ªëng ===');

        // Ki·ªÉm tra username tr·ªëng
        const nullUsername = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE username IS NULL OR TRIM(username) = ''
        `;

        console.log(`Username tr·ªëng: ${nullUsername[0].count} b·∫£n ghi`);
        if (nullUsername[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi thi·∫øu username');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${nullUsername[0].count} b·∫£n ghi thi·∫øu username`);
        }

        // Ki·ªÉm tra action tr·ªëng
        const nullAction = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE action IS NULL OR TRIM(action) = ''
        `;

        console.log(`Action tr·ªëng: ${nullAction[0].count} b·∫£n ghi`);
        if (nullAction[0].count > 0) {
            console.log('‚ö†Ô∏è C√≥ b·∫£n ghi thi·∫øu action');
            await logToFile(`‚ö†Ô∏è Ph√°t hi·ªán ${nullAction[0].count} b·∫£n ghi thi·∫øu action`);
        }

        // Ki·ªÉm tra category tr·ªëng
        const nullCategory = await sql`
            SELECT COUNT(*) as count FROM nhat_ky_studio
            WHERE category IS NULL OR TRIM(category) = ''
        `;

        console.log(`Category tr·ªëng: ${nullCategory[0].count} b·∫£n ghi`);
        if (nullCategory[