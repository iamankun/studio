// scripts/kiem-tra-database-hoan-chinh.js
// Script ki·ªÉm tra database to√†n di·ªán v√† t·∫°o t√†i kho·∫£n ƒë·∫ßu ti√™n

import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function kiemTraVaTaoDuLieu() {
    console.log('üîç ƒêang ki·ªÉm tra k·∫øt n·ªëi database...')

    try {
        // Ki·ªÉm tra k·∫øt n·ªëi
        await prisma.$connect()
        console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!')

        // === KI·ªÇM TRA C√ÅC B·∫¢NG CH√çNH ===
        console.log('\nüìä ƒêang ki·ªÉm tra schema v√† c√°c b·∫£ng...')

        const tables = {
            User: 0,
            Profile: 0,
            Label: 0,
            Submission: 0,
            Track: 0,
            File: 0,
            FileFolder: 0,
            nhatKy: 0
        }

        // Ki·ªÉm tra t·ª´ng b·∫£ng
        for (const [tableName, _] of Object.entries(tables)) {
            try {
                const count = await prisma[tableName.toLowerCase()].count()
                tables[tableName] = count
                console.log(`   ‚úÖ B·∫£ng ${tableName}: ${count} b·∫£n ghi`)
            } catch (error) {
                console.log(`   ‚ùå B·∫£ng ${tableName}: Ch∆∞a t·ªìn t·∫°i ho·∫∑c l·ªói`)
                if (error.code === 'P2021') {
                    console.log(`      üí° C·∫ßn ch·∫°y prisma migrate ƒë·ªÉ t·∫°o b·∫£ng ${tableName}`)
                }
            }
        }

        // === X·ª¨ L√ù T√ÄI KHO·∫¢N QU·∫¢N TR·ªä ===
        console.log('\nüë§ Ki·ªÉm tra t√†i kho·∫£n qu·∫£n tr·ªã...')

        try {
            // T√¨m t√†i kho·∫£n admin hi·ªán c√≥
            const existingAdmin = await prisma.user.findFirst({
                where: {
                    OR: [
                        { email: 'ankunstudio@ankun.dev' },
                        { email: 'admin@ankun.dev' },
                        { roles: { hasSome: ['ADMINISTRATOR'] } }
                    ]
                },
                include: {
                    profile: true,
                    label: true
                }
            })

            if (existingAdmin) {
                console.log('‚úÖ ƒê√£ t√¨m th·∫•y t√†i kho·∫£n qu·∫£n tr·ªã:')
                console.log(`   - ID: ${existingAdmin.id}`)
                console.log(`   - Email: ${existingAdmin.email}`)
                console.log(`   - T√™n: ${existingAdmin.name}`)
                console.log(`   - Vai tr√≤: ${JSON.stringify(existingAdmin.roles)}`)
                console.log(`   - Profile: ${existingAdmin.profile ? 'C√≥' : 'Ch∆∞a c√≥'}`)
                console.log(`   - Label: ${existingAdmin.label?.name || 'Ch∆∞a c√≥'}`)
                console.log(`   - T·∫°o l√∫c: ${new Date(existingAdmin.createdAt).toLocaleString()}`)

                // Ghi log ki·ªÉm tra
                await prisma.nhatKy.create({
                    data: {
                        action: 'KIEM_TRA_TAI_KHOAN_QUAN_TRI',
                        details: {
                            userEmail: existingAdmin.email,
                            roles: existingAdmin.roles,
                            checkTime: new Date().toISOString(),
                            scriptName: 'kiem-tra-database-hoan-chinh.js'
                        },
                        userId: existingAdmin.id
                    }
                })

            } else {
                console.log('‚ö†Ô∏è Ch∆∞a c√≥ t√†i kho·∫£n qu·∫£n tr·ªã trong h·ªá th·ªëng')
                console.log('üî® ƒêang t·∫°o t√†i kho·∫£n ankunstudio v·ªõi ƒë·ªß quy·ªÅn...')

                // T·∫°o t√†i kho·∫£n m·ªõi
                const newUser = await prisma.user.create({
                    data: {
                        email: 'ankunstudio@ankun.dev',
                        name: 'An Kun Studio',
                        password: '@iamAnKun',
                        roles: ['ADMINISTRATOR', 'LABEL_MANAGER', 'ARTIST']
                    }
                })

                // T·∫°o profile
                const newProfile = await prisma.profile.create({
                    data: {
                        userId: newUser.id,
                        artistName: 'An Kun',
                        fullName: 'Nguy·ªÖn M·∫°nh An',
                        bio: 'T√†i kho·∫£n h·ªá th·ªëng ƒë·∫ßu ti√™n v·ªõi ƒë·ªß quy·ªÅn qu·∫£n tr·ªã, label manager v√† ngh·ªá sƒ©. ƒê∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script.',
                        verified: true,
                        facebookUrl: 'https://facebook.com/ankunstudio',
                        instagramUrl: 'https://instagram.com/ankunstudio',
                        youtubeUrl: 'https://youtube.com/@ankunstudio'
                    }
                })

                // Ghi log t·∫°o t√†i kho·∫£n
                await prisma.nhatKy.create({
                    data: {
                        action: 'TAO_TAI_KHOAN_QUAN_TRI_DAU_TIEN',
                        details: {
                            userEmail: newUser.email,
                            userName: newUser.name,
                            roles: newUser.roles,
                            profileId: newProfile.id,
                            createdTime: new Date().toISOString(),
                            note: 'T√†i kho·∫£n ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script ki·ªÉm tra database',
                            scriptName: 'kiem-tra-database-hoan-chinh.js'
                        },
                        userId: newUser.id
                    }
                })

                console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n ankunstudio th√†nh c√¥ng:')
                console.log(`   - ID: ${newUser.id}`)
                console.log(`   - Email: ${newUser.email}`)
                console.log(`   - T√™n: ${newUser.name}`)
                console.log(`   - Vai tr√≤: ${JSON.stringify(newUser.roles)}`)
                console.log(`   - Profile ID: ${newProfile.id}`)
                console.log(`   - T√™n ngh·ªá sƒ©: ${newProfile.artistName}`)
                console.log(`   - T·∫°o l√∫c: ${new Date(newUser.createdAt).toLocaleString()}`)
            }

        } catch (error) {
            console.error('‚ùå L·ªói khi x·ª≠ l√Ω t√†i kho·∫£n qu·∫£n tr·ªã:', error.message)
            if (error.code === 'P2002') {
                console.log('üí° Email ankunstudio@ankun.dev ƒë√£ t·ªìn t·∫°i')
            }
        }

        // === KI·ªÇM TRA MIGRATION ===
        console.log('\nüîÑ Ki·ªÉm tra tr·∫°ng th√°i Migration:')
        try {
            const migrations = await prisma.$queryRaw`
        SELECT migration_name, finished_at 
        FROM _prisma_migrations 
        ORDER BY finished_at DESC 
        LIMIT 5
      `
            console.log('   ‚úÖ L·ªãch s·ª≠ migrations g·∫ßn nh·∫•t:')
            migrations.forEach((migration, index) => {
                console.log(`   ${index + 1}. ${migration.migration_name}`)
                console.log(`      - Ho√†n th√†nh: ${new Date(migration.finished_at).toLocaleString()}`)
            })
        } catch (error) {
            console.log('   ‚ùå Kh√¥ng th·ªÉ truy c·∫≠p l·ªãch s·ª≠ migrations')
            console.log('   üí° C·∫ßn ch·∫°y: npx prisma migrate dev')
        }

        // === HI·ªÇN TH·ªä TH·ªêNG K√ä T·ªîNG H·ª¢P ===
        console.log('\nüìà Th·ªëng k√™ t·ªïng h·ª£p:')
        console.log(`   - T·ªïng s·ªë User: ${tables.User}`)
        console.log(`   - T·ªïng s·ªë Profile: ${tables.Profile}`)
        console.log(`   - T·ªïng s·ªë Label: ${tables.Label}`)
        console.log(`   - T·ªïng s·ªë Submission: ${tables.Submission}`)
        console.log(`   - T·ªïng s·ªë Track: ${tables.Track}`)
        console.log(`   - T·ªïng s·ªë File: ${tables.File}`)
        console.log(`   - T·ªïng s·ªë Nh·∫≠t k√Ω: ${tables.nhatKy}`)

        // === HI·ªÇN TH·ªä TH√îNG TIN K·∫æT N·ªêI ===
        const databaseUrl = process.env.DATABASE_URL || 'Kh√¥ng t√¨m th·∫•y DATABASE_URL'
        console.log('\nüîó Th√¥ng tin k·∫øt n·ªëi:')
        console.log(`   Database URL: ${databaseUrl.replace(/:[^:]*@/, ':****@')}`)

    } catch (error) {
        console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message)
        console.log('üí° Ki·ªÉm tra l·∫°i DATABASE_URL trong file .env.local')

        // Hi·ªÉn th·ªã th√¥ng tin debug
        console.log('\nüîç Th√¥ng tin debug:')
        console.log(`   - DATABASE_URL exists: ${!!process.env.DATABASE_URL}`)
        console.log(`   - Node version: ${process.version}`)
        console.log(`   - Platform: ${process.platform}`)

    } finally {
        await prisma.$disconnect()
    }
}

// === CH·∫†Y SCRIPT ===
kiemTraVaTaoDuLieu()
    .then(() => {
        console.log('\n‚úÖ Ki·ªÉm tra database ho√†n t·∫•t th√†nh c√¥ng!')
        console.log('üí° B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi: ankunstudio@ankun.dev / @iamAnKun')
    })
    .catch((error) => {
        console.error('\n‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh:', error.message)
        console.error('Chi ti·∫øt l·ªói:', error)
        process.exit(1)
    })
