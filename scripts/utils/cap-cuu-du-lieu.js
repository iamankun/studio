// @ts-check
/**
 * Database utility cho scripts
 * File: scripts/utils/db-helper.js
 */
import { neon } from "@neondatabase/serverless";
import { logToFile } from './env-loader.js';

/**
 * K·∫øt n·ªëi v·ªõi database v√† tr·∫£ v·ªÅ client ƒë·ªÉ th·ª±c hi·ªán query
 * @returns {Promise<any>} Database client
 */
export async function connectToDatabase() {
    try {
        const DATABASE_URL = process.env.DATABASE_URL;
        if (!DATABASE_URL) {
            throw new Error('DATABASE_URL not found in environment variables');
        }
        console.log('üîå ƒêang k·∫øt n·ªëi v·ªõi database...');
        const sql = neon(DATABASE_URL);
        return sql;
    } catch (error) {
        console.error(`‚ùå L·ªói khi k·∫øt n·ªëi database: ${error.message}`);
        await logToFile(`Error connecting to database: ${error.message}`, 'db-connection-errors.log');
        throw error;
    }
}

/**
 * Ki·ªÉm tra k·∫øt n·ªëi database
 * @returns {Promise<boolean>} true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
 */
export async function testDatabaseConnection() {
    try {
        const sql = await connectToDatabase();
        // Ch·ªâ th·ª±c hi·ªán query ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi, kh√¥ng c·∫ßn k·∫øt qu·∫£
        await sql`SELECT 1 as connection_test`;
        console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!');
        return true;
    } catch (error) {
        console.error(`‚ùå L·ªói k·∫øt n·ªëi database: ${error.message}`);
        await logToFile(`Database connection test failed: ${error.message}`, 'db-connection-errors.log');
        return false;
    }
}

/**
 * Ki·ªÉm tra b·∫£ng c√≥ t·ªìn t·∫°i trong database kh√¥ng
 * @param {string} tableName - T√™n b·∫£ng c·∫ßn ki·ªÉm tra
 * @returns {Promise<boolean>} true n·∫øu b·∫£ng t·ªìn t·∫°i
 */
export async function checkTableExists(tableName) {
    try {
        const sql = await connectToDatabase();
        const result = await sql`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public'
                AND table_name = ${tableName}
            ) as exists
        `;
        return result[0]?.exists || false;
    } catch (error) {
        console.error(`‚ùå L·ªói khi ki·ªÉm tra b·∫£ng ${tableName}: ${error.message}`);
        await logToFile(`Error checking table ${tableName}: ${error.message}`, 'db-errors.log');
        return false;
    }
}

/**
 * L·∫•y c·∫•u tr√∫c c·ªßa b·∫£ng
 * @param {string} tableName - T√™n b·∫£ng c·∫ßn l·∫•y c·∫•u tr√∫c
 * @returns {Promise<Array<any>>} Th√¥ng tin c√°c c·ªôt c·ªßa b·∫£ng
 */
export async function getTableStructure(tableName) {
    try {
        const sql = await connectToDatabase();
        const columns = await sql`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns
            WHERE table_schema = 'public'
            AND table_name = ${tableName}
            ORDER BY ordinal_position
        `;
        return columns;
    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y c·∫•u tr√∫c b·∫£ng ${tableName}: ${error.message}`);
        await logToFile(`Error getting structure for table ${tableName}: ${error.message}`, 'db-errors.log');
        return [];
    }
}

/**
 * ƒê·∫øm s·ªë l∆∞·ª£ng record trong b·∫£ng
 * @param {string} tableName - T√™n b·∫£ng
 * @returns {Promise<number>} S·ªë l∆∞·ª£ng record
 */
export async function countRecords(tableName) {
    try {
        const sql = await connectToDatabase();
        const result = await sql`
            SELECT COUNT(*) as count FROM ${sql(tableName)}
        `;
        return parseInt(result[0]?.count || '0');
    } catch (error) {
        console.error(`‚ùå L·ªói khi ƒë·∫øm record trong b·∫£ng ${tableName}: ${error.message}`);
        await logToFile(`Error counting records in ${tableName}: ${error.message}`, 'db-errors.log');
        return 0;
    }
}

/**
 * L·∫•y danh s√°ch c√°c b·∫£ng trong database
 * @returns {Promise<Array<string>>} Danh s√°ch t√™n c√°c b·∫£ng
 */
export async function listTables() {
    try {
        const sql = await connectToDatabase();
        const tables = await sql`
            SELECT table_name
            FROM information_schema.tables
            WHERE table_schema = 'public'
            AND table_type = 'BASE TABLE'
            ORDER BY table_name
        `;
        return tables.map(t => t.table_name);
    } catch (error) {
        console.error(`‚ùå L·ªói khi l·∫•y danh s√°ch b·∫£ng: ${error.message}`);
        await logToFile(`Error listing tables: ${error.message}`, 'db-errors.log');
        return [];
    }
}
