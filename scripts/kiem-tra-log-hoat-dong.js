// @ts-check
/**
 * Script ki·ªÉm tra v√† qu·∫£n l√Ω nh·∫≠t k√Ω ho·∫°t ƒë·ªông trong h·ªá th·ªëng
 * Ch·∫°y: node scripts/check-activity-logs.js
 */
import {
    connectToDatabase,
    checkTableExists,
    getTableStructure,
    countRecords
} from './utils/db-helper.js';
import { loadEnvVariables, logToFile } from './utils/env-loader.js';

// Load environment variables
loadEnvVariables();

// Ki·ªÉm tra b·∫£ng activity_log
async function checkActivityLogs() {
    console.log('üîç Ki·ªÉm tra nh·∫≠t k√Ω ho·∫°t ƒë·ªông (activity_log)...');
    console.log('='.repeat(50));

    try {
        // Ki·ªÉm tra k·∫øt n·ªëi database
        const sql = await connectToDatabase();

        // Ki·ªÉm tra b·∫£ng activity_log t·ªìn t·∫°i kh√¥ng
        const tableExists = await checkTableExists('activity_log');

        if (!tableExists) {
            console.error('‚ùå B·∫£ng activity_log kh√¥ng t·ªìn t·∫°i trong database!');
            await logToFile('B·∫£ng activity_log kh√¥ng t·ªìn t·∫°i!', 'activity-log-check.log');
            return;
        }

        console.log('‚úÖ B·∫£ng activity_log t·ªìn t·∫°i');

        // L·∫•y c·∫•u tr√∫c b·∫£ng
        const columns = await getTableStructure('activity_log');

        console.log('\n=== C·∫•u tr√∫c b·∫£ng activity_log ===');
        columns.forEach(col => {
            console.log(`- ${col.column_name}: ${col.data_type} (${col.is_nullable === 'YES' ? 'nullable' : 'not null'})`);
        });

        // ƒê·∫øm s·ªë l∆∞·ª£ng log
        const logCount = await countRecords('activity_log');
        console.log(`\n‚úÖ T·ªïng s·ªë log: ${logCount}`);

        // L·∫•y danh s√°ch log g·∫ßn ƒë√¢y
        const recentLogs = await sql`
            SELECT * FROM activity_log
            ORDER BY created_at DESC
            LIMIT 10
        `;

        console.log('\n=== Log g·∫ßn ƒë√¢y ===');
        if (recentLogs.length > 0) {
            recentLogs.forEach((log, index) => {
                console.log(`\n${index + 1}. ID: ${log.id}`);
                console.log(`   User: ${log.username || 'N/A'}`);
                console.log(`   Action: ${log.action || 'N/A'}`);
                console.log(`   Details: ${log.details || 'N/A'}`);
                console.log(`   Time: ${log.created_at || 'N/A'}`);
            });
        } else {
            console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong b·∫£ng activity_log');
        }

        // Th·ªëng k√™ theo user
        console.log('\n=== Th·ªëng k√™ theo user ===');
        const userStats = await sql`
            SELECT username, COUNT(*) as count 
            FROM activity_log 
            GROUP BY username 
            ORDER BY count DESC
            LIMIT 5
        `;

        if (userStats.length > 0) {
            userStats.forEach(stat => {
                console.log(`- ${stat.username}: ${stat.count} logs`);
            });
        }

        // Th·ªëng k√™ theo lo·∫°i h√†nh ƒë·ªông
        console.log('\n=== Th·ªëng k√™ theo lo·∫°i h√†nh ƒë·ªông ===');
        const actionStats = await sql`
            SELECT action, COUNT(*) as count 
            FROM activity_log 
            GROUP BY action 
            ORDER BY count DESC
            LIMIT 10
        `;

        if (actionStats.length > 0) {
            actionStats.forEach(stat => {
                console.log(`- ${stat.action}: ${stat.count} logs`);
            });
        }

        console.log('\n‚úÖ Ki·ªÉm tra ho√†n t·∫•t!');
        console.log('ƒê√£ ghi log v√†o th∆∞ m·ª•c logs/');

        // Ghi log
        await logToFile(`Ki·ªÉm tra activity_log: ${logCount} records found`, 'activity-log-check.log');

    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
        await logToFile(`Error: ${error.message}`, 'activity-log-check.log');
    }
}

// Export functions - ES Module compatible
export { checkActivityLogs };

// Auto-run if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
    checkActivityLogs().catch(console.error);
}
