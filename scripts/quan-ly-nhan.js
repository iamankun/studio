/**
 * C√¥ng c·ª• qu·∫£n l√Ω v√† c·∫≠p nh·∫≠t label trong database
 * 
 * Script n√†y th·ª±c hi·ªán:
 * 1. Li·ªát k√™ c√°c label hi·ªán c√≥
 * 2. Ki·ªÉm tra tr·∫°ng th√°i g√°n nh√£n
 * 3. C·∫≠p nh·∫≠t ho·∫∑c g√°n nh√£n m·ªõi
 * 4. Xu·∫•t b√°o c√°o g√°n nh√£n
 */

import dotenv from 'dotenv';
import pg from 'pg';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import { Command } from 'commander';

const { Pool } = pg;
const program = new Command();

// Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng
dotenv.config({ path: '.env.local' });

// C√°c bi·∫øn m√¥i tr∆∞·ªùng
const DATABASE_URL = process.env.DATABASE_URL;

// Khai b√°o l·ªánh CLI
program
    .name('quan-ly-label')
    .description('C√¥ng c·ª• qu·∫£n l√Ω v√† c·∫≠p nh·∫≠t label trong database')
    .version('1.0.0');

program
    .command('list')
    .description('Li·ªát k√™ t·∫•t c·∫£ c√°c label hi·ªán c√≥')
    .action(listLabels);

program
    .command('check <labelId>')
    .description('Ki·ªÉm tra tr·∫°ng th√°i c·ªßa m·ªôt label c·ª• th·ªÉ')
    .action(checkLabel);

program
    .command('report')
    .description('Xu·∫•t b√°o c√°o g√°n nh√£n')
    .option('-o, --output <file>', 'ƒê∆∞·ªùng d·∫´n file xu·∫•t b√°o c√°o')
    .action(generateReport);

program
    .command('update <labelId>')
    .description('C·∫≠p nh·∫≠t th√¥ng tin cho m·ªôt label')
    .option('-n, --name <name>', 'T√™n m·ªõi cho label')
    .option('-d, --description <description>', 'M√¥ t·∫£ m·ªõi cho label')
    .option('-s, --status <status>', 'Tr·∫°ng th√°i m·ªõi (active/inactive)')
    .action(updateLabel);

program
    .command('assign <userId> <labelId>')
    .description('G√°n nh√£n cho m·ªôt ng∆∞·ªùi d√πng')
    .action(assignLabel);

program.parse(process.argv);

// N·∫øu kh√¥ng c√≥ l·ªánh, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
if (!process.argv.slice(2).length) {
    program.outputHelp();
}

async function connectDatabase() {
    if (!DATABASE_URL) {
        console.error(chalk.red('‚ùå Kh√¥ng t√¨m th·∫•y DATABASE_URL trong file .env'));
        process.exit(1);
    }

    return new Pool({
        connectionString: DATABASE_URL,
    });
}

async function listLabels() {
    console.log(chalk.blue('üìã ƒêang li·ªát k√™ c√°c label...'));

    const pool = await connectDatabase();

    try {
        const result = await pool.query(`
      SELECT 
        l.id, 
        l.name, 
        l.description, 
        l.status,
        l.created_at,
        COUNT(la.id) as assignments_count
      FROM 
        label_templates l
      LEFT JOIN 
        label_assignments la ON l.id = la.label_id
      GROUP BY 
        l.id
      ORDER BY 
        l.name
    `);

        if (result.rows.length === 0) {
            console.log(chalk.yellow('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y label n√†o'));
            return;
        }

        console.log(chalk.green(`‚úÖ T√¨m th·∫•y ${result.rows.length} label:`));

        console.log('\n| ID | T√™n | M√¥ t·∫£ | Tr·∫°ng th√°i | Ng√†y t·∫°o | S·ªë l·∫ßn g√°n |');
        console.log('|----|-----|-------|------------|----------|------------|');

        result.rows.forEach(label => {
            console.log(`| ${label.id} | ${label.name} | ${label.description || '-'} | ${label.status} | ${new Date(label.created_at).toLocaleDateString()} | ${label.assignments_count} |`);
        });

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi l·∫•y danh s√°ch label: ${error.message}`));
    } finally {
        await pool.end();
    }
}

async function checkLabel(labelId) {
    console.log(chalk.blue(`üîç ƒêang ki·ªÉm tra label ID: ${labelId}...`));

    const pool = await connectDatabase();

    try {
        // Ki·ªÉm tra th√¥ng tin label
        const labelResult = await pool.query(`
      SELECT * FROM label_templates WHERE id = $1
    `, [labelId]);

        if (labelResult.rows.length === 0) {
            console.log(chalk.red(`‚ùå Kh√¥ng t√¨m th·∫•y label v·ªõi ID: ${labelId}`));
            return;
        }

        const label = labelResult.rows[0];

        console.log(chalk.green('‚úÖ Th√¥ng tin label:'));
        console.log(`- ID: ${label.id}`);
        console.log(`- T√™n: ${label.name}`);
        console.log(`- M√¥ t·∫£: ${label.description || 'N/A'}`);
        console.log(`- Tr·∫°ng th√°i: ${label.status}`);
        console.log(`- Ng√†y t·∫°o: ${new Date(label.created_at).toLocaleString()}`);

        // Ki·ªÉm tra c√°c g√°n nh√£n
        const assignmentsResult = await pool.query(`
      SELECT 
        la.id, 
        la.user_id, 
        u.username, 
        la.assigned_at, 
        la.assigned_by
      FROM 
        label_assignments la
      LEFT JOIN 
        users u ON la.user_id = u.id
      WHERE 
        la.label_id = $1
      ORDER BY 
        la.assigned_at DESC
    `, [labelId]);

        if (assignmentsResult.rows.length === 0) {
            console.log(chalk.yellow('\n‚ö†Ô∏è Label n√†y ch∆∞a ƒë∆∞·ª£c g√°n cho b·∫•t k·ª≥ ng∆∞·ªùi d√πng n√†o'));
            return;
        }

        console.log(chalk.green(`\n‚úÖ Label n√†y ƒë√£ ƒë∆∞·ª£c g√°n cho ${assignmentsResult.rows.length} ng∆∞·ªùi d√πng:`));

        console.log('\n| Assignment ID | User ID | Username | Ng√†y g√°n | G√°n b·ªüi |');
        console.log('|---------------|---------|----------|----------|---------|');

        assignmentsResult.rows.forEach(assignment => {
            console.log(`| ${assignment.id} | ${assignment.user_id} | ${assignment.username || 'N/A'} | ${new Date(assignment.assigned_at).toLocaleString()} | ${assignment.assigned_by || 'N/A'} |`);
        });

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi ki·ªÉm tra label: ${error.message}`));
    } finally {
        await pool.end();
    }
}

async function generateReport(options) {
    console.log(chalk.blue('üìä ƒêang t·∫°o b√°o c√°o g√°n nh√£n...'));

    const pool = await connectDatabase();

    try {
        const result = await pool.query(`
      SELECT 
        lt.id as label_id,
        lt.name as label_name,
        lt.description,
        lt.status,
        COUNT(la.id) as assignments_count,
        string_agg(DISTINCT u.username, ', ') as assigned_users
      FROM 
        label_templates lt
      LEFT JOIN 
        label_assignments la ON lt.id = la.label_id
      LEFT JOIN 
        users u ON la.user_id = u.id
      GROUP BY 
        lt.id
      ORDER BY 
        assignments_count DESC
    `);

        const report = {
            generated_at: new Date().toISOString(),
            total_labels: result.rows.length,
            labels: result.rows
        };

        // Hi·ªÉn th·ªã b√°o c√°o tr√™n console
        console.log(chalk.green(`‚úÖ B√°o c√°o g√°n nh√£n (${result.rows.length} labels):`));

        result.rows.forEach(row => {
            console.log(`\n${chalk.bold(row.label_name)} (ID: ${row.label_id})`);
            console.log(`- M√¥ t·∫£: ${row.description || 'N/A'}`);
            console.log(`- Tr·∫°ng th√°i: ${row.status}`);
            console.log(`- S·ªë l·∫ßn g√°n: ${row.assignments_count}`);
            console.log(`- Ng∆∞·ªùi d√πng ƒë∆∞·ª£c g√°n: ${row.assignments_count > 0 ? row.assigned_users : 'Kh√¥ng c√≥'}`);
        });

        // Xu·∫•t b√°o c√°o ra file n·∫øu c√≥ ch·ªâ ƒë·ªãnh
        if (options.output) {
            const outputPath = path.resolve(options.output);
            fs.writeFileSync(outputPath, JSON.stringify(report, null, 2));
            console.log(chalk.green(`\n‚úÖ ƒê√£ xu·∫•t b√°o c√°o ra file: ${outputPath}`));
        }

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi t·∫°o b√°o c√°o: ${error.message}`));
    } finally {
        await pool.end();
    }
}

async function updateLabel(labelId, options) {
    console.log(chalk.blue(`üîÑ ƒêang c·∫≠p nh·∫≠t label ID: ${labelId}...`));

    if (!options.name && !options.description && !options.status) {
        console.log(chalk.yellow('‚ö†Ô∏è Kh√¥ng c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ c·∫≠p nh·∫≠t'));
        return;
    }

    const pool = await connectDatabase();

    try {
        // Ki·ªÉm tra label t·ªìn t·∫°i
        const checkResult = await pool.query('SELECT * FROM label_templates WHERE id = $1', [labelId]);

        if (checkResult.rows.length === 0) {
            console.log(chalk.red(`‚ùå Kh√¥ng t√¨m th·∫•y label v·ªõi ID: ${labelId}`));
            return;
        }

        // Chu·∫©n b·ªã c√¢u truy v·∫•n update
        const updates = [];
        const values = [];
        let paramIndex = 1;

        if (options.name) {
            updates.push(`name = $${paramIndex}`);
            values.push(options.name);
            paramIndex++;
        }

        if (options.description) {
            updates.push(`description = $${paramIndex}`);
            values.push(options.description);
            paramIndex++;
        }

        if (options.status) {
            if (!['active', 'inactive'].includes(options.status)) {
                console.log(chalk.red('‚ùå Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: active ho·∫∑c inactive'));
                return;
            }

            updates.push(`status = $${paramIndex}`);
            values.push(options.status);
            paramIndex++;
        }

        updates.push(`updated_at = $${paramIndex}`);
        values.push(new Date());
        paramIndex++;

        values.push(labelId);

        // Th·ª±c hi·ªán c·∫≠p nh·∫≠t
        const updateQuery = `
      UPDATE label_templates 
      SET ${updates.join(', ')} 
      WHERE id = $${paramIndex}
      RETURNING *
    `;

        const updateResult = await pool.query(updateQuery, values);

        const updatedLabel = updateResult.rows[0];

        console.log(chalk.green('‚úÖ ƒê√£ c·∫≠p nh·∫≠t label th√†nh c√¥ng:'));
        console.log(`- ID: ${updatedLabel.id}`);
        console.log(`- T√™n: ${updatedLabel.name}`);
        console.log(`- M√¥ t·∫£: ${updatedLabel.description || 'N/A'}`);
        console.log(`- Tr·∫°ng th√°i: ${updatedLabel.status}`);
        console.log(`- C·∫≠p nh·∫≠t l√∫c: ${new Date(updatedLabel.updated_at).toLocaleString()}`);

        // Ghi nh·∫≠t k√Ω ho·∫°t ƒë·ªông
        await pool.query(`
      INSERT INTO nhat_ky_studio (username, action, description, created_at)
      VALUES ($1, $2, $3, $4)
    `, [
            'system',
            'update_label',
            `C·∫≠p nh·∫≠t label ID ${labelId}: ${JSON.stringify(options)}`,
            new Date()
        ]);

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi c·∫≠p nh·∫≠t label: ${error.message}`));
    } finally {
        await pool.end();
    }
}

async function assignLabel(userId, labelId) {
    console.log(chalk.blue(`üîÑ ƒêang g√°n label ID: ${labelId} cho user ID: ${userId}...`));

    const pool = await connectDatabase();

    try {
        // Ki·ªÉm tra user t·ªìn t·∫°i
        const userResult = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);

        if (userResult.rows.length === 0) {
            console.log(chalk.red(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: ${userId}`));
            return;
        }

        // Ki·ªÉm tra label t·ªìn t·∫°i
        const labelResult = await pool.query('SELECT * FROM label_templates WHERE id = $1', [labelId]);

        if (labelResult.rows.length === 0) {
            console.log(chalk.red(`‚ùå Kh√¥ng t√¨m th·∫•y label v·ªõi ID: ${labelId}`));
            return;
        }

        // Ki·ªÉm tra ƒë√£ g√°n tr∆∞·ªõc ƒë√≥ ch∆∞a
        const existingResult = await pool.query(
            'SELECT * FROM label_assignments WHERE user_id = $1 AND label_id = $2',
            [userId, labelId]
        );

        if (existingResult.rows.length > 0) {
            console.log(chalk.yellow(`‚ö†Ô∏è Label n√†y ƒë√£ ƒë∆∞·ª£c g√°n cho ng∆∞·ªùi d√πng tr∆∞·ªõc ƒë√≥ (Assignment ID: ${existingResult.rows[0].id})`));
            return;
        }

        // Th·ª±c hi·ªán g√°n nh√£n
        const insertResult = await pool.query(`
      INSERT INTO label_assignments (user_id, label_id, assigned_at, assigned_by)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `, [
            userId,
            labelId,
            new Date(),
            'system'
        ]);

        const assignment = insertResult.rows[0];

        console.log(chalk.green('‚úÖ ƒê√£ g√°n label th√†nh c√¥ng:'));
        console.log(`- Assignment ID: ${assignment.id}`);
        console.log(`- User ID: ${assignment.user_id}`);
        console.log(`- Username: ${userResult.rows[0].username}`);
        console.log(`- Label ID: ${assignment.label_id}`);
        console.log(`- Label name: ${labelResult.rows[0].name}`);
        console.log(`- Ng√†y g√°n: ${new Date(assignment.assigned_at).toLocaleString()}`);

        // Ghi nh·∫≠t k√Ω ho·∫°t ƒë·ªông
        await pool.query(`
      INSERT INTO nhat_ky_studio (username, action, description, created_at)
      VALUES ($1, $2, $3, $4)
    `, [
            'system',
            'assign_label',
            `G√°n label ${labelResult.rows[0].name} (ID: ${labelId}) cho ng∆∞·ªùi d√πng ${userResult.rows[0].username} (ID: ${userId})`,
            new Date()
        ]);

    } catch (error) {
        console.error(chalk.red(`‚ùå L·ªói khi g√°n label: ${error.message}`));
    } finally {
        await pool.end();
    }
}
