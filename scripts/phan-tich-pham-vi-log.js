// @ts-check
/**
 * Script ƒë·ªÉ ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t n∆°i c·∫ßn th√™m log ho·∫°t ƒë·ªông
 */

import fs from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// File v√† th∆∞ m·ª•c ƒë∆∞·ª£c lo·∫°i tr·ª´
const EXCLUDED_DIRS = [
    'node_modules',
    '.next',
    'public',
    'build',
    'dist',
    'logs'
];

const EXCLUDED_FILES = [
    '.env',
    '.gitignore',
    'package-lock.json',
    'yarn.lock'
];

// C√°c pattern ƒë·ªÉ t√¨m ki·∫øm c√°c components c·∫ßn th√™m log
const PATTERNS = {
    BUTTON_CLICK: /onClick\s*=\s*\{/g,
    FORM_SUBMIT: /onSubmit\s*=\s*\{/g,
    AUTH_OPERATIONS: /(login|register|logout|authenticate|authorize)/gi,
    MODAL_DIALOG: /(Modal|Dialog|showModal)/g,
    API_CALLS: /(fetch\(|axios\.|api\.)/g,
    STATE_CHANGES: /(useState|useReducer|dispatch\()/g,
    USER_INPUT: /(onChange|onInput|onKeyDown|onBlur)/g
};

// C√°c file ƒë√£ c√≥ t√≠ch h·ª£p log
const FILES_WITH_LOGS = [
    'components/auth/login-view.tsx',
    'components/auth/register-view.tsx',
    'components/views/upload-form-view.tsx',
    'lib/client-activity-log.js',
    'lib/nhat-ky-studio.js',
    'app/api/activity-log/route.js'
];

/**
 * Ki·ªÉm tra xem file c√≥ ch·ª©a import log kh√¥ng
 * @param {string} content - N·ªôi dung file
 * @returns {boolean}
 */
function hasLogImport(content) {
    return content.includes('logActivity') ||
        content.includes('logUIInteraction') ||
        content.includes('logLogin') ||
        content.includes('logPageView') ||
        content.includes('logSubmissionActivity') ||
        content.includes('addActivityLog');
}

/**
 * Ki·ªÉm tra xem file c√≥ g·ªçi h√†m log kh√¥ng
 * @param {string} content - N·ªôi dung file
 * @returns {boolean}
 */
function hasLogCalls(content) {
    return content.includes('logActivity(') ||
        content.includes('logUIInteraction(') ||
        content.includes('logLogin(') ||
        content.includes('logPageView(') ||
        content.includes('logSubmissionActivity(') ||
        content.includes('addActivityLog(');
}

/**
 * ƒê·∫øm s·ªë l∆∞·ª£ng pattern kh·ªõp trong file
 * @param {string} content - N·ªôi dung file
 * @param {RegExp} pattern - Pattern c·∫ßn t√¨m
 * @returns {number}
 */
function countPatternMatches(content, pattern) {
    const matches = content.match(pattern);
    return matches ? matches.length : 0;
}

/**
 * ƒê·ªçc file v√† ki·ªÉm tra n·ªôi dung
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n file
 * @returns {Promise<{needsLogging: boolean, hasImport: boolean, hasLogCalls: boolean, patterns: Object}>}
 */
async function analyzeFile(filePath) {
    try {
        const content = await fs.readFile(filePath, 'utf8');

        // Ki·ªÉm tra import v√† g·ªçi h√†m log
        const hasImport = hasLogImport(content);
        const hasLogs = hasLogCalls(content);

        // ƒê·∫øm c√°c pattern
        const patternMatches = {};
        let totalPatterns = 0;

        for (const [name, pattern] of Object.entries(PATTERNS)) {
            const count = countPatternMatches(content, pattern);
            patternMatches[name] = count;
            totalPatterns += count;
        }

        // File c·∫ßn th√™m log n·∫øu c√≥ pattern nh∆∞ng kh√¥ng c√≥ log
        const needsLogging = totalPatterns > 0 && !hasLogs;

        return {
            needsLogging,
            hasImport,
            hasLogCalls: hasLogs,
            patterns: patternMatches
        };
    } catch (error) {
        console.error(`L·ªói ph√¢n t√≠ch file ${filePath}:`, error.message);
        return {
            needsLogging: false,
            hasImport: false,
            hasLogCalls: false,
            patterns: {}
        };
    }
}

/**
 * Qu√©t th∆∞ m·ª•c ƒë·ªÉ t√¨m c√°c file c·∫ßn ph√¢n t√≠ch
 * @param {string} dir - Th∆∞ m·ª•c g·ªëc
 * @returns {Promise<string[]>} - Danh s√°ch ƒë∆∞·ªùng d·∫´n file
 */
async function scanDirectory(dir) {
    const files = [];

    async function scan(directory) {
        const entries = await fs.readdir(directory, { withFileTypes: true });

        for (const entry of entries) {
            const fullPath = path.join(directory, entry.name);

            // B·ªè qua c√°c th∆∞ m·ª•c v√† file b·ªã lo·∫°i tr·ª´
            const relativePath = path.relative(process.cwd(), fullPath);
            const dirName = entry.isDirectory() ? entry.name : path.dirname(relativePath);

            if (EXCLUDED_DIRS.some(excluded => dirName.includes(excluded))) {
                continue;
            }

            if (entry.isDirectory()) {
                await scan(fullPath);
            } else {
                // Ch·ªâ x·ª≠ l√Ω c√°c file .js, .ts, .jsx, .tsx
                if (fullPath.match(/\.(js|ts|jsx|tsx)$/) &&
                    !EXCLUDED_FILES.some(excluded => fullPath.endsWith(excluded))) {
                    files.push(relativePath);
                }
            }
        }
    }

    await scan(dir);
    return files;
}

/**
 * T√¨m c√°c component kh√¥ng c√≥ log
 * @returns {Promise<void>}
 */
async function findComponentsWithoutLogs() {
    try {
        console.log('üîç Ph√¢n t√≠ch c·∫•u tr√∫c ·ª©ng d·ª•ng ƒë·ªÉ t√¨m n∆°i c·∫ßn th√™m log ho·∫°t ƒë·ªông');
        console.log('='.repeat(80));

        // Qu√©t th∆∞ m·ª•c ƒë·ªÉ t√¨m c√°c file c·∫ßn ph√¢n t√≠ch
        const files = await scanDirectory(process.cwd());
        console.log(`T√¨m th·∫•y ${files.length} file ƒë·ªÉ ph√¢n t√≠ch`);

        // Ph√¢n t√≠ch t·ª´ng file
        const results = [];

        for (const file of files) {
            // B·ªè qua c√°c file ƒë√£ bi·∫øt c√≥ log
            if (FILES_WITH_LOGS.some(logFile => file.includes(logFile))) {
                continue;
            }

            const analysis = await analyzeFile(file);

            if (analysis.needsLogging) {
                results.push({
                    file,
                    ...analysis
                });
            }
        }

        // S·∫Øp x·∫øp k·∫øt qu·∫£ theo m·ª©c ƒë·ªô ∆∞u ti√™n
        results.sort((a, b) => {
            // T√≠nh t·ªïng pattern cho m·ªói file
            const sumA = Object.values(a.patterns).reduce((sum, count) => sum + count, 0);
            const sumB = Object.values(b.patterns).reduce((sum, count) => sum + count, 0);

            return sumB - sumA;
        });

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        console.log('\n=== C√ÅC COMPONENT C·∫¶N TH√äM LOG HO·∫†T ƒê·ªòNG ===');

        if (results.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y component n√†o c·∫ßn th√™m log ho·∫°t ƒë·ªông.');
        } else {
            console.log(`T√¨m th·∫•y ${results.length} component c·∫ßn th√™m log ho·∫°t ƒë·ªông:\n`);

            for (const [index, result] of results.entries()) {
                console.log(`${index + 1}. ${result.file}`);

                // Hi·ªÉn th·ªã c√°c pattern ƒë∆∞·ª£c t√¨m th·∫•y
                const patterns = Object.entries(result.patterns)
                    .filter(([_, count]) => count > 0)
                    .map(([name, count]) => `${name}: ${count}`)
                    .join(', ');

                console.log(`   - Ph√°t hi·ªán: ${patterns}`);

                // G·ª£i √Ω lo·∫°i log c·∫ßn th√™m
                const suggestions = [];

                if (result.patterns.BUTTON_CLICK > 0 || result.patterns.USER_INPUT > 0) {
                    suggestions.push('logUIInteraction()');
                }

                if (result.patterns.FORM_SUBMIT > 0) {
                    suggestions.push('logActivity() ho·∫∑c logUIInteraction()');
                }

                if (result.patterns.AUTH_OPERATIONS > 0) {
                    suggestions.push('logLogin(), logRegistration()');
                }

                if (result.patterns.API_CALLS > 0) {
                    suggestions.push('logActivity()');
                }

                if (result.patterns.MODAL_DIALOG > 0) {
                    suggestions.push('logUIInteraction()');
                }

                console.log(`   - G·ª£i √Ω: Th√™m ${suggestions.join(', ')}`);
                console.log('');
            }

            // G·ª£i √Ω c√°ch th√™m log
            console.log('\n=== C√ÅCH TH√äM LOG HO·∫†T ƒê·ªòNG ===');
            console.log('1. Import c√°c h√†m log:');
            console.log('   ```');
            console.log('   import { logUIInteraction, logActivity } from "@/lib/client-activity-log";');
            console.log('   ```');

            console.log('\n2. Th√™m log cho c√°c s·ª± ki·ªán:');
            console.log('   ```');
            console.log('   // Cho n√∫t');
            console.log('   onClick={() => {');
            console.log('     logUIInteraction("button", "save-profile", { section: "settings" });');
            console.log('     // X·ª≠ l√Ω logic');
            console.log('   }}');
            console.log('   ```');

            console.log('\n3. Th√™m log cho form:');
            console.log('   ```');
            console.log('   const handleSubmit = async (data) => {');
            console.log('     logUIInteraction("form", "update-profile", { fields: Object.keys(data) });');
            console.log('     // X·ª≠ l√Ω logic');
            console.log('   }');
            console.log('   ```');

            console.log('\nXem th√™m chi ti·∫øt trong docs/activity-log-system.md');
        }

    } catch (error) {
        console.error('L·ªói:', error.message);
    }
}

// Ch·∫°y ph√¢n t√≠ch
if (import.meta.url === `file://${process.argv[1]}`) {
    findComponentsWithoutLogs().catch(console.error);
}

export { findComponentsWithoutLogs };
