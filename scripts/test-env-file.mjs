// K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi neon-db s·ª≠ d·ª•ng file .env.test
import { neon } from '@neondatabase/serverless';
import * as dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

// Th√¥ng b√°o kh·ªüi ƒë·∫ßu
console.log('üîå Test k·∫øt n·ªëi Neon PostgreSQL v·ªõi file .env.test');

// L·∫•y ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file .env.test
const envTestPath = path.resolve(__dirname, '.env.test');
console.log(`ƒê∆∞·ªùng d·∫´n .env.test: ${envTestPath}`);
console.log(`File t·ªìn t·∫°i: ${fs.existsSync(envTestPath) ? 'C√≥' : 'Kh√¥ng'}`);

// ƒê·ªçc file .env.test tr·ª±c ti·∫øp
try {
    // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env.test
    const result = dotenv.config({ path: envTestPath });
    console.log('K·∫øt qu·∫£ ƒë·ªçc file:', result.parsed ? 'Th√†nh c√¥ng' : 'Th·∫•t b·∫°i');
    
    if (result.parsed) {
        console.log('C√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë·ªçc:');
        Object.keys(result.parsed).forEach(key => {
            if (key === 'DATABASE_URL') {
                console.log(`- ${key}: ${result.parsed[key].substring(0, 20)}...`);
            } else {
                console.log(`- ${key}: [C√≥ gi√° tr·ªã]`);
            }
        });
    }
    
    // Ki·ªÉm tra DATABASE_URL
    const dbUrl = process.env.DATABASE_URL;
    console.log('\nKi·ªÉm tra DATABASE_URL:');
    console.log(dbUrl ? `‚úÖ ƒê√£ t√¨m th·∫•y: ${dbUrl.substring(0, 20)}...` : '‚ùå Kh√¥ng t√¨m th·∫•y');
    
    if (dbUrl) {
        try {
            console.log('\nTh·ª≠ k·∫øt n·ªëi ƒë·∫øn Neon...');
            const sql = neon(dbUrl);
            
            // Th·ª±c hi·ªán truy v·∫•n ƒë∆°n gi·∫£n
            const result = await sql`SELECT current_timestamp as now`;
            console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
            console.log(`Th·ªùi gian m√°y ch·ªß: ${result[0].now}`);
            
            // Ki·ªÉm tra b·∫£ng
            try {
                console.log('\nKi·ªÉm tra b·∫£ng nhat_ky_studio:');
                const tableExists = await sql`
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public'
                        AND table_name = 'nhat_ky_studio'
                    ) as exists
                `;
                
                if (tableExists[0].exists) {
                    console.log('‚úÖ B·∫£ng nhat_ky_studio t·ªìn t·∫°i');
                    // T·∫°o b·∫£n ghi test
                    const timestamp = new Date().toISOString();
                    await sql`
                        INSERT INTO nhat_ky_studio (
                            username, action, description, ip_address, user_agent, 
                            entity_type, status, result, details
                        ) VALUES (
                            'test-user', 'test', 'Test k·∫øt n·ªëi t·ª´ .env.test', '127.0.0.1',
                            'Test Script', 'test', 'success', '200', 
                            ${{timestamp, note: 'Ki·ªÉm tra t·ª´ file .env.test'}}
                        )
                    `;
                    console.log('‚úÖ ƒê√£ th√™m b·∫£n ghi test v√†o b·∫£ng nhat_ky_studio');
                } else {
                    console.log('‚ùå B·∫£ng nhat_ky_studio kh√¥ng t·ªìn t·∫°i');
                    console.log('C·∫ßn t·∫°o b·∫£ng n√†y cho h·ªá th·ªëng log API');
                }
            } catch (tableError) {
                console.error('‚ùå L·ªói khi ki·ªÉm tra b·∫£ng:', tableError.message);
            }
            
        } catch (dbError) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Neon:', dbError.message);
            
            if (dbError.message.includes('no pg_hba.conf entry')) {
                console.log('üëâ L·ªói quy·ªÅn truy c·∫≠p. Ki·ªÉm tra IP trong Neon dashboard');
            } else if (dbError.message.includes('password authentication failed')) {
                console.log('üëâ Sai username ho·∫∑c password');
            } else if (dbError.message.includes('database') && dbError.message.includes('does not exist')) {
                console.log('üëâ Database kh√¥ng t·ªìn t·∫°i');
            }
        }
    } else {
        console.log('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi v√¨ kh√¥ng t√¨m th·∫•y DATABASE_URL');
    }
    
} catch (error) {
    console.error('‚ùå L·ªói khi ƒë·ªçc file .env.test:', error.message);
}

console.log('\nüèÅ Ki·ªÉm tra ho√†n t·∫•t');
