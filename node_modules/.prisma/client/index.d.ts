
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Label
 * 
 */
export type Label = $Result.DefaultSelection<Prisma.$LabelPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model Track
 * 
 */
export type Track = $Result.DefaultSelection<Prisma.$TrackPayload>
/**
 * Model Video
 * 
 */
export type Video = $Result.DefaultSelection<Prisma.$VideoPayload>
/**
 * Model FileFolder
 * 
 */
export type FileFolder = $Result.DefaultSelection<Prisma.$FileFolderPayload>
/**
 * Model SubmissionContributor
 * 
 */
export type SubmissionContributor = $Result.DefaultSelection<Prisma.$SubmissionContributorPayload>
/**
 * Model TrackContributor
 * 
 */
export type TrackContributor = $Result.DefaultSelection<Prisma.$TrackContributorPayload>
/**
 * Model VideoContributor
 * 
 */
export type VideoContributor = $Result.DefaultSelection<Prisma.$VideoContributorPayload>
/**
 * Model SubmissionApproval
 * 
 */
export type SubmissionApproval = $Result.DefaultSelection<Prisma.$SubmissionApprovalPayload>
/**
 * Model SubmissionComment
 * 
 */
export type SubmissionComment = $Result.DefaultSelection<Prisma.$SubmissionCommentPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model nhatKy
 * 
 */
export type nhatKy = $Result.DefaultSelection<Prisma.$nhatKyPayload>
/**
 * Model DistributionPlatform
 * 
 */
export type DistributionPlatform = $Result.DefaultSelection<Prisma.$DistributionPlatformPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ARTIST: 'ARTIST',
  COMPOSER: 'COMPOSER',
  PRODUCER: 'PRODUCER',
  PERFORMER: 'PERFORMER',
  LABEL_MANAGER: 'LABEL_MANAGER',
  ADMINISTRATOR: 'ADMINISTRATOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const SubmissionStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  PROCESSING: 'PROCESSING',
  PUBLISHED: 'PUBLISHED',
  CANCELLED: 'CANCELLED',
  DRAFT: 'DRAFT'
};

export type SubmissionStatus = (typeof SubmissionStatus)[keyof typeof SubmissionStatus]


export const ReleaseType: {
  SINGLE: 'SINGLE',
  EP: 'EP',
  ALBUM: 'ALBUM',
  COMPILATION: 'COMPILATION'
};

export type ReleaseType = (typeof ReleaseType)[keyof typeof ReleaseType]


export const ContributorRole: {
  COMPOSER: 'COMPOSER',
  LYRICIST: 'LYRICIST',
  SINGERSONGWRITER: 'SINGERSONGWRITER',
  PRODUCER: 'PRODUCER',
  PERFORMER: 'PERFORMER',
  VOCALIST: 'VOCALIST',
  RAPPER: 'RAPPER'
};

export type ContributorRole = (typeof ContributorRole)[keyof typeof ContributorRole]


export const ApprovalType: {
  DSP: 'DSP',
  CONTENT_ID: 'CONTENT_ID',
  ACR_CLOUD: 'ACR_CLOUD',
  LABEL_REVIEW: 'LABEL_REVIEW'
};

export type ApprovalType = (typeof ApprovalType)[keyof typeof ApprovalType]


export const FileCategory: {
  AUDIO: 'AUDIO',
  VIDEO: 'VIDEO',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};

export type FileCategory = (typeof FileCategory)[keyof typeof FileCategory]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type SubmissionStatus = $Enums.SubmissionStatus

export const SubmissionStatus: typeof $Enums.SubmissionStatus

export type ReleaseType = $Enums.ReleaseType

export const ReleaseType: typeof $Enums.ReleaseType

export type ContributorRole = $Enums.ContributorRole

export const ContributorRole: typeof $Enums.ContributorRole

export type ApprovalType = $Enums.ApprovalType

export const ApprovalType: typeof $Enums.ApprovalType

export type FileCategory = $Enums.FileCategory

export const FileCategory: typeof $Enums.FileCategory

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.label`: Exposes CRUD operations for the **Label** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Labels
    * const labels = await prisma.label.findMany()
    * ```
    */
  get label(): Prisma.LabelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.track`: Exposes CRUD operations for the **Track** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tracks
    * const tracks = await prisma.track.findMany()
    * ```
    */
  get track(): Prisma.TrackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fileFolder`: Exposes CRUD operations for the **FileFolder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileFolders
    * const fileFolders = await prisma.fileFolder.findMany()
    * ```
    */
  get fileFolder(): Prisma.FileFolderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submissionContributor`: Exposes CRUD operations for the **SubmissionContributor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubmissionContributors
    * const submissionContributors = await prisma.submissionContributor.findMany()
    * ```
    */
  get submissionContributor(): Prisma.SubmissionContributorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.trackContributor`: Exposes CRUD operations for the **TrackContributor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TrackContributors
    * const trackContributors = await prisma.trackContributor.findMany()
    * ```
    */
  get trackContributor(): Prisma.TrackContributorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.videoContributor`: Exposes CRUD operations for the **VideoContributor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VideoContributors
    * const videoContributors = await prisma.videoContributor.findMany()
    * ```
    */
  get videoContributor(): Prisma.VideoContributorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submissionApproval`: Exposes CRUD operations for the **SubmissionApproval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubmissionApprovals
    * const submissionApprovals = await prisma.submissionApproval.findMany()
    * ```
    */
  get submissionApproval(): Prisma.SubmissionApprovalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submissionComment`: Exposes CRUD operations for the **SubmissionComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubmissionComments
    * const submissionComments = await prisma.submissionComment.findMany()
    * ```
    */
  get submissionComment(): Prisma.SubmissionCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nhatKy`: Exposes CRUD operations for the **nhatKy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NhatKies
    * const nhatKies = await prisma.nhatKy.findMany()
    * ```
    */
  get nhatKy(): Prisma.nhatKyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.distributionPlatform`: Exposes CRUD operations for the **DistributionPlatform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DistributionPlatforms
    * const distributionPlatforms = await prisma.distributionPlatform.findMany()
    * ```
    */
  get distributionPlatform(): Prisma.DistributionPlatformDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    Label: 'Label',
    Submission: 'Submission',
    Track: 'Track',
    Video: 'Video',
    FileFolder: 'FileFolder',
    SubmissionContributor: 'SubmissionContributor',
    TrackContributor: 'TrackContributor',
    VideoContributor: 'VideoContributor',
    SubmissionApproval: 'SubmissionApproval',
    SubmissionComment: 'SubmissionComment',
    File: 'File',
    nhatKy: 'nhatKy',
    DistributionPlatform: 'DistributionPlatform'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "profile" | "label" | "submission" | "track" | "video" | "fileFolder" | "submissionContributor" | "trackContributor" | "videoContributor" | "submissionApproval" | "submissionComment" | "file" | "nhatKy" | "distributionPlatform"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Label: {
        payload: Prisma.$LabelPayload<ExtArgs>
        fields: Prisma.LabelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LabelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LabelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          findFirst: {
            args: Prisma.LabelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LabelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          findMany: {
            args: Prisma.LabelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>[]
          }
          create: {
            args: Prisma.LabelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          createMany: {
            args: Prisma.LabelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LabelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>[]
          }
          delete: {
            args: Prisma.LabelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          update: {
            args: Prisma.LabelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          deleteMany: {
            args: Prisma.LabelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LabelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LabelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>[]
          }
          upsert: {
            args: Prisma.LabelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabelPayload>
          }
          aggregate: {
            args: Prisma.LabelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLabel>
          }
          groupBy: {
            args: Prisma.LabelGroupByArgs<ExtArgs>
            result: $Utils.Optional<LabelGroupByOutputType>[]
          }
          count: {
            args: Prisma.LabelCountArgs<ExtArgs>
            result: $Utils.Optional<LabelCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      Track: {
        payload: Prisma.$TrackPayload<ExtArgs>
        fields: Prisma.TrackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          findFirst: {
            args: Prisma.TrackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          findMany: {
            args: Prisma.TrackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          create: {
            args: Prisma.TrackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          createMany: {
            args: Prisma.TrackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          delete: {
            args: Prisma.TrackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          update: {
            args: Prisma.TrackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          deleteMany: {
            args: Prisma.TrackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          upsert: {
            args: Prisma.TrackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          aggregate: {
            args: Prisma.TrackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrack>
          }
          groupBy: {
            args: Prisma.TrackGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrackCountArgs<ExtArgs>
            result: $Utils.Optional<TrackCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: Prisma.$VideoPayload<ExtArgs>
        fields: Prisma.VideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VideoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      FileFolder: {
        payload: Prisma.$FileFolderPayload<ExtArgs>
        fields: Prisma.FileFolderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFolderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFolderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>
          }
          findFirst: {
            args: Prisma.FileFolderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFolderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>
          }
          findMany: {
            args: Prisma.FileFolderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>[]
          }
          create: {
            args: Prisma.FileFolderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>
          }
          createMany: {
            args: Prisma.FileFolderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileFolderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>[]
          }
          delete: {
            args: Prisma.FileFolderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>
          }
          update: {
            args: Prisma.FileFolderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>
          }
          deleteMany: {
            args: Prisma.FileFolderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileFolderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileFolderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>[]
          }
          upsert: {
            args: Prisma.FileFolderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileFolderPayload>
          }
          aggregate: {
            args: Prisma.FileFolderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileFolder>
          }
          groupBy: {
            args: Prisma.FileFolderGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileFolderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileFolderCountArgs<ExtArgs>
            result: $Utils.Optional<FileFolderCountAggregateOutputType> | number
          }
        }
      }
      SubmissionContributor: {
        payload: Prisma.$SubmissionContributorPayload<ExtArgs>
        fields: Prisma.SubmissionContributorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionContributorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionContributorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>
          }
          findFirst: {
            args: Prisma.SubmissionContributorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionContributorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>
          }
          findMany: {
            args: Prisma.SubmissionContributorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>[]
          }
          create: {
            args: Prisma.SubmissionContributorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>
          }
          createMany: {
            args: Prisma.SubmissionContributorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionContributorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>[]
          }
          delete: {
            args: Prisma.SubmissionContributorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>
          }
          update: {
            args: Prisma.SubmissionContributorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionContributorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionContributorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionContributorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionContributorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionContributorPayload>
          }
          aggregate: {
            args: Prisma.SubmissionContributorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmissionContributor>
          }
          groupBy: {
            args: Prisma.SubmissionContributorGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionContributorGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionContributorCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionContributorCountAggregateOutputType> | number
          }
        }
      }
      TrackContributor: {
        payload: Prisma.$TrackContributorPayload<ExtArgs>
        fields: Prisma.TrackContributorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrackContributorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrackContributorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>
          }
          findFirst: {
            args: Prisma.TrackContributorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrackContributorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>
          }
          findMany: {
            args: Prisma.TrackContributorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>[]
          }
          create: {
            args: Prisma.TrackContributorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>
          }
          createMany: {
            args: Prisma.TrackContributorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrackContributorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>[]
          }
          delete: {
            args: Prisma.TrackContributorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>
          }
          update: {
            args: Prisma.TrackContributorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>
          }
          deleteMany: {
            args: Prisma.TrackContributorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrackContributorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrackContributorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>[]
          }
          upsert: {
            args: Prisma.TrackContributorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackContributorPayload>
          }
          aggregate: {
            args: Prisma.TrackContributorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrackContributor>
          }
          groupBy: {
            args: Prisma.TrackContributorGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackContributorGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrackContributorCountArgs<ExtArgs>
            result: $Utils.Optional<TrackContributorCountAggregateOutputType> | number
          }
        }
      }
      VideoContributor: {
        payload: Prisma.$VideoContributorPayload<ExtArgs>
        fields: Prisma.VideoContributorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoContributorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoContributorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>
          }
          findFirst: {
            args: Prisma.VideoContributorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoContributorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>
          }
          findMany: {
            args: Prisma.VideoContributorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>[]
          }
          create: {
            args: Prisma.VideoContributorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>
          }
          createMany: {
            args: Prisma.VideoContributorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VideoContributorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>[]
          }
          delete: {
            args: Prisma.VideoContributorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>
          }
          update: {
            args: Prisma.VideoContributorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>
          }
          deleteMany: {
            args: Prisma.VideoContributorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoContributorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VideoContributorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>[]
          }
          upsert: {
            args: Prisma.VideoContributorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoContributorPayload>
          }
          aggregate: {
            args: Prisma.VideoContributorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideoContributor>
          }
          groupBy: {
            args: Prisma.VideoContributorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoContributorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoContributorCountArgs<ExtArgs>
            result: $Utils.Optional<VideoContributorCountAggregateOutputType> | number
          }
        }
      }
      SubmissionApproval: {
        payload: Prisma.$SubmissionApprovalPayload<ExtArgs>
        fields: Prisma.SubmissionApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>
          }
          findFirst: {
            args: Prisma.SubmissionApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>
          }
          findMany: {
            args: Prisma.SubmissionApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>[]
          }
          create: {
            args: Prisma.SubmissionApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>
          }
          createMany: {
            args: Prisma.SubmissionApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionApprovalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>[]
          }
          delete: {
            args: Prisma.SubmissionApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>
          }
          update: {
            args: Prisma.SubmissionApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionApprovalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionApprovalPayload>
          }
          aggregate: {
            args: Prisma.SubmissionApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmissionApproval>
          }
          groupBy: {
            args: Prisma.SubmissionApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionApprovalGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionApprovalCountAggregateOutputType> | number
          }
        }
      }
      SubmissionComment: {
        payload: Prisma.$SubmissionCommentPayload<ExtArgs>
        fields: Prisma.SubmissionCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>
          }
          findFirst: {
            args: Prisma.SubmissionCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>
          }
          findMany: {
            args: Prisma.SubmissionCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>[]
          }
          create: {
            args: Prisma.SubmissionCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>
          }
          createMany: {
            args: Prisma.SubmissionCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>[]
          }
          delete: {
            args: Prisma.SubmissionCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>
          }
          update: {
            args: Prisma.SubmissionCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionCommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionCommentPayload>
          }
          aggregate: {
            args: Prisma.SubmissionCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmissionComment>
          }
          groupBy: {
            args: Prisma.SubmissionCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCommentCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCommentCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      nhatKy: {
        payload: Prisma.$nhatKyPayload<ExtArgs>
        fields: Prisma.nhatKyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.nhatKyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.nhatKyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>
          }
          findFirst: {
            args: Prisma.nhatKyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.nhatKyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>
          }
          findMany: {
            args: Prisma.nhatKyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>[]
          }
          create: {
            args: Prisma.nhatKyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>
          }
          createMany: {
            args: Prisma.nhatKyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.nhatKyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>[]
          }
          delete: {
            args: Prisma.nhatKyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>
          }
          update: {
            args: Prisma.nhatKyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>
          }
          deleteMany: {
            args: Prisma.nhatKyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.nhatKyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.nhatKyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>[]
          }
          upsert: {
            args: Prisma.nhatKyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nhatKyPayload>
          }
          aggregate: {
            args: Prisma.NhatKyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNhatKy>
          }
          groupBy: {
            args: Prisma.nhatKyGroupByArgs<ExtArgs>
            result: $Utils.Optional<NhatKyGroupByOutputType>[]
          }
          count: {
            args: Prisma.nhatKyCountArgs<ExtArgs>
            result: $Utils.Optional<NhatKyCountAggregateOutputType> | number
          }
        }
      }
      DistributionPlatform: {
        payload: Prisma.$DistributionPlatformPayload<ExtArgs>
        fields: Prisma.DistributionPlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DistributionPlatformFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DistributionPlatformFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>
          }
          findFirst: {
            args: Prisma.DistributionPlatformFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DistributionPlatformFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>
          }
          findMany: {
            args: Prisma.DistributionPlatformFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>[]
          }
          create: {
            args: Prisma.DistributionPlatformCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>
          }
          createMany: {
            args: Prisma.DistributionPlatformCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DistributionPlatformCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>[]
          }
          delete: {
            args: Prisma.DistributionPlatformDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>
          }
          update: {
            args: Prisma.DistributionPlatformUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>
          }
          deleteMany: {
            args: Prisma.DistributionPlatformDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DistributionPlatformUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DistributionPlatformUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>[]
          }
          upsert: {
            args: Prisma.DistributionPlatformUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DistributionPlatformPayload>
          }
          aggregate: {
            args: Prisma.DistributionPlatformAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDistributionPlatform>
          }
          groupBy: {
            args: Prisma.DistributionPlatformGroupByArgs<ExtArgs>
            result: $Utils.Optional<DistributionPlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.DistributionPlatformCountArgs<ExtArgs>
            result: $Utils.Optional<DistributionPlatformCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    profile?: ProfileOmit
    label?: LabelOmit
    submission?: SubmissionOmit
    track?: TrackOmit
    video?: VideoOmit
    fileFolder?: FileFolderOmit
    submissionContributor?: SubmissionContributorOmit
    trackContributor?: TrackContributorOmit
    videoContributor?: VideoContributorOmit
    submissionApproval?: SubmissionApprovalOmit
    submissionComment?: SubmissionCommentOmit
    file?: FileOmit
    nhatKy?: nhatKyOmit
    distributionPlatform?: DistributionPlatformOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    submissions: number
    files: number
    nhatKy: number
    videos: number
    fileFolders: number
    submissionContributions: number
    trackContributions: number
    videoContributions: number
    comments: number
    approvals: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | UserCountOutputTypeCountSubmissionsArgs
    files?: boolean | UserCountOutputTypeCountFilesArgs
    nhatKy?: boolean | UserCountOutputTypeCountNhatKyArgs
    videos?: boolean | UserCountOutputTypeCountVideosArgs
    fileFolders?: boolean | UserCountOutputTypeCountFileFoldersArgs
    submissionContributions?: boolean | UserCountOutputTypeCountSubmissionContributionsArgs
    trackContributions?: boolean | UserCountOutputTypeCountTrackContributionsArgs
    videoContributions?: boolean | UserCountOutputTypeCountVideoContributionsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    approvals?: boolean | UserCountOutputTypeCountApprovalsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNhatKyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: nhatKyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFileFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileFolderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionContributorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTrackContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackContributorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountVideoContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoContributorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionCommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionApprovalWhereInput
  }


  /**
   * Count Type LabelCountOutputType
   */

  export type LabelCountOutputType = {
    members: number
    submissions: number
    videos: number
  }

  export type LabelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | LabelCountOutputTypeCountMembersArgs
    submissions?: boolean | LabelCountOutputTypeCountSubmissionsArgs
    videos?: boolean | LabelCountOutputTypeCountVideosArgs
  }

  // Custom InputTypes
  /**
   * LabelCountOutputType without action
   */
  export type LabelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabelCountOutputType
     */
    select?: LabelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LabelCountOutputType without action
   */
  export type LabelCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * LabelCountOutputType without action
   */
  export type LabelCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * LabelCountOutputType without action
   */
  export type LabelCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
  }


  /**
   * Count Type SubmissionCountOutputType
   */

  export type SubmissionCountOutputType = {
    tracks: number
    videos: number
    contributors: number
    comments: number
    approvals: number
  }

  export type SubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracks?: boolean | SubmissionCountOutputTypeCountTracksArgs
    videos?: boolean | SubmissionCountOutputTypeCountVideosArgs
    contributors?: boolean | SubmissionCountOutputTypeCountContributorsArgs
    comments?: boolean | SubmissionCountOutputTypeCountCommentsArgs
    approvals?: boolean | SubmissionCountOutputTypeCountApprovalsArgs
  }

  // Custom InputTypes
  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionCountOutputType
     */
    select?: SubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountTracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountContributorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionContributorWhereInput
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionCommentWhereInput
  }

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionApprovalWhereInput
  }


  /**
   * Count Type TrackCountOutputType
   */

  export type TrackCountOutputType = {
    contributors: number
  }

  export type TrackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributors?: boolean | TrackCountOutputTypeCountContributorsArgs
  }

  // Custom InputTypes
  /**
   * TrackCountOutputType without action
   */
  export type TrackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackCountOutputType
     */
    select?: TrackCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TrackCountOutputType without action
   */
  export type TrackCountOutputTypeCountContributorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackContributorWhereInput
  }


  /**
   * Count Type VideoCountOutputType
   */

  export type VideoCountOutputType = {
    contributors: number
  }

  export type VideoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contributors?: boolean | VideoCountOutputTypeCountContributorsArgs
  }

  // Custom InputTypes
  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoCountOutputType
     */
    select?: VideoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountContributorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoContributorWhereInput
  }


  /**
   * Count Type FileFolderCountOutputType
   */

  export type FileFolderCountOutputType = {
    children: number
    files: number
  }

  export type FileFolderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | FileFolderCountOutputTypeCountChildrenArgs
    files?: boolean | FileFolderCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * FileFolderCountOutputType without action
   */
  export type FileFolderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolderCountOutputType
     */
    select?: FileFolderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileFolderCountOutputType without action
   */
  export type FileFolderCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileFolderWhereInput
  }

  /**
   * FileFolderCountOutputType without action
   */
  export type FileFolderCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    labelId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    labelId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    roles: number
    createdAt: number
    updatedAt: number
    labelId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    labelId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    labelId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    roles?: true
    createdAt?: true
    updatedAt?: true
    labelId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    password: string
    roles: $Enums.UserRole[]
    createdAt: Date
    updatedAt: Date
    labelId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    roles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    labelId?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    label?: boolean | User$labelArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    nhatKy?: boolean | User$nhatKyArgs<ExtArgs>
    videos?: boolean | User$videosArgs<ExtArgs>
    fileFolders?: boolean | User$fileFoldersArgs<ExtArgs>
    submissionContributions?: boolean | User$submissionContributionsArgs<ExtArgs>
    trackContributions?: boolean | User$trackContributionsArgs<ExtArgs>
    videoContributions?: boolean | User$videoContributionsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    approvals?: boolean | User$approvalsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    roles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    labelId?: boolean
    label?: boolean | User$labelArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    roles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    labelId?: boolean
    label?: boolean | User$labelArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    roles?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    labelId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "roles" | "createdAt" | "updatedAt" | "labelId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    label?: boolean | User$labelArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    nhatKy?: boolean | User$nhatKyArgs<ExtArgs>
    videos?: boolean | User$videosArgs<ExtArgs>
    fileFolders?: boolean | User$fileFoldersArgs<ExtArgs>
    submissionContributions?: boolean | User$submissionContributionsArgs<ExtArgs>
    trackContributions?: boolean | User$trackContributionsArgs<ExtArgs>
    videoContributions?: boolean | User$videoContributionsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    approvals?: boolean | User$approvalsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    label?: boolean | User$labelArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    label?: boolean | User$labelArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      label: Prisma.$LabelPayload<ExtArgs> | null
      files: Prisma.$FilePayload<ExtArgs>[]
      nhatKy: Prisma.$nhatKyPayload<ExtArgs>[]
      videos: Prisma.$VideoPayload<ExtArgs>[]
      fileFolders: Prisma.$FileFolderPayload<ExtArgs>[]
      submissionContributions: Prisma.$SubmissionContributorPayload<ExtArgs>[]
      trackContributions: Prisma.$TrackContributorPayload<ExtArgs>[]
      videoContributions: Prisma.$VideoContributorPayload<ExtArgs>[]
      comments: Prisma.$SubmissionCommentPayload<ExtArgs>[]
      approvals: Prisma.$SubmissionApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      password: string
      roles: $Enums.UserRole[]
      createdAt: Date
      updatedAt: Date
      labelId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    submissions<T extends User$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    label<T extends User$labelArgs<ExtArgs> = {}>(args?: Subset<T, User$labelArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    files<T extends User$filesArgs<ExtArgs> = {}>(args?: Subset<T, User$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    nhatKy<T extends User$nhatKyArgs<ExtArgs> = {}>(args?: Subset<T, User$nhatKyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videos<T extends User$videosArgs<ExtArgs> = {}>(args?: Subset<T, User$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fileFolders<T extends User$fileFoldersArgs<ExtArgs> = {}>(args?: Subset<T, User$fileFoldersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissionContributions<T extends User$submissionContributionsArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionContributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    trackContributions<T extends User$trackContributionsArgs<ExtArgs> = {}>(args?: Subset<T, User$trackContributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videoContributions<T extends User$videoContributionsArgs<ExtArgs> = {}>(args?: Subset<T, User$videoContributionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvals<T extends User$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly roles: FieldRef<"User", 'UserRole[]'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly labelId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.submissions
   */
  export type User$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * User.label
   */
  export type User$labelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    where?: LabelWhereInput
  }

  /**
   * User.files
   */
  export type User$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.nhatKy
   */
  export type User$nhatKyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    where?: nhatKyWhereInput
    orderBy?: nhatKyOrderByWithRelationInput | nhatKyOrderByWithRelationInput[]
    cursor?: nhatKyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NhatKyScalarFieldEnum | NhatKyScalarFieldEnum[]
  }

  /**
   * User.videos
   */
  export type User$videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    cursor?: VideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * User.fileFolders
   */
  export type User$fileFoldersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    where?: FileFolderWhereInput
    orderBy?: FileFolderOrderByWithRelationInput | FileFolderOrderByWithRelationInput[]
    cursor?: FileFolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileFolderScalarFieldEnum | FileFolderScalarFieldEnum[]
  }

  /**
   * User.submissionContributions
   */
  export type User$submissionContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    where?: SubmissionContributorWhereInput
    orderBy?: SubmissionContributorOrderByWithRelationInput | SubmissionContributorOrderByWithRelationInput[]
    cursor?: SubmissionContributorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionContributorScalarFieldEnum | SubmissionContributorScalarFieldEnum[]
  }

  /**
   * User.trackContributions
   */
  export type User$trackContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    where?: TrackContributorWhereInput
    orderBy?: TrackContributorOrderByWithRelationInput | TrackContributorOrderByWithRelationInput[]
    cursor?: TrackContributorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackContributorScalarFieldEnum | TrackContributorScalarFieldEnum[]
  }

  /**
   * User.videoContributions
   */
  export type User$videoContributionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    where?: VideoContributorWhereInput
    orderBy?: VideoContributorOrderByWithRelationInput | VideoContributorOrderByWithRelationInput[]
    cursor?: VideoContributorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoContributorScalarFieldEnum | VideoContributorScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    where?: SubmissionCommentWhereInput
    orderBy?: SubmissionCommentOrderByWithRelationInput | SubmissionCommentOrderByWithRelationInput[]
    cursor?: SubmissionCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionCommentScalarFieldEnum | SubmissionCommentScalarFieldEnum[]
  }

  /**
   * User.approvals
   */
  export type User$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    where?: SubmissionApprovalWhereInput
    orderBy?: SubmissionApprovalOrderByWithRelationInput | SubmissionApprovalOrderByWithRelationInput[]
    cursor?: SubmissionApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionApprovalScalarFieldEnum | SubmissionApprovalScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    bio: string | null
    avatarUrl: string | null
    phone: string | null
    artistName: string | null
    fullName: string | null
    facebookUrl: string | null
    instagramUrl: string | null
    youtubeUrl: string | null
    spotifyUrl: string | null
    appleMusicUrl: string | null
    soundcloudUrl: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    bio: string | null
    avatarUrl: string | null
    phone: string | null
    artistName: string | null
    fullName: string | null
    facebookUrl: string | null
    instagramUrl: string | null
    youtubeUrl: string | null
    spotifyUrl: string | null
    appleMusicUrl: string | null
    soundcloudUrl: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    bio: number
    avatarUrl: number
    phone: number
    artistName: number
    fullName: number
    facebookUrl: number
    instagramUrl: number
    youtubeUrl: number
    spotifyUrl: number
    appleMusicUrl: number
    soundcloudUrl: number
    userId: number
    socialLinks: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    bio?: true
    avatarUrl?: true
    phone?: true
    artistName?: true
    fullName?: true
    facebookUrl?: true
    instagramUrl?: true
    youtubeUrl?: true
    spotifyUrl?: true
    appleMusicUrl?: true
    soundcloudUrl?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    bio?: true
    avatarUrl?: true
    phone?: true
    artistName?: true
    fullName?: true
    facebookUrl?: true
    instagramUrl?: true
    youtubeUrl?: true
    spotifyUrl?: true
    appleMusicUrl?: true
    soundcloudUrl?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    bio?: true
    avatarUrl?: true
    phone?: true
    artistName?: true
    fullName?: true
    facebookUrl?: true
    instagramUrl?: true
    youtubeUrl?: true
    spotifyUrl?: true
    appleMusicUrl?: true
    soundcloudUrl?: true
    userId?: true
    socialLinks?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    bio: string | null
    avatarUrl: string | null
    phone: string | null
    artistName: string | null
    fullName: string | null
    facebookUrl: string | null
    instagramUrl: string | null
    youtubeUrl: string | null
    spotifyUrl: string | null
    appleMusicUrl: string | null
    soundcloudUrl: string | null
    userId: string
    socialLinks: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bio?: boolean
    avatarUrl?: boolean
    phone?: boolean
    artistName?: boolean
    fullName?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    youtubeUrl?: boolean
    spotifyUrl?: boolean
    appleMusicUrl?: boolean
    soundcloudUrl?: boolean
    userId?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bio?: boolean
    avatarUrl?: boolean
    phone?: boolean
    artistName?: boolean
    fullName?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    youtubeUrl?: boolean
    spotifyUrl?: boolean
    appleMusicUrl?: boolean
    soundcloudUrl?: boolean
    userId?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bio?: boolean
    avatarUrl?: boolean
    phone?: boolean
    artistName?: boolean
    fullName?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    youtubeUrl?: boolean
    spotifyUrl?: boolean
    appleMusicUrl?: boolean
    soundcloudUrl?: boolean
    userId?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    bio?: boolean
    avatarUrl?: boolean
    phone?: boolean
    artistName?: boolean
    fullName?: boolean
    facebookUrl?: boolean
    instagramUrl?: boolean
    youtubeUrl?: boolean
    spotifyUrl?: boolean
    appleMusicUrl?: boolean
    soundcloudUrl?: boolean
    userId?: boolean
    socialLinks?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bio" | "avatarUrl" | "phone" | "artistName" | "fullName" | "facebookUrl" | "instagramUrl" | "youtubeUrl" | "spotifyUrl" | "appleMusicUrl" | "soundcloudUrl" | "userId" | "socialLinks" | "createdAt" | "updatedAt", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bio: string | null
      avatarUrl: string | null
      phone: string | null
      artistName: string | null
      fullName: string | null
      facebookUrl: string | null
      instagramUrl: string | null
      youtubeUrl: string | null
      spotifyUrl: string | null
      appleMusicUrl: string | null
      soundcloudUrl: string | null
      userId: string
      socialLinks: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly bio: FieldRef<"Profile", 'String'>
    readonly avatarUrl: FieldRef<"Profile", 'String'>
    readonly phone: FieldRef<"Profile", 'String'>
    readonly artistName: FieldRef<"Profile", 'String'>
    readonly fullName: FieldRef<"Profile", 'String'>
    readonly facebookUrl: FieldRef<"Profile", 'String'>
    readonly instagramUrl: FieldRef<"Profile", 'String'>
    readonly youtubeUrl: FieldRef<"Profile", 'String'>
    readonly spotifyUrl: FieldRef<"Profile", 'String'>
    readonly appleMusicUrl: FieldRef<"Profile", 'String'>
    readonly soundcloudUrl: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly socialLinks: FieldRef<"Profile", 'Json'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Label
   */

  export type AggregateLabel = {
    _count: LabelCountAggregateOutputType | null
    _min: LabelMinAggregateOutputType | null
    _max: LabelMaxAggregateOutputType | null
  }

  export type LabelMinAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LabelMaxAggregateOutputType = {
    id: string | null
    name: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LabelCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LabelMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LabelMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LabelCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LabelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Label to aggregate.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Labels
    **/
    _count?: true | LabelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LabelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LabelMaxAggregateInputType
  }

  export type GetLabelAggregateType<T extends LabelAggregateArgs> = {
        [P in keyof T & keyof AggregateLabel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLabel[P]>
      : GetScalarType<T[P], AggregateLabel[P]>
  }




  export type LabelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabelWhereInput
    orderBy?: LabelOrderByWithAggregationInput | LabelOrderByWithAggregationInput[]
    by: LabelScalarFieldEnum[] | LabelScalarFieldEnum
    having?: LabelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LabelCountAggregateInputType | true
    _min?: LabelMinAggregateInputType
    _max?: LabelMaxAggregateInputType
  }

  export type LabelGroupByOutputType = {
    id: string
    name: string
    ownerId: string
    createdAt: Date
    updatedAt: Date
    _count: LabelCountAggregateOutputType | null
    _min: LabelMinAggregateOutputType | null
    _max: LabelMaxAggregateOutputType | null
  }

  type GetLabelGroupByPayload<T extends LabelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LabelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LabelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LabelGroupByOutputType[P]>
            : GetScalarType<T[P], LabelGroupByOutputType[P]>
        }
      >
    >


  export type LabelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Label$membersArgs<ExtArgs>
    submissions?: boolean | Label$submissionsArgs<ExtArgs>
    videos?: boolean | Label$videosArgs<ExtArgs>
    _count?: boolean | LabelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["label"]>

  export type LabelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["label"]>

  export type LabelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["label"]>

  export type LabelSelectScalar = {
    id?: boolean
    name?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LabelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["label"]>
  export type LabelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Label$membersArgs<ExtArgs>
    submissions?: boolean | Label$submissionsArgs<ExtArgs>
    videos?: boolean | Label$videosArgs<ExtArgs>
    _count?: boolean | LabelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LabelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LabelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LabelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Label"
    objects: {
      members: Prisma.$UserPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      videos: Prisma.$VideoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      ownerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["label"]>
    composites: {}
  }

  type LabelGetPayload<S extends boolean | null | undefined | LabelDefaultArgs> = $Result.GetResult<Prisma.$LabelPayload, S>

  type LabelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LabelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LabelCountAggregateInputType | true
    }

  export interface LabelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Label'], meta: { name: 'Label' } }
    /**
     * Find zero or one Label that matches the filter.
     * @param {LabelFindUniqueArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LabelFindUniqueArgs>(args: SelectSubset<T, LabelFindUniqueArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Label that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LabelFindUniqueOrThrowArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LabelFindUniqueOrThrowArgs>(args: SelectSubset<T, LabelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Label that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelFindFirstArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LabelFindFirstArgs>(args?: SelectSubset<T, LabelFindFirstArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Label that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelFindFirstOrThrowArgs} args - Arguments to find a Label
     * @example
     * // Get one Label
     * const label = await prisma.label.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LabelFindFirstOrThrowArgs>(args?: SelectSubset<T, LabelFindFirstOrThrowArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Labels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Labels
     * const labels = await prisma.label.findMany()
     * 
     * // Get first 10 Labels
     * const labels = await prisma.label.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const labelWithIdOnly = await prisma.label.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LabelFindManyArgs>(args?: SelectSubset<T, LabelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Label.
     * @param {LabelCreateArgs} args - Arguments to create a Label.
     * @example
     * // Create one Label
     * const Label = await prisma.label.create({
     *   data: {
     *     // ... data to create a Label
     *   }
     * })
     * 
     */
    create<T extends LabelCreateArgs>(args: SelectSubset<T, LabelCreateArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Labels.
     * @param {LabelCreateManyArgs} args - Arguments to create many Labels.
     * @example
     * // Create many Labels
     * const label = await prisma.label.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LabelCreateManyArgs>(args?: SelectSubset<T, LabelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Labels and returns the data saved in the database.
     * @param {LabelCreateManyAndReturnArgs} args - Arguments to create many Labels.
     * @example
     * // Create many Labels
     * const label = await prisma.label.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Labels and only return the `id`
     * const labelWithIdOnly = await prisma.label.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LabelCreateManyAndReturnArgs>(args?: SelectSubset<T, LabelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Label.
     * @param {LabelDeleteArgs} args - Arguments to delete one Label.
     * @example
     * // Delete one Label
     * const Label = await prisma.label.delete({
     *   where: {
     *     // ... filter to delete one Label
     *   }
     * })
     * 
     */
    delete<T extends LabelDeleteArgs>(args: SelectSubset<T, LabelDeleteArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Label.
     * @param {LabelUpdateArgs} args - Arguments to update one Label.
     * @example
     * // Update one Label
     * const label = await prisma.label.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LabelUpdateArgs>(args: SelectSubset<T, LabelUpdateArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Labels.
     * @param {LabelDeleteManyArgs} args - Arguments to filter Labels to delete.
     * @example
     * // Delete a few Labels
     * const { count } = await prisma.label.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LabelDeleteManyArgs>(args?: SelectSubset<T, LabelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Labels
     * const label = await prisma.label.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LabelUpdateManyArgs>(args: SelectSubset<T, LabelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Labels and returns the data updated in the database.
     * @param {LabelUpdateManyAndReturnArgs} args - Arguments to update many Labels.
     * @example
     * // Update many Labels
     * const label = await prisma.label.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Labels and only return the `id`
     * const labelWithIdOnly = await prisma.label.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LabelUpdateManyAndReturnArgs>(args: SelectSubset<T, LabelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Label.
     * @param {LabelUpsertArgs} args - Arguments to update or create a Label.
     * @example
     * // Update or create a Label
     * const label = await prisma.label.upsert({
     *   create: {
     *     // ... data to create a Label
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Label we want to update
     *   }
     * })
     */
    upsert<T extends LabelUpsertArgs>(args: SelectSubset<T, LabelUpsertArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Labels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelCountArgs} args - Arguments to filter Labels to count.
     * @example
     * // Count the number of Labels
     * const count = await prisma.label.count({
     *   where: {
     *     // ... the filter for the Labels we want to count
     *   }
     * })
    **/
    count<T extends LabelCountArgs>(
      args?: Subset<T, LabelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LabelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Label.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LabelAggregateArgs>(args: Subset<T, LabelAggregateArgs>): Prisma.PrismaPromise<GetLabelAggregateType<T>>

    /**
     * Group by Label.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LabelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LabelGroupByArgs['orderBy'] }
        : { orderBy?: LabelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LabelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLabelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Label model
   */
  readonly fields: LabelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Label.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LabelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Label$membersArgs<ExtArgs> = {}>(args?: Subset<T, Label$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Label$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Label$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videos<T extends Label$videosArgs<ExtArgs> = {}>(args?: Subset<T, Label$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Label model
   */
  interface LabelFieldRefs {
    readonly id: FieldRef<"Label", 'String'>
    readonly name: FieldRef<"Label", 'String'>
    readonly ownerId: FieldRef<"Label", 'String'>
    readonly createdAt: FieldRef<"Label", 'DateTime'>
    readonly updatedAt: FieldRef<"Label", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Label findUnique
   */
  export type LabelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label findUniqueOrThrow
   */
  export type LabelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label findFirst
   */
  export type LabelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Labels.
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Labels.
     */
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Label findFirstOrThrow
   */
  export type LabelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Label to fetch.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Labels.
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Labels.
     */
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Label findMany
   */
  export type LabelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter, which Labels to fetch.
     */
    where?: LabelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labels to fetch.
     */
    orderBy?: LabelOrderByWithRelationInput | LabelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Labels.
     */
    cursor?: LabelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labels.
     */
    skip?: number
    distinct?: LabelScalarFieldEnum | LabelScalarFieldEnum[]
  }

  /**
   * Label create
   */
  export type LabelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * The data needed to create a Label.
     */
    data: XOR<LabelCreateInput, LabelUncheckedCreateInput>
  }

  /**
   * Label createMany
   */
  export type LabelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Labels.
     */
    data: LabelCreateManyInput | LabelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Label createManyAndReturn
   */
  export type LabelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * The data used to create many Labels.
     */
    data: LabelCreateManyInput | LabelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Label update
   */
  export type LabelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * The data needed to update a Label.
     */
    data: XOR<LabelUpdateInput, LabelUncheckedUpdateInput>
    /**
     * Choose, which Label to update.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label updateMany
   */
  export type LabelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Labels.
     */
    data: XOR<LabelUpdateManyMutationInput, LabelUncheckedUpdateManyInput>
    /**
     * Filter which Labels to update
     */
    where?: LabelWhereInput
    /**
     * Limit how many Labels to update.
     */
    limit?: number
  }

  /**
   * Label updateManyAndReturn
   */
  export type LabelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * The data used to update Labels.
     */
    data: XOR<LabelUpdateManyMutationInput, LabelUncheckedUpdateManyInput>
    /**
     * Filter which Labels to update
     */
    where?: LabelWhereInput
    /**
     * Limit how many Labels to update.
     */
    limit?: number
  }

  /**
   * Label upsert
   */
  export type LabelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * The filter to search for the Label to update in case it exists.
     */
    where: LabelWhereUniqueInput
    /**
     * In case the Label found by the `where` argument doesn't exist, create a new Label with this data.
     */
    create: XOR<LabelCreateInput, LabelUncheckedCreateInput>
    /**
     * In case the Label was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LabelUpdateInput, LabelUncheckedUpdateInput>
  }

  /**
   * Label delete
   */
  export type LabelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
    /**
     * Filter which Label to delete.
     */
    where: LabelWhereUniqueInput
  }

  /**
   * Label deleteMany
   */
  export type LabelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Labels to delete
     */
    where?: LabelWhereInput
    /**
     * Limit how many Labels to delete.
     */
    limit?: number
  }

  /**
   * Label.members
   */
  export type Label$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Label.submissions
   */
  export type Label$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Label.videos
   */
  export type Label$videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    cursor?: VideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Label without action
   */
  export type LabelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Label
     */
    select?: LabelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Label
     */
    omit?: LabelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabelInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    title: string | null
    artist: string | null
    upc: string | null
    type: $Enums.ReleaseType | null
    coverImagePath: string | null
    releaseDate: Date | null
    status: $Enums.SubmissionStatus | null
    metadataLocked: boolean | null
    published: boolean | null
    albumName: string | null
    mainCategory: string | null
    subCategory: string | null
    distributionLink: string | null
    statusVietnamese: string | null
    rejectionReason: string | null
    notes: string | null
    userId: string | null
    labelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    artist: string | null
    upc: string | null
    type: $Enums.ReleaseType | null
    coverImagePath: string | null
    releaseDate: Date | null
    status: $Enums.SubmissionStatus | null
    metadataLocked: boolean | null
    published: boolean | null
    albumName: string | null
    mainCategory: string | null
    subCategory: string | null
    distributionLink: string | null
    statusVietnamese: string | null
    rejectionReason: string | null
    notes: string | null
    userId: string | null
    labelId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    title: number
    artist: number
    upc: number
    type: number
    coverImagePath: number
    releaseDate: number
    status: number
    metadataLocked: number
    published: number
    albumName: number
    mainCategory: number
    subCategory: number
    platforms: number
    distributionLink: number
    distributionPlatforms: number
    statusVietnamese: number
    rejectionReason: number
    notes: number
    userId: number
    labelId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubmissionMinAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    upc?: true
    type?: true
    coverImagePath?: true
    releaseDate?: true
    status?: true
    metadataLocked?: true
    published?: true
    albumName?: true
    mainCategory?: true
    subCategory?: true
    distributionLink?: true
    statusVietnamese?: true
    rejectionReason?: true
    notes?: true
    userId?: true
    labelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    upc?: true
    type?: true
    coverImagePath?: true
    releaseDate?: true
    status?: true
    metadataLocked?: true
    published?: true
    albumName?: true
    mainCategory?: true
    subCategory?: true
    distributionLink?: true
    statusVietnamese?: true
    rejectionReason?: true
    notes?: true
    userId?: true
    labelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    upc?: true
    type?: true
    coverImagePath?: true
    releaseDate?: true
    status?: true
    metadataLocked?: true
    published?: true
    albumName?: true
    mainCategory?: true
    subCategory?: true
    platforms?: true
    distributionLink?: true
    distributionPlatforms?: true
    statusVietnamese?: true
    rejectionReason?: true
    notes?: true
    userId?: true
    labelId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    title: string
    artist: string
    upc: string | null
    type: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date
    status: $Enums.SubmissionStatus
    metadataLocked: boolean
    published: boolean
    albumName: string | null
    mainCategory: string | null
    subCategory: string | null
    platforms: JsonValue | null
    distributionLink: string | null
    distributionPlatforms: JsonValue | null
    statusVietnamese: string | null
    rejectionReason: string | null
    notes: string | null
    userId: string
    labelId: string
    createdAt: Date
    updatedAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    upc?: boolean
    type?: boolean
    coverImagePath?: boolean
    releaseDate?: boolean
    status?: boolean
    metadataLocked?: boolean
    published?: boolean
    albumName?: boolean
    mainCategory?: boolean
    subCategory?: boolean
    platforms?: boolean
    distributionLink?: boolean
    distributionPlatforms?: boolean
    statusVietnamese?: boolean
    rejectionReason?: boolean
    notes?: boolean
    userId?: boolean
    labelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    tracks?: boolean | Submission$tracksArgs<ExtArgs>
    videos?: boolean | Submission$videosArgs<ExtArgs>
    contributors?: boolean | Submission$contributorsArgs<ExtArgs>
    comments?: boolean | Submission$commentsArgs<ExtArgs>
    approvals?: boolean | Submission$approvalsArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    upc?: boolean
    type?: boolean
    coverImagePath?: boolean
    releaseDate?: boolean
    status?: boolean
    metadataLocked?: boolean
    published?: boolean
    albumName?: boolean
    mainCategory?: boolean
    subCategory?: boolean
    platforms?: boolean
    distributionLink?: boolean
    distributionPlatforms?: boolean
    statusVietnamese?: boolean
    rejectionReason?: boolean
    notes?: boolean
    userId?: boolean
    labelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    upc?: boolean
    type?: boolean
    coverImagePath?: boolean
    releaseDate?: boolean
    status?: boolean
    metadataLocked?: boolean
    published?: boolean
    albumName?: boolean
    mainCategory?: boolean
    subCategory?: boolean
    platforms?: boolean
    distributionLink?: boolean
    distributionPlatforms?: boolean
    statusVietnamese?: boolean
    rejectionReason?: boolean
    notes?: boolean
    userId?: boolean
    labelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    title?: boolean
    artist?: boolean
    upc?: boolean
    type?: boolean
    coverImagePath?: boolean
    releaseDate?: boolean
    status?: boolean
    metadataLocked?: boolean
    published?: boolean
    albumName?: boolean
    mainCategory?: boolean
    subCategory?: boolean
    platforms?: boolean
    distributionLink?: boolean
    distributionPlatforms?: boolean
    statusVietnamese?: boolean
    rejectionReason?: boolean
    notes?: boolean
    userId?: boolean
    labelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "artist" | "upc" | "type" | "coverImagePath" | "releaseDate" | "status" | "metadataLocked" | "published" | "albumName" | "mainCategory" | "subCategory" | "platforms" | "distributionLink" | "distributionPlatforms" | "statusVietnamese" | "rejectionReason" | "notes" | "userId" | "labelId" | "createdAt" | "updatedAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    tracks?: boolean | Submission$tracksArgs<ExtArgs>
    videos?: boolean | Submission$videosArgs<ExtArgs>
    contributors?: boolean | Submission$contributorsArgs<ExtArgs>
    comments?: boolean | Submission$commentsArgs<ExtArgs>
    approvals?: boolean | Submission$approvalsArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      label: Prisma.$LabelPayload<ExtArgs>
      tracks: Prisma.$TrackPayload<ExtArgs>[]
      videos: Prisma.$VideoPayload<ExtArgs>[]
      contributors: Prisma.$SubmissionContributorPayload<ExtArgs>[]
      comments: Prisma.$SubmissionCommentPayload<ExtArgs>[]
      approvals: Prisma.$SubmissionApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      artist: string
      upc: string | null
      type: $Enums.ReleaseType
      coverImagePath: string
      releaseDate: Date
      status: $Enums.SubmissionStatus
      metadataLocked: boolean
      published: boolean
      albumName: string | null
      mainCategory: string | null
      subCategory: string | null
      platforms: Prisma.JsonValue | null
      distributionLink: string | null
      distributionPlatforms: Prisma.JsonValue | null
      statusVietnamese: string | null
      rejectionReason: string | null
      notes: string | null
      userId: string
      labelId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    label<T extends LabelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabelDefaultArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tracks<T extends Submission$tracksArgs<ExtArgs> = {}>(args?: Subset<T, Submission$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    videos<T extends Submission$videosArgs<ExtArgs> = {}>(args?: Subset<T, Submission$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contributors<T extends Submission$contributorsArgs<ExtArgs> = {}>(args?: Subset<T, Submission$contributorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Submission$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Submission$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    approvals<T extends Submission$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, Submission$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly title: FieldRef<"Submission", 'String'>
    readonly artist: FieldRef<"Submission", 'String'>
    readonly upc: FieldRef<"Submission", 'String'>
    readonly type: FieldRef<"Submission", 'ReleaseType'>
    readonly coverImagePath: FieldRef<"Submission", 'String'>
    readonly releaseDate: FieldRef<"Submission", 'DateTime'>
    readonly status: FieldRef<"Submission", 'SubmissionStatus'>
    readonly metadataLocked: FieldRef<"Submission", 'Boolean'>
    readonly published: FieldRef<"Submission", 'Boolean'>
    readonly albumName: FieldRef<"Submission", 'String'>
    readonly mainCategory: FieldRef<"Submission", 'String'>
    readonly subCategory: FieldRef<"Submission", 'String'>
    readonly platforms: FieldRef<"Submission", 'Json'>
    readonly distributionLink: FieldRef<"Submission", 'String'>
    readonly distributionPlatforms: FieldRef<"Submission", 'Json'>
    readonly statusVietnamese: FieldRef<"Submission", 'String'>
    readonly rejectionReason: FieldRef<"Submission", 'String'>
    readonly notes: FieldRef<"Submission", 'String'>
    readonly userId: FieldRef<"Submission", 'String'>
    readonly labelId: FieldRef<"Submission", 'String'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
    readonly updatedAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission.tracks
   */
  export type Submission$tracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    cursor?: TrackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Submission.videos
   */
  export type Submission$videosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    cursor?: VideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Submission.contributors
   */
  export type Submission$contributorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    where?: SubmissionContributorWhereInput
    orderBy?: SubmissionContributorOrderByWithRelationInput | SubmissionContributorOrderByWithRelationInput[]
    cursor?: SubmissionContributorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionContributorScalarFieldEnum | SubmissionContributorScalarFieldEnum[]
  }

  /**
   * Submission.comments
   */
  export type Submission$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    where?: SubmissionCommentWhereInput
    orderBy?: SubmissionCommentOrderByWithRelationInput | SubmissionCommentOrderByWithRelationInput[]
    cursor?: SubmissionCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionCommentScalarFieldEnum | SubmissionCommentScalarFieldEnum[]
  }

  /**
   * Submission.approvals
   */
  export type Submission$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    where?: SubmissionApprovalWhereInput
    orderBy?: SubmissionApprovalOrderByWithRelationInput | SubmissionApprovalOrderByWithRelationInput[]
    cursor?: SubmissionApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionApprovalScalarFieldEnum | SubmissionApprovalScalarFieldEnum[]
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Track
   */

  export type AggregateTrack = {
    _count: TrackCountAggregateOutputType | null
    _avg: TrackAvgAggregateOutputType | null
    _sum: TrackSumAggregateOutputType | null
    _min: TrackMinAggregateOutputType | null
    _max: TrackMaxAggregateOutputType | null
  }

  export type TrackAvgAggregateOutputType = {
    duration: number | null
    fileSize: number | null
  }

  export type TrackSumAggregateOutputType = {
    duration: number | null
    fileSize: number | null
  }

  export type TrackMinAggregateOutputType = {
    id: string | null
    title: string | null
    artist: string | null
    filePath: string | null
    duration: number | null
    isrc: string | null
    fileName: string | null
    artistFullName: string | null
    fileSize: number | null
    format: string | null
    bitrate: string | null
    sampleRate: string | null
    submissionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrackMaxAggregateOutputType = {
    id: string | null
    title: string | null
    artist: string | null
    filePath: string | null
    duration: number | null
    isrc: string | null
    fileName: string | null
    artistFullName: string | null
    fileSize: number | null
    format: string | null
    bitrate: string | null
    sampleRate: string | null
    submissionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TrackCountAggregateOutputType = {
    id: number
    title: number
    artist: number
    filePath: number
    duration: number
    isrc: number
    fileName: number
    artistFullName: number
    fileSize: number
    format: number
    bitrate: number
    sampleRate: number
    submissionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TrackAvgAggregateInputType = {
    duration?: true
    fileSize?: true
  }

  export type TrackSumAggregateInputType = {
    duration?: true
    fileSize?: true
  }

  export type TrackMinAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    filePath?: true
    duration?: true
    isrc?: true
    fileName?: true
    artistFullName?: true
    fileSize?: true
    format?: true
    bitrate?: true
    sampleRate?: true
    submissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrackMaxAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    filePath?: true
    duration?: true
    isrc?: true
    fileName?: true
    artistFullName?: true
    fileSize?: true
    format?: true
    bitrate?: true
    sampleRate?: true
    submissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TrackCountAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    filePath?: true
    duration?: true
    isrc?: true
    fileName?: true
    artistFullName?: true
    fileSize?: true
    format?: true
    bitrate?: true
    sampleRate?: true
    submissionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TrackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Track to aggregate.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tracks
    **/
    _count?: true | TrackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackMaxAggregateInputType
  }

  export type GetTrackAggregateType<T extends TrackAggregateArgs> = {
        [P in keyof T & keyof AggregateTrack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrack[P]>
      : GetScalarType<T[P], AggregateTrack[P]>
  }




  export type TrackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithAggregationInput | TrackOrderByWithAggregationInput[]
    by: TrackScalarFieldEnum[] | TrackScalarFieldEnum
    having?: TrackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackCountAggregateInputType | true
    _avg?: TrackAvgAggregateInputType
    _sum?: TrackSumAggregateInputType
    _min?: TrackMinAggregateInputType
    _max?: TrackMaxAggregateInputType
  }

  export type TrackGroupByOutputType = {
    id: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc: string | null
    fileName: string | null
    artistFullName: string | null
    fileSize: number | null
    format: string | null
    bitrate: string | null
    sampleRate: string | null
    submissionId: string
    createdAt: Date
    updatedAt: Date
    _count: TrackCountAggregateOutputType | null
    _avg: TrackAvgAggregateOutputType | null
    _sum: TrackSumAggregateOutputType | null
    _min: TrackMinAggregateOutputType | null
    _max: TrackMaxAggregateOutputType | null
  }

  type GetTrackGroupByPayload<T extends TrackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackGroupByOutputType[P]>
            : GetScalarType<T[P], TrackGroupByOutputType[P]>
        }
      >
    >


  export type TrackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    filePath?: boolean
    duration?: boolean
    isrc?: boolean
    fileName?: boolean
    artistFullName?: boolean
    fileSize?: boolean
    format?: boolean
    bitrate?: boolean
    sampleRate?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    contributors?: boolean | Track$contributorsArgs<ExtArgs>
    _count?: boolean | TrackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    filePath?: boolean
    duration?: boolean
    isrc?: boolean
    fileName?: boolean
    artistFullName?: boolean
    fileSize?: boolean
    format?: boolean
    bitrate?: boolean
    sampleRate?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    filePath?: boolean
    duration?: boolean
    isrc?: boolean
    fileName?: boolean
    artistFullName?: boolean
    fileSize?: boolean
    format?: boolean
    bitrate?: boolean
    sampleRate?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectScalar = {
    id?: boolean
    title?: boolean
    artist?: boolean
    filePath?: boolean
    duration?: boolean
    isrc?: boolean
    fileName?: boolean
    artistFullName?: boolean
    fileSize?: boolean
    format?: boolean
    bitrate?: boolean
    sampleRate?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TrackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "artist" | "filePath" | "duration" | "isrc" | "fileName" | "artistFullName" | "fileSize" | "format" | "bitrate" | "sampleRate" | "submissionId" | "createdAt" | "updatedAt", ExtArgs["result"]["track"]>
  export type TrackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    contributors?: boolean | Track$contributorsArgs<ExtArgs>
    _count?: boolean | TrackCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TrackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type TrackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }

  export type $TrackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Track"
    objects: {
      submission: Prisma.$SubmissionPayload<ExtArgs>
      contributors: Prisma.$TrackContributorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      artist: string
      filePath: string
      duration: number
      isrc: string | null
      fileName: string | null
      artistFullName: string | null
      fileSize: number | null
      format: string | null
      bitrate: string | null
      sampleRate: string | null
      submissionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["track"]>
    composites: {}
  }

  type TrackGetPayload<S extends boolean | null | undefined | TrackDefaultArgs> = $Result.GetResult<Prisma.$TrackPayload, S>

  type TrackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackCountAggregateInputType | true
    }

  export interface TrackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Track'], meta: { name: 'Track' } }
    /**
     * Find zero or one Track that matches the filter.
     * @param {TrackFindUniqueArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrackFindUniqueArgs>(args: SelectSubset<T, TrackFindUniqueArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Track that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrackFindUniqueOrThrowArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrackFindUniqueOrThrowArgs>(args: SelectSubset<T, TrackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Track that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindFirstArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrackFindFirstArgs>(args?: SelectSubset<T, TrackFindFirstArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Track that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindFirstOrThrowArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrackFindFirstOrThrowArgs>(args?: SelectSubset<T, TrackFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tracks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tracks
     * const tracks = await prisma.track.findMany()
     * 
     * // Get first 10 Tracks
     * const tracks = await prisma.track.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackWithIdOnly = await prisma.track.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrackFindManyArgs>(args?: SelectSubset<T, TrackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Track.
     * @param {TrackCreateArgs} args - Arguments to create a Track.
     * @example
     * // Create one Track
     * const Track = await prisma.track.create({
     *   data: {
     *     // ... data to create a Track
     *   }
     * })
     * 
     */
    create<T extends TrackCreateArgs>(args: SelectSubset<T, TrackCreateArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tracks.
     * @param {TrackCreateManyArgs} args - Arguments to create many Tracks.
     * @example
     * // Create many Tracks
     * const track = await prisma.track.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrackCreateManyArgs>(args?: SelectSubset<T, TrackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tracks and returns the data saved in the database.
     * @param {TrackCreateManyAndReturnArgs} args - Arguments to create many Tracks.
     * @example
     * // Create many Tracks
     * const track = await prisma.track.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tracks and only return the `id`
     * const trackWithIdOnly = await prisma.track.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrackCreateManyAndReturnArgs>(args?: SelectSubset<T, TrackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Track.
     * @param {TrackDeleteArgs} args - Arguments to delete one Track.
     * @example
     * // Delete one Track
     * const Track = await prisma.track.delete({
     *   where: {
     *     // ... filter to delete one Track
     *   }
     * })
     * 
     */
    delete<T extends TrackDeleteArgs>(args: SelectSubset<T, TrackDeleteArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Track.
     * @param {TrackUpdateArgs} args - Arguments to update one Track.
     * @example
     * // Update one Track
     * const track = await prisma.track.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrackUpdateArgs>(args: SelectSubset<T, TrackUpdateArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tracks.
     * @param {TrackDeleteManyArgs} args - Arguments to filter Tracks to delete.
     * @example
     * // Delete a few Tracks
     * const { count } = await prisma.track.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrackDeleteManyArgs>(args?: SelectSubset<T, TrackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tracks
     * const track = await prisma.track.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrackUpdateManyArgs>(args: SelectSubset<T, TrackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tracks and returns the data updated in the database.
     * @param {TrackUpdateManyAndReturnArgs} args - Arguments to update many Tracks.
     * @example
     * // Update many Tracks
     * const track = await prisma.track.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tracks and only return the `id`
     * const trackWithIdOnly = await prisma.track.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrackUpdateManyAndReturnArgs>(args: SelectSubset<T, TrackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Track.
     * @param {TrackUpsertArgs} args - Arguments to update or create a Track.
     * @example
     * // Update or create a Track
     * const track = await prisma.track.upsert({
     *   create: {
     *     // ... data to create a Track
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Track we want to update
     *   }
     * })
     */
    upsert<T extends TrackUpsertArgs>(args: SelectSubset<T, TrackUpsertArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackCountArgs} args - Arguments to filter Tracks to count.
     * @example
     * // Count the number of Tracks
     * const count = await prisma.track.count({
     *   where: {
     *     // ... the filter for the Tracks we want to count
     *   }
     * })
    **/
    count<T extends TrackCountArgs>(
      args?: Subset<T, TrackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackAggregateArgs>(args: Subset<T, TrackAggregateArgs>): Prisma.PrismaPromise<GetTrackAggregateType<T>>

    /**
     * Group by Track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrackGroupByArgs['orderBy'] }
        : { orderBy?: TrackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Track model
   */
  readonly fields: TrackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Track.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submission<T extends SubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmissionDefaultArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contributors<T extends Track$contributorsArgs<ExtArgs> = {}>(args?: Subset<T, Track$contributorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Track model
   */
  interface TrackFieldRefs {
    readonly id: FieldRef<"Track", 'String'>
    readonly title: FieldRef<"Track", 'String'>
    readonly artist: FieldRef<"Track", 'String'>
    readonly filePath: FieldRef<"Track", 'String'>
    readonly duration: FieldRef<"Track", 'Int'>
    readonly isrc: FieldRef<"Track", 'String'>
    readonly fileName: FieldRef<"Track", 'String'>
    readonly artistFullName: FieldRef<"Track", 'String'>
    readonly fileSize: FieldRef<"Track", 'Int'>
    readonly format: FieldRef<"Track", 'String'>
    readonly bitrate: FieldRef<"Track", 'String'>
    readonly sampleRate: FieldRef<"Track", 'String'>
    readonly submissionId: FieldRef<"Track", 'String'>
    readonly createdAt: FieldRef<"Track", 'DateTime'>
    readonly updatedAt: FieldRef<"Track", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Track findUnique
   */
  export type TrackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track findUniqueOrThrow
   */
  export type TrackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track findFirst
   */
  export type TrackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tracks.
     */
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track findFirstOrThrow
   */
  export type TrackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tracks.
     */
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track findMany
   */
  export type TrackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Tracks to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track create
   */
  export type TrackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The data needed to create a Track.
     */
    data: XOR<TrackCreateInput, TrackUncheckedCreateInput>
  }

  /**
   * Track createMany
   */
  export type TrackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tracks.
     */
    data: TrackCreateManyInput | TrackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Track createManyAndReturn
   */
  export type TrackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * The data used to create many Tracks.
     */
    data: TrackCreateManyInput | TrackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Track update
   */
  export type TrackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The data needed to update a Track.
     */
    data: XOR<TrackUpdateInput, TrackUncheckedUpdateInput>
    /**
     * Choose, which Track to update.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track updateMany
   */
  export type TrackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tracks.
     */
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyInput>
    /**
     * Filter which Tracks to update
     */
    where?: TrackWhereInput
    /**
     * Limit how many Tracks to update.
     */
    limit?: number
  }

  /**
   * Track updateManyAndReturn
   */
  export type TrackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * The data used to update Tracks.
     */
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyInput>
    /**
     * Filter which Tracks to update
     */
    where?: TrackWhereInput
    /**
     * Limit how many Tracks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Track upsert
   */
  export type TrackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The filter to search for the Track to update in case it exists.
     */
    where: TrackWhereUniqueInput
    /**
     * In case the Track found by the `where` argument doesn't exist, create a new Track with this data.
     */
    create: XOR<TrackCreateInput, TrackUncheckedCreateInput>
    /**
     * In case the Track was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrackUpdateInput, TrackUncheckedUpdateInput>
  }

  /**
   * Track delete
   */
  export type TrackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter which Track to delete.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track deleteMany
   */
  export type TrackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tracks to delete
     */
    where?: TrackWhereInput
    /**
     * Limit how many Tracks to delete.
     */
    limit?: number
  }

  /**
   * Track.contributors
   */
  export type Track$contributorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    where?: TrackContributorWhereInput
    orderBy?: TrackContributorOrderByWithRelationInput | TrackContributorOrderByWithRelationInput[]
    cursor?: TrackContributorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackContributorScalarFieldEnum | TrackContributorScalarFieldEnum[]
  }

  /**
   * Track without action
   */
  export type TrackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
  }


  /**
   * Model Video
   */

  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoAvgAggregateOutputType = {
    duration: number | null
  }

  export type VideoSumAggregateOutputType = {
    duration: number | null
  }

  export type VideoMinAggregateOutputType = {
    id: string | null
    title: string | null
    artist: string | null
    youtubeVideoId: string | null
    youtubeUrl: string | null
    thumbnailUrl: string | null
    duration: number | null
    description: string | null
    tags: string | null
    category: string | null
    language: string | null
    contentIdEnabled: boolean | null
    contentIdStatus: string | null
    userId: string | null
    labelId: string | null
    submissionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoMaxAggregateOutputType = {
    id: string | null
    title: string | null
    artist: string | null
    youtubeVideoId: string | null
    youtubeUrl: string | null
    thumbnailUrl: string | null
    duration: number | null
    description: string | null
    tags: string | null
    category: string | null
    language: string | null
    contentIdEnabled: boolean | null
    contentIdStatus: string | null
    userId: string | null
    labelId: string | null
    submissionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    title: number
    artist: number
    youtubeVideoId: number
    youtubeUrl: number
    thumbnailUrl: number
    duration: number
    description: number
    tags: number
    category: number
    language: number
    contentIdEnabled: number
    contentIdStatus: number
    userId: number
    labelId: number
    submissionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VideoAvgAggregateInputType = {
    duration?: true
  }

  export type VideoSumAggregateInputType = {
    duration?: true
  }

  export type VideoMinAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    youtubeVideoId?: true
    youtubeUrl?: true
    thumbnailUrl?: true
    duration?: true
    description?: true
    tags?: true
    category?: true
    language?: true
    contentIdEnabled?: true
    contentIdStatus?: true
    userId?: true
    labelId?: true
    submissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    youtubeVideoId?: true
    youtubeUrl?: true
    thumbnailUrl?: true
    duration?: true
    description?: true
    tags?: true
    category?: true
    language?: true
    contentIdEnabled?: true
    contentIdStatus?: true
    userId?: true
    labelId?: true
    submissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    youtubeVideoId?: true
    youtubeUrl?: true
    thumbnailUrl?: true
    duration?: true
    description?: true
    tags?: true
    category?: true
    language?: true
    contentIdEnabled?: true
    contentIdStatus?: true
    userId?: true
    labelId?: true
    submissionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithAggregationInput | VideoOrderByWithAggregationInput[]
    by: VideoScalarFieldEnum[] | VideoScalarFieldEnum
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _avg?: VideoAvgAggregateInputType
    _sum?: VideoSumAggregateInputType
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }

  export type VideoGroupByOutputType = {
    id: string
    title: string
    artist: string
    youtubeVideoId: string | null
    youtubeUrl: string | null
    thumbnailUrl: string | null
    duration: number | null
    description: string | null
    tags: string | null
    category: string | null
    language: string | null
    contentIdEnabled: boolean
    contentIdStatus: string | null
    userId: string
    labelId: string
    submissionId: string | null
    createdAt: Date
    updatedAt: Date
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    youtubeVideoId?: boolean
    youtubeUrl?: boolean
    thumbnailUrl?: boolean
    duration?: boolean
    description?: boolean
    tags?: boolean
    category?: boolean
    language?: boolean
    contentIdEnabled?: boolean
    contentIdStatus?: boolean
    userId?: boolean
    labelId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    submission?: boolean | Video$submissionArgs<ExtArgs>
    contributors?: boolean | Video$contributorsArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    youtubeVideoId?: boolean
    youtubeUrl?: boolean
    thumbnailUrl?: boolean
    duration?: boolean
    description?: boolean
    tags?: boolean
    category?: boolean
    language?: boolean
    contentIdEnabled?: boolean
    contentIdStatus?: boolean
    userId?: boolean
    labelId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    submission?: boolean | Video$submissionArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    youtubeVideoId?: boolean
    youtubeUrl?: boolean
    thumbnailUrl?: boolean
    duration?: boolean
    description?: boolean
    tags?: boolean
    category?: boolean
    language?: boolean
    contentIdEnabled?: boolean
    contentIdStatus?: boolean
    userId?: boolean
    labelId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    submission?: boolean | Video$submissionArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    title?: boolean
    artist?: boolean
    youtubeVideoId?: boolean
    youtubeUrl?: boolean
    thumbnailUrl?: boolean
    duration?: boolean
    description?: boolean
    tags?: boolean
    category?: boolean
    language?: boolean
    contentIdEnabled?: boolean
    contentIdStatus?: boolean
    userId?: boolean
    labelId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VideoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "artist" | "youtubeVideoId" | "youtubeUrl" | "thumbnailUrl" | "duration" | "description" | "tags" | "category" | "language" | "contentIdEnabled" | "contentIdStatus" | "userId" | "labelId" | "submissionId" | "createdAt" | "updatedAt", ExtArgs["result"]["video"]>
  export type VideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    submission?: boolean | Video$submissionArgs<ExtArgs>
    contributors?: boolean | Video$contributorsArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    submission?: boolean | Video$submissionArgs<ExtArgs>
  }
  export type VideoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    label?: boolean | LabelDefaultArgs<ExtArgs>
    submission?: boolean | Video$submissionArgs<ExtArgs>
  }

  export type $VideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Video"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      label: Prisma.$LabelPayload<ExtArgs>
      submission: Prisma.$SubmissionPayload<ExtArgs> | null
      contributors: Prisma.$VideoContributorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      artist: string
      youtubeVideoId: string | null
      youtubeUrl: string | null
      thumbnailUrl: string | null
      duration: number | null
      description: string | null
      tags: string | null
      category: string | null
      language: string | null
      contentIdEnabled: boolean
      contentIdStatus: string | null
      userId: string
      labelId: string
      submissionId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["video"]>
    composites: {}
  }

  type VideoGetPayload<S extends boolean | null | undefined | VideoDefaultArgs> = $Result.GetResult<Prisma.$VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VideoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoFindUniqueArgs>(args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Video that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoFindFirstArgs>(args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Video that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoFindManyArgs>(args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
     */
    create<T extends VideoCreateArgs>(args: SelectSubset<T, VideoCreateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Videos.
     * @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoCreateManyArgs>(args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Videos and returns the data saved in the database.
     * @param {VideoCreateManyAndReturnArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VideoCreateManyAndReturnArgs>(args?: SelectSubset<T, VideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
     */
    delete<T extends VideoDeleteArgs>(args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoUpdateArgs>(args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoDeleteManyArgs>(args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoUpdateManyArgs>(args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos and returns the data updated in the database.
     * @param {VideoUpdateManyAndReturnArgs} args - Arguments to update many Videos.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VideoUpdateManyAndReturnArgs>(args: SelectSubset<T, VideoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
     */
    upsert<T extends VideoUpsertArgs>(args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Video model
   */
  readonly fields: VideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    label<T extends LabelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabelDefaultArgs<ExtArgs>>): Prisma__LabelClient<$Result.GetResult<Prisma.$LabelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submission<T extends Video$submissionArgs<ExtArgs> = {}>(args?: Subset<T, Video$submissionArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    contributors<T extends Video$contributorsArgs<ExtArgs> = {}>(args?: Subset<T, Video$contributorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Video model
   */
  interface VideoFieldRefs {
    readonly id: FieldRef<"Video", 'String'>
    readonly title: FieldRef<"Video", 'String'>
    readonly artist: FieldRef<"Video", 'String'>
    readonly youtubeVideoId: FieldRef<"Video", 'String'>
    readonly youtubeUrl: FieldRef<"Video", 'String'>
    readonly thumbnailUrl: FieldRef<"Video", 'String'>
    readonly duration: FieldRef<"Video", 'Int'>
    readonly description: FieldRef<"Video", 'String'>
    readonly tags: FieldRef<"Video", 'String'>
    readonly category: FieldRef<"Video", 'String'>
    readonly language: FieldRef<"Video", 'String'>
    readonly contentIdEnabled: FieldRef<"Video", 'Boolean'>
    readonly contentIdStatus: FieldRef<"Video", 'String'>
    readonly userId: FieldRef<"Video", 'String'>
    readonly labelId: FieldRef<"Video", 'String'>
    readonly submissionId: FieldRef<"Video", 'String'>
    readonly createdAt: FieldRef<"Video", 'DateTime'>
    readonly updatedAt: FieldRef<"Video", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Video findUnique
   */
  export type VideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findFirst
   */
  export type VideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }

  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video createManyAndReturn
   */
  export type VideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
  }

  /**
   * Video updateManyAndReturn
   */
  export type VideoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }

  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
    /**
     * Limit how many Videos to delete.
     */
    limit?: number
  }

  /**
   * Video.submission
   */
  export type Video$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
  }

  /**
   * Video.contributors
   */
  export type Video$contributorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    where?: VideoContributorWhereInput
    orderBy?: VideoContributorOrderByWithRelationInput | VideoContributorOrderByWithRelationInput[]
    cursor?: VideoContributorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VideoContributorScalarFieldEnum | VideoContributorScalarFieldEnum[]
  }

  /**
   * Video without action
   */
  export type VideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Video
     */
    omit?: VideoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
  }


  /**
   * Model FileFolder
   */

  export type AggregateFileFolder = {
    _count: FileFolderCountAggregateOutputType | null
    _min: FileFolderMinAggregateOutputType | null
    _max: FileFolderMaxAggregateOutputType | null
  }

  export type FileFolderMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    parentId: string | null
    ownerId: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileFolderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    parentId: string | null
    ownerId: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileFolderCountAggregateOutputType = {
    id: number
    name: number
    path: number
    parentId: number
    ownerId: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileFolderMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    parentId?: true
    ownerId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileFolderMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    parentId?: true
    ownerId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileFolderCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    parentId?: true
    ownerId?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileFolderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileFolder to aggregate.
     */
    where?: FileFolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileFolders to fetch.
     */
    orderBy?: FileFolderOrderByWithRelationInput | FileFolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileFolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileFolders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileFolders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileFolders
    **/
    _count?: true | FileFolderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileFolderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileFolderMaxAggregateInputType
  }

  export type GetFileFolderAggregateType<T extends FileFolderAggregateArgs> = {
        [P in keyof T & keyof AggregateFileFolder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileFolder[P]>
      : GetScalarType<T[P], AggregateFileFolder[P]>
  }




  export type FileFolderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileFolderWhereInput
    orderBy?: FileFolderOrderByWithAggregationInput | FileFolderOrderByWithAggregationInput[]
    by: FileFolderScalarFieldEnum[] | FileFolderScalarFieldEnum
    having?: FileFolderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileFolderCountAggregateInputType | true
    _min?: FileFolderMinAggregateInputType
    _max?: FileFolderMaxAggregateInputType
  }

  export type FileFolderGroupByOutputType = {
    id: string
    name: string
    path: string
    parentId: string | null
    ownerId: string | null
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: FileFolderCountAggregateOutputType | null
    _min: FileFolderMinAggregateOutputType | null
    _max: FileFolderMaxAggregateOutputType | null
  }

  type GetFileFolderGroupByPayload<T extends FileFolderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileFolderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileFolderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileFolderGroupByOutputType[P]>
            : GetScalarType<T[P], FileFolderGroupByOutputType[P]>
        }
      >
    >


  export type FileFolderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | FileFolder$parentArgs<ExtArgs>
    children?: boolean | FileFolder$childrenArgs<ExtArgs>
    files?: boolean | FileFolder$filesArgs<ExtArgs>
    owner?: boolean | FileFolder$ownerArgs<ExtArgs>
    _count?: boolean | FileFolderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileFolder"]>

  export type FileFolderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | FileFolder$parentArgs<ExtArgs>
    owner?: boolean | FileFolder$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["fileFolder"]>

  export type FileFolderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | FileFolder$parentArgs<ExtArgs>
    owner?: boolean | FileFolder$ownerArgs<ExtArgs>
  }, ExtArgs["result"]["fileFolder"]>

  export type FileFolderSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    parentId?: boolean
    ownerId?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileFolderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "parentId" | "ownerId" | "isPublic" | "createdAt" | "updatedAt", ExtArgs["result"]["fileFolder"]>
  export type FileFolderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | FileFolder$parentArgs<ExtArgs>
    children?: boolean | FileFolder$childrenArgs<ExtArgs>
    files?: boolean | FileFolder$filesArgs<ExtArgs>
    owner?: boolean | FileFolder$ownerArgs<ExtArgs>
    _count?: boolean | FileFolderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileFolderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | FileFolder$parentArgs<ExtArgs>
    owner?: boolean | FileFolder$ownerArgs<ExtArgs>
  }
  export type FileFolderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | FileFolder$parentArgs<ExtArgs>
    owner?: boolean | FileFolder$ownerArgs<ExtArgs>
  }

  export type $FileFolderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileFolder"
    objects: {
      parent: Prisma.$FileFolderPayload<ExtArgs> | null
      children: Prisma.$FileFolderPayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      parentId: string | null
      ownerId: string | null
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fileFolder"]>
    composites: {}
  }

  type FileFolderGetPayload<S extends boolean | null | undefined | FileFolderDefaultArgs> = $Result.GetResult<Prisma.$FileFolderPayload, S>

  type FileFolderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFolderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileFolderCountAggregateInputType | true
    }

  export interface FileFolderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileFolder'], meta: { name: 'FileFolder' } }
    /**
     * Find zero or one FileFolder that matches the filter.
     * @param {FileFolderFindUniqueArgs} args - Arguments to find a FileFolder
     * @example
     * // Get one FileFolder
     * const fileFolder = await prisma.fileFolder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFolderFindUniqueArgs>(args: SelectSubset<T, FileFolderFindUniqueArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FileFolder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFolderFindUniqueOrThrowArgs} args - Arguments to find a FileFolder
     * @example
     * // Get one FileFolder
     * const fileFolder = await prisma.fileFolder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFolderFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFolderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileFolder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderFindFirstArgs} args - Arguments to find a FileFolder
     * @example
     * // Get one FileFolder
     * const fileFolder = await prisma.fileFolder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFolderFindFirstArgs>(args?: SelectSubset<T, FileFolderFindFirstArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FileFolder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderFindFirstOrThrowArgs} args - Arguments to find a FileFolder
     * @example
     * // Get one FileFolder
     * const fileFolder = await prisma.fileFolder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFolderFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFolderFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FileFolders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileFolders
     * const fileFolders = await prisma.fileFolder.findMany()
     * 
     * // Get first 10 FileFolders
     * const fileFolders = await prisma.fileFolder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileFolderWithIdOnly = await prisma.fileFolder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFolderFindManyArgs>(args?: SelectSubset<T, FileFolderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FileFolder.
     * @param {FileFolderCreateArgs} args - Arguments to create a FileFolder.
     * @example
     * // Create one FileFolder
     * const FileFolder = await prisma.fileFolder.create({
     *   data: {
     *     // ... data to create a FileFolder
     *   }
     * })
     * 
     */
    create<T extends FileFolderCreateArgs>(args: SelectSubset<T, FileFolderCreateArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FileFolders.
     * @param {FileFolderCreateManyArgs} args - Arguments to create many FileFolders.
     * @example
     * // Create many FileFolders
     * const fileFolder = await prisma.fileFolder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileFolderCreateManyArgs>(args?: SelectSubset<T, FileFolderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FileFolders and returns the data saved in the database.
     * @param {FileFolderCreateManyAndReturnArgs} args - Arguments to create many FileFolders.
     * @example
     * // Create many FileFolders
     * const fileFolder = await prisma.fileFolder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FileFolders and only return the `id`
     * const fileFolderWithIdOnly = await prisma.fileFolder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileFolderCreateManyAndReturnArgs>(args?: SelectSubset<T, FileFolderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FileFolder.
     * @param {FileFolderDeleteArgs} args - Arguments to delete one FileFolder.
     * @example
     * // Delete one FileFolder
     * const FileFolder = await prisma.fileFolder.delete({
     *   where: {
     *     // ... filter to delete one FileFolder
     *   }
     * })
     * 
     */
    delete<T extends FileFolderDeleteArgs>(args: SelectSubset<T, FileFolderDeleteArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FileFolder.
     * @param {FileFolderUpdateArgs} args - Arguments to update one FileFolder.
     * @example
     * // Update one FileFolder
     * const fileFolder = await prisma.fileFolder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileFolderUpdateArgs>(args: SelectSubset<T, FileFolderUpdateArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FileFolders.
     * @param {FileFolderDeleteManyArgs} args - Arguments to filter FileFolders to delete.
     * @example
     * // Delete a few FileFolders
     * const { count } = await prisma.fileFolder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileFolderDeleteManyArgs>(args?: SelectSubset<T, FileFolderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileFolders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileFolders
     * const fileFolder = await prisma.fileFolder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileFolderUpdateManyArgs>(args: SelectSubset<T, FileFolderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileFolders and returns the data updated in the database.
     * @param {FileFolderUpdateManyAndReturnArgs} args - Arguments to update many FileFolders.
     * @example
     * // Update many FileFolders
     * const fileFolder = await prisma.fileFolder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FileFolders and only return the `id`
     * const fileFolderWithIdOnly = await prisma.fileFolder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileFolderUpdateManyAndReturnArgs>(args: SelectSubset<T, FileFolderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FileFolder.
     * @param {FileFolderUpsertArgs} args - Arguments to update or create a FileFolder.
     * @example
     * // Update or create a FileFolder
     * const fileFolder = await prisma.fileFolder.upsert({
     *   create: {
     *     // ... data to create a FileFolder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileFolder we want to update
     *   }
     * })
     */
    upsert<T extends FileFolderUpsertArgs>(args: SelectSubset<T, FileFolderUpsertArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FileFolders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderCountArgs} args - Arguments to filter FileFolders to count.
     * @example
     * // Count the number of FileFolders
     * const count = await prisma.fileFolder.count({
     *   where: {
     *     // ... the filter for the FileFolders we want to count
     *   }
     * })
    **/
    count<T extends FileFolderCountArgs>(
      args?: Subset<T, FileFolderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileFolderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileFolder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileFolderAggregateArgs>(args: Subset<T, FileFolderAggregateArgs>): Prisma.PrismaPromise<GetFileFolderAggregateType<T>>

    /**
     * Group by FileFolder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFolderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileFolderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileFolderGroupByArgs['orderBy'] }
        : { orderBy?: FileFolderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileFolderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileFolderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileFolder model
   */
  readonly fields: FileFolderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileFolder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileFolderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends FileFolder$parentArgs<ExtArgs> = {}>(args?: Subset<T, FileFolder$parentArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends FileFolder$childrenArgs<ExtArgs> = {}>(args?: Subset<T, FileFolder$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends FileFolder$filesArgs<ExtArgs> = {}>(args?: Subset<T, FileFolder$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends FileFolder$ownerArgs<ExtArgs> = {}>(args?: Subset<T, FileFolder$ownerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileFolder model
   */
  interface FileFolderFieldRefs {
    readonly id: FieldRef<"FileFolder", 'String'>
    readonly name: FieldRef<"FileFolder", 'String'>
    readonly path: FieldRef<"FileFolder", 'String'>
    readonly parentId: FieldRef<"FileFolder", 'String'>
    readonly ownerId: FieldRef<"FileFolder", 'String'>
    readonly isPublic: FieldRef<"FileFolder", 'Boolean'>
    readonly createdAt: FieldRef<"FileFolder", 'DateTime'>
    readonly updatedAt: FieldRef<"FileFolder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FileFolder findUnique
   */
  export type FileFolderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * Filter, which FileFolder to fetch.
     */
    where: FileFolderWhereUniqueInput
  }

  /**
   * FileFolder findUniqueOrThrow
   */
  export type FileFolderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * Filter, which FileFolder to fetch.
     */
    where: FileFolderWhereUniqueInput
  }

  /**
   * FileFolder findFirst
   */
  export type FileFolderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * Filter, which FileFolder to fetch.
     */
    where?: FileFolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileFolders to fetch.
     */
    orderBy?: FileFolderOrderByWithRelationInput | FileFolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileFolders.
     */
    cursor?: FileFolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileFolders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileFolders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileFolders.
     */
    distinct?: FileFolderScalarFieldEnum | FileFolderScalarFieldEnum[]
  }

  /**
   * FileFolder findFirstOrThrow
   */
  export type FileFolderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * Filter, which FileFolder to fetch.
     */
    where?: FileFolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileFolders to fetch.
     */
    orderBy?: FileFolderOrderByWithRelationInput | FileFolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileFolders.
     */
    cursor?: FileFolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileFolders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileFolders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileFolders.
     */
    distinct?: FileFolderScalarFieldEnum | FileFolderScalarFieldEnum[]
  }

  /**
   * FileFolder findMany
   */
  export type FileFolderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * Filter, which FileFolders to fetch.
     */
    where?: FileFolderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileFolders to fetch.
     */
    orderBy?: FileFolderOrderByWithRelationInput | FileFolderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileFolders.
     */
    cursor?: FileFolderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileFolders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileFolders.
     */
    skip?: number
    distinct?: FileFolderScalarFieldEnum | FileFolderScalarFieldEnum[]
  }

  /**
   * FileFolder create
   */
  export type FileFolderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * The data needed to create a FileFolder.
     */
    data: XOR<FileFolderCreateInput, FileFolderUncheckedCreateInput>
  }

  /**
   * FileFolder createMany
   */
  export type FileFolderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileFolders.
     */
    data: FileFolderCreateManyInput | FileFolderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FileFolder createManyAndReturn
   */
  export type FileFolderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * The data used to create many FileFolders.
     */
    data: FileFolderCreateManyInput | FileFolderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileFolder update
   */
  export type FileFolderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * The data needed to update a FileFolder.
     */
    data: XOR<FileFolderUpdateInput, FileFolderUncheckedUpdateInput>
    /**
     * Choose, which FileFolder to update.
     */
    where: FileFolderWhereUniqueInput
  }

  /**
   * FileFolder updateMany
   */
  export type FileFolderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileFolders.
     */
    data: XOR<FileFolderUpdateManyMutationInput, FileFolderUncheckedUpdateManyInput>
    /**
     * Filter which FileFolders to update
     */
    where?: FileFolderWhereInput
    /**
     * Limit how many FileFolders to update.
     */
    limit?: number
  }

  /**
   * FileFolder updateManyAndReturn
   */
  export type FileFolderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * The data used to update FileFolders.
     */
    data: XOR<FileFolderUpdateManyMutationInput, FileFolderUncheckedUpdateManyInput>
    /**
     * Filter which FileFolders to update
     */
    where?: FileFolderWhereInput
    /**
     * Limit how many FileFolders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileFolder upsert
   */
  export type FileFolderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * The filter to search for the FileFolder to update in case it exists.
     */
    where: FileFolderWhereUniqueInput
    /**
     * In case the FileFolder found by the `where` argument doesn't exist, create a new FileFolder with this data.
     */
    create: XOR<FileFolderCreateInput, FileFolderUncheckedCreateInput>
    /**
     * In case the FileFolder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileFolderUpdateInput, FileFolderUncheckedUpdateInput>
  }

  /**
   * FileFolder delete
   */
  export type FileFolderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    /**
     * Filter which FileFolder to delete.
     */
    where: FileFolderWhereUniqueInput
  }

  /**
   * FileFolder deleteMany
   */
  export type FileFolderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileFolders to delete
     */
    where?: FileFolderWhereInput
    /**
     * Limit how many FileFolders to delete.
     */
    limit?: number
  }

  /**
   * FileFolder.parent
   */
  export type FileFolder$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    where?: FileFolderWhereInput
  }

  /**
   * FileFolder.children
   */
  export type FileFolder$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    where?: FileFolderWhereInput
    orderBy?: FileFolderOrderByWithRelationInput | FileFolderOrderByWithRelationInput[]
    cursor?: FileFolderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileFolderScalarFieldEnum | FileFolderScalarFieldEnum[]
  }

  /**
   * FileFolder.files
   */
  export type FileFolder$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * FileFolder.owner
   */
  export type FileFolder$ownerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FileFolder without action
   */
  export type FileFolderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
  }


  /**
   * Model SubmissionContributor
   */

  export type AggregateSubmissionContributor = {
    _count: SubmissionContributorCountAggregateOutputType | null
    _avg: SubmissionContributorAvgAggregateOutputType | null
    _sum: SubmissionContributorSumAggregateOutputType | null
    _min: SubmissionContributorMinAggregateOutputType | null
    _max: SubmissionContributorMaxAggregateOutputType | null
  }

  export type SubmissionContributorAvgAggregateOutputType = {
    percentage: number | null
  }

  export type SubmissionContributorSumAggregateOutputType = {
    percentage: number | null
  }

  export type SubmissionContributorMinAggregateOutputType = {
    id: string | null
    role: string | null
    percentage: number | null
    userId: string | null
    submissionId: string | null
    createdAt: Date | null
  }

  export type SubmissionContributorMaxAggregateOutputType = {
    id: string | null
    role: string | null
    percentage: number | null
    userId: string | null
    submissionId: string | null
    createdAt: Date | null
  }

  export type SubmissionContributorCountAggregateOutputType = {
    id: number
    role: number
    percentage: number
    userId: number
    submissionId: number
    createdAt: number
    _all: number
  }


  export type SubmissionContributorAvgAggregateInputType = {
    percentage?: true
  }

  export type SubmissionContributorSumAggregateInputType = {
    percentage?: true
  }

  export type SubmissionContributorMinAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    submissionId?: true
    createdAt?: true
  }

  export type SubmissionContributorMaxAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    submissionId?: true
    createdAt?: true
  }

  export type SubmissionContributorCountAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    submissionId?: true
    createdAt?: true
    _all?: true
  }

  export type SubmissionContributorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubmissionContributor to aggregate.
     */
    where?: SubmissionContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionContributors to fetch.
     */
    orderBy?: SubmissionContributorOrderByWithRelationInput | SubmissionContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubmissionContributors
    **/
    _count?: true | SubmissionContributorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionContributorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionContributorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionContributorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionContributorMaxAggregateInputType
  }

  export type GetSubmissionContributorAggregateType<T extends SubmissionContributorAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmissionContributor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmissionContributor[P]>
      : GetScalarType<T[P], AggregateSubmissionContributor[P]>
  }




  export type SubmissionContributorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionContributorWhereInput
    orderBy?: SubmissionContributorOrderByWithAggregationInput | SubmissionContributorOrderByWithAggregationInput[]
    by: SubmissionContributorScalarFieldEnum[] | SubmissionContributorScalarFieldEnum
    having?: SubmissionContributorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionContributorCountAggregateInputType | true
    _avg?: SubmissionContributorAvgAggregateInputType
    _sum?: SubmissionContributorSumAggregateInputType
    _min?: SubmissionContributorMinAggregateInputType
    _max?: SubmissionContributorMaxAggregateInputType
  }

  export type SubmissionContributorGroupByOutputType = {
    id: string
    role: string
    percentage: number | null
    userId: string
    submissionId: string
    createdAt: Date
    _count: SubmissionContributorCountAggregateOutputType | null
    _avg: SubmissionContributorAvgAggregateOutputType | null
    _sum: SubmissionContributorSumAggregateOutputType | null
    _min: SubmissionContributorMinAggregateOutputType | null
    _max: SubmissionContributorMaxAggregateOutputType | null
  }

  type GetSubmissionContributorGroupByPayload<T extends SubmissionContributorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionContributorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionContributorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionContributorGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionContributorGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionContributorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionContributor"]>

  export type SubmissionContributorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionContributor"]>

  export type SubmissionContributorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionContributor"]>

  export type SubmissionContributorSelectScalar = {
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
  }

  export type SubmissionContributorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "percentage" | "userId" | "submissionId" | "createdAt", ExtArgs["result"]["submissionContributor"]>
  export type SubmissionContributorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type SubmissionContributorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type SubmissionContributorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }

  export type $SubmissionContributorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubmissionContributor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      submission: Prisma.$SubmissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: string
      percentage: number | null
      userId: string
      submissionId: string
      createdAt: Date
    }, ExtArgs["result"]["submissionContributor"]>
    composites: {}
  }

  type SubmissionContributorGetPayload<S extends boolean | null | undefined | SubmissionContributorDefaultArgs> = $Result.GetResult<Prisma.$SubmissionContributorPayload, S>

  type SubmissionContributorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionContributorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionContributorCountAggregateInputType | true
    }

  export interface SubmissionContributorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubmissionContributor'], meta: { name: 'SubmissionContributor' } }
    /**
     * Find zero or one SubmissionContributor that matches the filter.
     * @param {SubmissionContributorFindUniqueArgs} args - Arguments to find a SubmissionContributor
     * @example
     * // Get one SubmissionContributor
     * const submissionContributor = await prisma.submissionContributor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionContributorFindUniqueArgs>(args: SelectSubset<T, SubmissionContributorFindUniqueArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubmissionContributor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionContributorFindUniqueOrThrowArgs} args - Arguments to find a SubmissionContributor
     * @example
     * // Get one SubmissionContributor
     * const submissionContributor = await prisma.submissionContributor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionContributorFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionContributorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubmissionContributor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorFindFirstArgs} args - Arguments to find a SubmissionContributor
     * @example
     * // Get one SubmissionContributor
     * const submissionContributor = await prisma.submissionContributor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionContributorFindFirstArgs>(args?: SelectSubset<T, SubmissionContributorFindFirstArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubmissionContributor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorFindFirstOrThrowArgs} args - Arguments to find a SubmissionContributor
     * @example
     * // Get one SubmissionContributor
     * const submissionContributor = await prisma.submissionContributor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionContributorFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionContributorFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubmissionContributors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubmissionContributors
     * const submissionContributors = await prisma.submissionContributor.findMany()
     * 
     * // Get first 10 SubmissionContributors
     * const submissionContributors = await prisma.submissionContributor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionContributorWithIdOnly = await prisma.submissionContributor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionContributorFindManyArgs>(args?: SelectSubset<T, SubmissionContributorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubmissionContributor.
     * @param {SubmissionContributorCreateArgs} args - Arguments to create a SubmissionContributor.
     * @example
     * // Create one SubmissionContributor
     * const SubmissionContributor = await prisma.submissionContributor.create({
     *   data: {
     *     // ... data to create a SubmissionContributor
     *   }
     * })
     * 
     */
    create<T extends SubmissionContributorCreateArgs>(args: SelectSubset<T, SubmissionContributorCreateArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubmissionContributors.
     * @param {SubmissionContributorCreateManyArgs} args - Arguments to create many SubmissionContributors.
     * @example
     * // Create many SubmissionContributors
     * const submissionContributor = await prisma.submissionContributor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionContributorCreateManyArgs>(args?: SelectSubset<T, SubmissionContributorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubmissionContributors and returns the data saved in the database.
     * @param {SubmissionContributorCreateManyAndReturnArgs} args - Arguments to create many SubmissionContributors.
     * @example
     * // Create many SubmissionContributors
     * const submissionContributor = await prisma.submissionContributor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubmissionContributors and only return the `id`
     * const submissionContributorWithIdOnly = await prisma.submissionContributor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionContributorCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionContributorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubmissionContributor.
     * @param {SubmissionContributorDeleteArgs} args - Arguments to delete one SubmissionContributor.
     * @example
     * // Delete one SubmissionContributor
     * const SubmissionContributor = await prisma.submissionContributor.delete({
     *   where: {
     *     // ... filter to delete one SubmissionContributor
     *   }
     * })
     * 
     */
    delete<T extends SubmissionContributorDeleteArgs>(args: SelectSubset<T, SubmissionContributorDeleteArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubmissionContributor.
     * @param {SubmissionContributorUpdateArgs} args - Arguments to update one SubmissionContributor.
     * @example
     * // Update one SubmissionContributor
     * const submissionContributor = await prisma.submissionContributor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionContributorUpdateArgs>(args: SelectSubset<T, SubmissionContributorUpdateArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubmissionContributors.
     * @param {SubmissionContributorDeleteManyArgs} args - Arguments to filter SubmissionContributors to delete.
     * @example
     * // Delete a few SubmissionContributors
     * const { count } = await prisma.submissionContributor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionContributorDeleteManyArgs>(args?: SelectSubset<T, SubmissionContributorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubmissionContributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubmissionContributors
     * const submissionContributor = await prisma.submissionContributor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionContributorUpdateManyArgs>(args: SelectSubset<T, SubmissionContributorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubmissionContributors and returns the data updated in the database.
     * @param {SubmissionContributorUpdateManyAndReturnArgs} args - Arguments to update many SubmissionContributors.
     * @example
     * // Update many SubmissionContributors
     * const submissionContributor = await prisma.submissionContributor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubmissionContributors and only return the `id`
     * const submissionContributorWithIdOnly = await prisma.submissionContributor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionContributorUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionContributorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubmissionContributor.
     * @param {SubmissionContributorUpsertArgs} args - Arguments to update or create a SubmissionContributor.
     * @example
     * // Update or create a SubmissionContributor
     * const submissionContributor = await prisma.submissionContributor.upsert({
     *   create: {
     *     // ... data to create a SubmissionContributor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubmissionContributor we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionContributorUpsertArgs>(args: SelectSubset<T, SubmissionContributorUpsertArgs<ExtArgs>>): Prisma__SubmissionContributorClient<$Result.GetResult<Prisma.$SubmissionContributorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubmissionContributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorCountArgs} args - Arguments to filter SubmissionContributors to count.
     * @example
     * // Count the number of SubmissionContributors
     * const count = await prisma.submissionContributor.count({
     *   where: {
     *     // ... the filter for the SubmissionContributors we want to count
     *   }
     * })
    **/
    count<T extends SubmissionContributorCountArgs>(
      args?: Subset<T, SubmissionContributorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionContributorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubmissionContributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionContributorAggregateArgs>(args: Subset<T, SubmissionContributorAggregateArgs>): Prisma.PrismaPromise<GetSubmissionContributorAggregateType<T>>

    /**
     * Group by SubmissionContributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionContributorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionContributorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionContributorGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionContributorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionContributorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionContributorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubmissionContributor model
   */
  readonly fields: SubmissionContributorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubmissionContributor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionContributorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submission<T extends SubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmissionDefaultArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubmissionContributor model
   */
  interface SubmissionContributorFieldRefs {
    readonly id: FieldRef<"SubmissionContributor", 'String'>
    readonly role: FieldRef<"SubmissionContributor", 'String'>
    readonly percentage: FieldRef<"SubmissionContributor", 'Float'>
    readonly userId: FieldRef<"SubmissionContributor", 'String'>
    readonly submissionId: FieldRef<"SubmissionContributor", 'String'>
    readonly createdAt: FieldRef<"SubmissionContributor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubmissionContributor findUnique
   */
  export type SubmissionContributorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionContributor to fetch.
     */
    where: SubmissionContributorWhereUniqueInput
  }

  /**
   * SubmissionContributor findUniqueOrThrow
   */
  export type SubmissionContributorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionContributor to fetch.
     */
    where: SubmissionContributorWhereUniqueInput
  }

  /**
   * SubmissionContributor findFirst
   */
  export type SubmissionContributorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionContributor to fetch.
     */
    where?: SubmissionContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionContributors to fetch.
     */
    orderBy?: SubmissionContributorOrderByWithRelationInput | SubmissionContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubmissionContributors.
     */
    cursor?: SubmissionContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubmissionContributors.
     */
    distinct?: SubmissionContributorScalarFieldEnum | SubmissionContributorScalarFieldEnum[]
  }

  /**
   * SubmissionContributor findFirstOrThrow
   */
  export type SubmissionContributorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionContributor to fetch.
     */
    where?: SubmissionContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionContributors to fetch.
     */
    orderBy?: SubmissionContributorOrderByWithRelationInput | SubmissionContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubmissionContributors.
     */
    cursor?: SubmissionContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubmissionContributors.
     */
    distinct?: SubmissionContributorScalarFieldEnum | SubmissionContributorScalarFieldEnum[]
  }

  /**
   * SubmissionContributor findMany
   */
  export type SubmissionContributorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionContributors to fetch.
     */
    where?: SubmissionContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionContributors to fetch.
     */
    orderBy?: SubmissionContributorOrderByWithRelationInput | SubmissionContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubmissionContributors.
     */
    cursor?: SubmissionContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionContributors.
     */
    skip?: number
    distinct?: SubmissionContributorScalarFieldEnum | SubmissionContributorScalarFieldEnum[]
  }

  /**
   * SubmissionContributor create
   */
  export type SubmissionContributorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * The data needed to create a SubmissionContributor.
     */
    data: XOR<SubmissionContributorCreateInput, SubmissionContributorUncheckedCreateInput>
  }

  /**
   * SubmissionContributor createMany
   */
  export type SubmissionContributorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubmissionContributors.
     */
    data: SubmissionContributorCreateManyInput | SubmissionContributorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubmissionContributor createManyAndReturn
   */
  export type SubmissionContributorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * The data used to create many SubmissionContributors.
     */
    data: SubmissionContributorCreateManyInput | SubmissionContributorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubmissionContributor update
   */
  export type SubmissionContributorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * The data needed to update a SubmissionContributor.
     */
    data: XOR<SubmissionContributorUpdateInput, SubmissionContributorUncheckedUpdateInput>
    /**
     * Choose, which SubmissionContributor to update.
     */
    where: SubmissionContributorWhereUniqueInput
  }

  /**
   * SubmissionContributor updateMany
   */
  export type SubmissionContributorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubmissionContributors.
     */
    data: XOR<SubmissionContributorUpdateManyMutationInput, SubmissionContributorUncheckedUpdateManyInput>
    /**
     * Filter which SubmissionContributors to update
     */
    where?: SubmissionContributorWhereInput
    /**
     * Limit how many SubmissionContributors to update.
     */
    limit?: number
  }

  /**
   * SubmissionContributor updateManyAndReturn
   */
  export type SubmissionContributorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * The data used to update SubmissionContributors.
     */
    data: XOR<SubmissionContributorUpdateManyMutationInput, SubmissionContributorUncheckedUpdateManyInput>
    /**
     * Filter which SubmissionContributors to update
     */
    where?: SubmissionContributorWhereInput
    /**
     * Limit how many SubmissionContributors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubmissionContributor upsert
   */
  export type SubmissionContributorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * The filter to search for the SubmissionContributor to update in case it exists.
     */
    where: SubmissionContributorWhereUniqueInput
    /**
     * In case the SubmissionContributor found by the `where` argument doesn't exist, create a new SubmissionContributor with this data.
     */
    create: XOR<SubmissionContributorCreateInput, SubmissionContributorUncheckedCreateInput>
    /**
     * In case the SubmissionContributor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionContributorUpdateInput, SubmissionContributorUncheckedUpdateInput>
  }

  /**
   * SubmissionContributor delete
   */
  export type SubmissionContributorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
    /**
     * Filter which SubmissionContributor to delete.
     */
    where: SubmissionContributorWhereUniqueInput
  }

  /**
   * SubmissionContributor deleteMany
   */
  export type SubmissionContributorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubmissionContributors to delete
     */
    where?: SubmissionContributorWhereInput
    /**
     * Limit how many SubmissionContributors to delete.
     */
    limit?: number
  }

  /**
   * SubmissionContributor without action
   */
  export type SubmissionContributorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionContributor
     */
    select?: SubmissionContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionContributor
     */
    omit?: SubmissionContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionContributorInclude<ExtArgs> | null
  }


  /**
   * Model TrackContributor
   */

  export type AggregateTrackContributor = {
    _count: TrackContributorCountAggregateOutputType | null
    _avg: TrackContributorAvgAggregateOutputType | null
    _sum: TrackContributorSumAggregateOutputType | null
    _min: TrackContributorMinAggregateOutputType | null
    _max: TrackContributorMaxAggregateOutputType | null
  }

  export type TrackContributorAvgAggregateOutputType = {
    percentage: number | null
  }

  export type TrackContributorSumAggregateOutputType = {
    percentage: number | null
  }

  export type TrackContributorMinAggregateOutputType = {
    id: string | null
    role: $Enums.ContributorRole | null
    percentage: number | null
    userId: string | null
    trackId: string | null
    createdAt: Date | null
  }

  export type TrackContributorMaxAggregateOutputType = {
    id: string | null
    role: $Enums.ContributorRole | null
    percentage: number | null
    userId: string | null
    trackId: string | null
    createdAt: Date | null
  }

  export type TrackContributorCountAggregateOutputType = {
    id: number
    role: number
    percentage: number
    userId: number
    trackId: number
    createdAt: number
    _all: number
  }


  export type TrackContributorAvgAggregateInputType = {
    percentage?: true
  }

  export type TrackContributorSumAggregateInputType = {
    percentage?: true
  }

  export type TrackContributorMinAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    trackId?: true
    createdAt?: true
  }

  export type TrackContributorMaxAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    trackId?: true
    createdAt?: true
  }

  export type TrackContributorCountAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    trackId?: true
    createdAt?: true
    _all?: true
  }

  export type TrackContributorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrackContributor to aggregate.
     */
    where?: TrackContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackContributors to fetch.
     */
    orderBy?: TrackContributorOrderByWithRelationInput | TrackContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrackContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TrackContributors
    **/
    _count?: true | TrackContributorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackContributorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackContributorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackContributorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackContributorMaxAggregateInputType
  }

  export type GetTrackContributorAggregateType<T extends TrackContributorAggregateArgs> = {
        [P in keyof T & keyof AggregateTrackContributor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrackContributor[P]>
      : GetScalarType<T[P], AggregateTrackContributor[P]>
  }




  export type TrackContributorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackContributorWhereInput
    orderBy?: TrackContributorOrderByWithAggregationInput | TrackContributorOrderByWithAggregationInput[]
    by: TrackContributorScalarFieldEnum[] | TrackContributorScalarFieldEnum
    having?: TrackContributorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackContributorCountAggregateInputType | true
    _avg?: TrackContributorAvgAggregateInputType
    _sum?: TrackContributorSumAggregateInputType
    _min?: TrackContributorMinAggregateInputType
    _max?: TrackContributorMaxAggregateInputType
  }

  export type TrackContributorGroupByOutputType = {
    id: string
    role: $Enums.ContributorRole
    percentage: number | null
    userId: string
    trackId: string
    createdAt: Date
    _count: TrackContributorCountAggregateOutputType | null
    _avg: TrackContributorAvgAggregateOutputType | null
    _sum: TrackContributorSumAggregateOutputType | null
    _min: TrackContributorMinAggregateOutputType | null
    _max: TrackContributorMaxAggregateOutputType | null
  }

  type GetTrackContributorGroupByPayload<T extends TrackContributorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackContributorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackContributorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackContributorGroupByOutputType[P]>
            : GetScalarType<T[P], TrackContributorGroupByOutputType[P]>
        }
      >
    >


  export type TrackContributorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    trackId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackContributor"]>

  export type TrackContributorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    trackId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackContributor"]>

  export type TrackContributorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    trackId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["trackContributor"]>

  export type TrackContributorSelectScalar = {
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    trackId?: boolean
    createdAt?: boolean
  }

  export type TrackContributorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "percentage" | "userId" | "trackId" | "createdAt", ExtArgs["result"]["trackContributor"]>
  export type TrackContributorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }
  export type TrackContributorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }
  export type TrackContributorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    track?: boolean | TrackDefaultArgs<ExtArgs>
  }

  export type $TrackContributorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TrackContributor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      track: Prisma.$TrackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.ContributorRole
      percentage: number | null
      userId: string
      trackId: string
      createdAt: Date
    }, ExtArgs["result"]["trackContributor"]>
    composites: {}
  }

  type TrackContributorGetPayload<S extends boolean | null | undefined | TrackContributorDefaultArgs> = $Result.GetResult<Prisma.$TrackContributorPayload, S>

  type TrackContributorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrackContributorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackContributorCountAggregateInputType | true
    }

  export interface TrackContributorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrackContributor'], meta: { name: 'TrackContributor' } }
    /**
     * Find zero or one TrackContributor that matches the filter.
     * @param {TrackContributorFindUniqueArgs} args - Arguments to find a TrackContributor
     * @example
     * // Get one TrackContributor
     * const trackContributor = await prisma.trackContributor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrackContributorFindUniqueArgs>(args: SelectSubset<T, TrackContributorFindUniqueArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TrackContributor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrackContributorFindUniqueOrThrowArgs} args - Arguments to find a TrackContributor
     * @example
     * // Get one TrackContributor
     * const trackContributor = await prisma.trackContributor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrackContributorFindUniqueOrThrowArgs>(args: SelectSubset<T, TrackContributorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrackContributor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorFindFirstArgs} args - Arguments to find a TrackContributor
     * @example
     * // Get one TrackContributor
     * const trackContributor = await prisma.trackContributor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrackContributorFindFirstArgs>(args?: SelectSubset<T, TrackContributorFindFirstArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TrackContributor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorFindFirstOrThrowArgs} args - Arguments to find a TrackContributor
     * @example
     * // Get one TrackContributor
     * const trackContributor = await prisma.trackContributor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrackContributorFindFirstOrThrowArgs>(args?: SelectSubset<T, TrackContributorFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TrackContributors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TrackContributors
     * const trackContributors = await prisma.trackContributor.findMany()
     * 
     * // Get first 10 TrackContributors
     * const trackContributors = await prisma.trackContributor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackContributorWithIdOnly = await prisma.trackContributor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrackContributorFindManyArgs>(args?: SelectSubset<T, TrackContributorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TrackContributor.
     * @param {TrackContributorCreateArgs} args - Arguments to create a TrackContributor.
     * @example
     * // Create one TrackContributor
     * const TrackContributor = await prisma.trackContributor.create({
     *   data: {
     *     // ... data to create a TrackContributor
     *   }
     * })
     * 
     */
    create<T extends TrackContributorCreateArgs>(args: SelectSubset<T, TrackContributorCreateArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TrackContributors.
     * @param {TrackContributorCreateManyArgs} args - Arguments to create many TrackContributors.
     * @example
     * // Create many TrackContributors
     * const trackContributor = await prisma.trackContributor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrackContributorCreateManyArgs>(args?: SelectSubset<T, TrackContributorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TrackContributors and returns the data saved in the database.
     * @param {TrackContributorCreateManyAndReturnArgs} args - Arguments to create many TrackContributors.
     * @example
     * // Create many TrackContributors
     * const trackContributor = await prisma.trackContributor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TrackContributors and only return the `id`
     * const trackContributorWithIdOnly = await prisma.trackContributor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrackContributorCreateManyAndReturnArgs>(args?: SelectSubset<T, TrackContributorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TrackContributor.
     * @param {TrackContributorDeleteArgs} args - Arguments to delete one TrackContributor.
     * @example
     * // Delete one TrackContributor
     * const TrackContributor = await prisma.trackContributor.delete({
     *   where: {
     *     // ... filter to delete one TrackContributor
     *   }
     * })
     * 
     */
    delete<T extends TrackContributorDeleteArgs>(args: SelectSubset<T, TrackContributorDeleteArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TrackContributor.
     * @param {TrackContributorUpdateArgs} args - Arguments to update one TrackContributor.
     * @example
     * // Update one TrackContributor
     * const trackContributor = await prisma.trackContributor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrackContributorUpdateArgs>(args: SelectSubset<T, TrackContributorUpdateArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TrackContributors.
     * @param {TrackContributorDeleteManyArgs} args - Arguments to filter TrackContributors to delete.
     * @example
     * // Delete a few TrackContributors
     * const { count } = await prisma.trackContributor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrackContributorDeleteManyArgs>(args?: SelectSubset<T, TrackContributorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrackContributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TrackContributors
     * const trackContributor = await prisma.trackContributor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrackContributorUpdateManyArgs>(args: SelectSubset<T, TrackContributorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TrackContributors and returns the data updated in the database.
     * @param {TrackContributorUpdateManyAndReturnArgs} args - Arguments to update many TrackContributors.
     * @example
     * // Update many TrackContributors
     * const trackContributor = await prisma.trackContributor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TrackContributors and only return the `id`
     * const trackContributorWithIdOnly = await prisma.trackContributor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrackContributorUpdateManyAndReturnArgs>(args: SelectSubset<T, TrackContributorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TrackContributor.
     * @param {TrackContributorUpsertArgs} args - Arguments to update or create a TrackContributor.
     * @example
     * // Update or create a TrackContributor
     * const trackContributor = await prisma.trackContributor.upsert({
     *   create: {
     *     // ... data to create a TrackContributor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TrackContributor we want to update
     *   }
     * })
     */
    upsert<T extends TrackContributorUpsertArgs>(args: SelectSubset<T, TrackContributorUpsertArgs<ExtArgs>>): Prisma__TrackContributorClient<$Result.GetResult<Prisma.$TrackContributorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TrackContributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorCountArgs} args - Arguments to filter TrackContributors to count.
     * @example
     * // Count the number of TrackContributors
     * const count = await prisma.trackContributor.count({
     *   where: {
     *     // ... the filter for the TrackContributors we want to count
     *   }
     * })
    **/
    count<T extends TrackContributorCountArgs>(
      args?: Subset<T, TrackContributorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackContributorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TrackContributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackContributorAggregateArgs>(args: Subset<T, TrackContributorAggregateArgs>): Prisma.PrismaPromise<GetTrackContributorAggregateType<T>>

    /**
     * Group by TrackContributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackContributorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrackContributorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrackContributorGroupByArgs['orderBy'] }
        : { orderBy?: TrackContributorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrackContributorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackContributorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TrackContributor model
   */
  readonly fields: TrackContributorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TrackContributor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrackContributorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    track<T extends TrackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TrackDefaultArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TrackContributor model
   */
  interface TrackContributorFieldRefs {
    readonly id: FieldRef<"TrackContributor", 'String'>
    readonly role: FieldRef<"TrackContributor", 'ContributorRole'>
    readonly percentage: FieldRef<"TrackContributor", 'Float'>
    readonly userId: FieldRef<"TrackContributor", 'String'>
    readonly trackId: FieldRef<"TrackContributor", 'String'>
    readonly createdAt: FieldRef<"TrackContributor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TrackContributor findUnique
   */
  export type TrackContributorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * Filter, which TrackContributor to fetch.
     */
    where: TrackContributorWhereUniqueInput
  }

  /**
   * TrackContributor findUniqueOrThrow
   */
  export type TrackContributorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * Filter, which TrackContributor to fetch.
     */
    where: TrackContributorWhereUniqueInput
  }

  /**
   * TrackContributor findFirst
   */
  export type TrackContributorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * Filter, which TrackContributor to fetch.
     */
    where?: TrackContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackContributors to fetch.
     */
    orderBy?: TrackContributorOrderByWithRelationInput | TrackContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrackContributors.
     */
    cursor?: TrackContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrackContributors.
     */
    distinct?: TrackContributorScalarFieldEnum | TrackContributorScalarFieldEnum[]
  }

  /**
   * TrackContributor findFirstOrThrow
   */
  export type TrackContributorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * Filter, which TrackContributor to fetch.
     */
    where?: TrackContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackContributors to fetch.
     */
    orderBy?: TrackContributorOrderByWithRelationInput | TrackContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TrackContributors.
     */
    cursor?: TrackContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TrackContributors.
     */
    distinct?: TrackContributorScalarFieldEnum | TrackContributorScalarFieldEnum[]
  }

  /**
   * TrackContributor findMany
   */
  export type TrackContributorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * Filter, which TrackContributors to fetch.
     */
    where?: TrackContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TrackContributors to fetch.
     */
    orderBy?: TrackContributorOrderByWithRelationInput | TrackContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TrackContributors.
     */
    cursor?: TrackContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TrackContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TrackContributors.
     */
    skip?: number
    distinct?: TrackContributorScalarFieldEnum | TrackContributorScalarFieldEnum[]
  }

  /**
   * TrackContributor create
   */
  export type TrackContributorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * The data needed to create a TrackContributor.
     */
    data: XOR<TrackContributorCreateInput, TrackContributorUncheckedCreateInput>
  }

  /**
   * TrackContributor createMany
   */
  export type TrackContributorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TrackContributors.
     */
    data: TrackContributorCreateManyInput | TrackContributorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TrackContributor createManyAndReturn
   */
  export type TrackContributorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * The data used to create many TrackContributors.
     */
    data: TrackContributorCreateManyInput | TrackContributorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrackContributor update
   */
  export type TrackContributorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * The data needed to update a TrackContributor.
     */
    data: XOR<TrackContributorUpdateInput, TrackContributorUncheckedUpdateInput>
    /**
     * Choose, which TrackContributor to update.
     */
    where: TrackContributorWhereUniqueInput
  }

  /**
   * TrackContributor updateMany
   */
  export type TrackContributorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TrackContributors.
     */
    data: XOR<TrackContributorUpdateManyMutationInput, TrackContributorUncheckedUpdateManyInput>
    /**
     * Filter which TrackContributors to update
     */
    where?: TrackContributorWhereInput
    /**
     * Limit how many TrackContributors to update.
     */
    limit?: number
  }

  /**
   * TrackContributor updateManyAndReturn
   */
  export type TrackContributorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * The data used to update TrackContributors.
     */
    data: XOR<TrackContributorUpdateManyMutationInput, TrackContributorUncheckedUpdateManyInput>
    /**
     * Filter which TrackContributors to update
     */
    where?: TrackContributorWhereInput
    /**
     * Limit how many TrackContributors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TrackContributor upsert
   */
  export type TrackContributorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * The filter to search for the TrackContributor to update in case it exists.
     */
    where: TrackContributorWhereUniqueInput
    /**
     * In case the TrackContributor found by the `where` argument doesn't exist, create a new TrackContributor with this data.
     */
    create: XOR<TrackContributorCreateInput, TrackContributorUncheckedCreateInput>
    /**
     * In case the TrackContributor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrackContributorUpdateInput, TrackContributorUncheckedUpdateInput>
  }

  /**
   * TrackContributor delete
   */
  export type TrackContributorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
    /**
     * Filter which TrackContributor to delete.
     */
    where: TrackContributorWhereUniqueInput
  }

  /**
   * TrackContributor deleteMany
   */
  export type TrackContributorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TrackContributors to delete
     */
    where?: TrackContributorWhereInput
    /**
     * Limit how many TrackContributors to delete.
     */
    limit?: number
  }

  /**
   * TrackContributor without action
   */
  export type TrackContributorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TrackContributor
     */
    select?: TrackContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TrackContributor
     */
    omit?: TrackContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackContributorInclude<ExtArgs> | null
  }


  /**
   * Model VideoContributor
   */

  export type AggregateVideoContributor = {
    _count: VideoContributorCountAggregateOutputType | null
    _avg: VideoContributorAvgAggregateOutputType | null
    _sum: VideoContributorSumAggregateOutputType | null
    _min: VideoContributorMinAggregateOutputType | null
    _max: VideoContributorMaxAggregateOutputType | null
  }

  export type VideoContributorAvgAggregateOutputType = {
    percentage: number | null
  }

  export type VideoContributorSumAggregateOutputType = {
    percentage: number | null
  }

  export type VideoContributorMinAggregateOutputType = {
    id: string | null
    role: string | null
    percentage: number | null
    userId: string | null
    videoId: string | null
    createdAt: Date | null
  }

  export type VideoContributorMaxAggregateOutputType = {
    id: string | null
    role: string | null
    percentage: number | null
    userId: string | null
    videoId: string | null
    createdAt: Date | null
  }

  export type VideoContributorCountAggregateOutputType = {
    id: number
    role: number
    percentage: number
    userId: number
    videoId: number
    createdAt: number
    _all: number
  }


  export type VideoContributorAvgAggregateInputType = {
    percentage?: true
  }

  export type VideoContributorSumAggregateInputType = {
    percentage?: true
  }

  export type VideoContributorMinAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    videoId?: true
    createdAt?: true
  }

  export type VideoContributorMaxAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    videoId?: true
    createdAt?: true
  }

  export type VideoContributorCountAggregateInputType = {
    id?: true
    role?: true
    percentage?: true
    userId?: true
    videoId?: true
    createdAt?: true
    _all?: true
  }

  export type VideoContributorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VideoContributor to aggregate.
     */
    where?: VideoContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoContributors to fetch.
     */
    orderBy?: VideoContributorOrderByWithRelationInput | VideoContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VideoContributors
    **/
    _count?: true | VideoContributorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoContributorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoContributorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoContributorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoContributorMaxAggregateInputType
  }

  export type GetVideoContributorAggregateType<T extends VideoContributorAggregateArgs> = {
        [P in keyof T & keyof AggregateVideoContributor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideoContributor[P]>
      : GetScalarType<T[P], AggregateVideoContributor[P]>
  }




  export type VideoContributorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoContributorWhereInput
    orderBy?: VideoContributorOrderByWithAggregationInput | VideoContributorOrderByWithAggregationInput[]
    by: VideoContributorScalarFieldEnum[] | VideoContributorScalarFieldEnum
    having?: VideoContributorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoContributorCountAggregateInputType | true
    _avg?: VideoContributorAvgAggregateInputType
    _sum?: VideoContributorSumAggregateInputType
    _min?: VideoContributorMinAggregateInputType
    _max?: VideoContributorMaxAggregateInputType
  }

  export type VideoContributorGroupByOutputType = {
    id: string
    role: string
    percentage: number | null
    userId: string
    videoId: string
    createdAt: Date
    _count: VideoContributorCountAggregateOutputType | null
    _avg: VideoContributorAvgAggregateOutputType | null
    _sum: VideoContributorSumAggregateOutputType | null
    _min: VideoContributorMinAggregateOutputType | null
    _max: VideoContributorMaxAggregateOutputType | null
  }

  type GetVideoContributorGroupByPayload<T extends VideoContributorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoContributorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoContributorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoContributorGroupByOutputType[P]>
            : GetScalarType<T[P], VideoContributorGroupByOutputType[P]>
        }
      >
    >


  export type VideoContributorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    videoId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videoContributor"]>

  export type VideoContributorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    videoId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videoContributor"]>

  export type VideoContributorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    videoId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["videoContributor"]>

  export type VideoContributorSelectScalar = {
    id?: boolean
    role?: boolean
    percentage?: boolean
    userId?: boolean
    videoId?: boolean
    createdAt?: boolean
  }

  export type VideoContributorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role" | "percentage" | "userId" | "videoId" | "createdAt", ExtArgs["result"]["videoContributor"]>
  export type VideoContributorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type VideoContributorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type VideoContributorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $VideoContributorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VideoContributor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      video: Prisma.$VideoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: string
      percentage: number | null
      userId: string
      videoId: string
      createdAt: Date
    }, ExtArgs["result"]["videoContributor"]>
    composites: {}
  }

  type VideoContributorGetPayload<S extends boolean | null | undefined | VideoContributorDefaultArgs> = $Result.GetResult<Prisma.$VideoContributorPayload, S>

  type VideoContributorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VideoContributorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VideoContributorCountAggregateInputType | true
    }

  export interface VideoContributorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VideoContributor'], meta: { name: 'VideoContributor' } }
    /**
     * Find zero or one VideoContributor that matches the filter.
     * @param {VideoContributorFindUniqueArgs} args - Arguments to find a VideoContributor
     * @example
     * // Get one VideoContributor
     * const videoContributor = await prisma.videoContributor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoContributorFindUniqueArgs>(args: SelectSubset<T, VideoContributorFindUniqueArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VideoContributor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VideoContributorFindUniqueOrThrowArgs} args - Arguments to find a VideoContributor
     * @example
     * // Get one VideoContributor
     * const videoContributor = await prisma.videoContributor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoContributorFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoContributorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VideoContributor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorFindFirstArgs} args - Arguments to find a VideoContributor
     * @example
     * // Get one VideoContributor
     * const videoContributor = await prisma.videoContributor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoContributorFindFirstArgs>(args?: SelectSubset<T, VideoContributorFindFirstArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VideoContributor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorFindFirstOrThrowArgs} args - Arguments to find a VideoContributor
     * @example
     * // Get one VideoContributor
     * const videoContributor = await prisma.videoContributor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoContributorFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoContributorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VideoContributors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VideoContributors
     * const videoContributors = await prisma.videoContributor.findMany()
     * 
     * // Get first 10 VideoContributors
     * const videoContributors = await prisma.videoContributor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoContributorWithIdOnly = await prisma.videoContributor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoContributorFindManyArgs>(args?: SelectSubset<T, VideoContributorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VideoContributor.
     * @param {VideoContributorCreateArgs} args - Arguments to create a VideoContributor.
     * @example
     * // Create one VideoContributor
     * const VideoContributor = await prisma.videoContributor.create({
     *   data: {
     *     // ... data to create a VideoContributor
     *   }
     * })
     * 
     */
    create<T extends VideoContributorCreateArgs>(args: SelectSubset<T, VideoContributorCreateArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VideoContributors.
     * @param {VideoContributorCreateManyArgs} args - Arguments to create many VideoContributors.
     * @example
     * // Create many VideoContributors
     * const videoContributor = await prisma.videoContributor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoContributorCreateManyArgs>(args?: SelectSubset<T, VideoContributorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VideoContributors and returns the data saved in the database.
     * @param {VideoContributorCreateManyAndReturnArgs} args - Arguments to create many VideoContributors.
     * @example
     * // Create many VideoContributors
     * const videoContributor = await prisma.videoContributor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VideoContributors and only return the `id`
     * const videoContributorWithIdOnly = await prisma.videoContributor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VideoContributorCreateManyAndReturnArgs>(args?: SelectSubset<T, VideoContributorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VideoContributor.
     * @param {VideoContributorDeleteArgs} args - Arguments to delete one VideoContributor.
     * @example
     * // Delete one VideoContributor
     * const VideoContributor = await prisma.videoContributor.delete({
     *   where: {
     *     // ... filter to delete one VideoContributor
     *   }
     * })
     * 
     */
    delete<T extends VideoContributorDeleteArgs>(args: SelectSubset<T, VideoContributorDeleteArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VideoContributor.
     * @param {VideoContributorUpdateArgs} args - Arguments to update one VideoContributor.
     * @example
     * // Update one VideoContributor
     * const videoContributor = await prisma.videoContributor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoContributorUpdateArgs>(args: SelectSubset<T, VideoContributorUpdateArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VideoContributors.
     * @param {VideoContributorDeleteManyArgs} args - Arguments to filter VideoContributors to delete.
     * @example
     * // Delete a few VideoContributors
     * const { count } = await prisma.videoContributor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoContributorDeleteManyArgs>(args?: SelectSubset<T, VideoContributorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VideoContributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VideoContributors
     * const videoContributor = await prisma.videoContributor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoContributorUpdateManyArgs>(args: SelectSubset<T, VideoContributorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VideoContributors and returns the data updated in the database.
     * @param {VideoContributorUpdateManyAndReturnArgs} args - Arguments to update many VideoContributors.
     * @example
     * // Update many VideoContributors
     * const videoContributor = await prisma.videoContributor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VideoContributors and only return the `id`
     * const videoContributorWithIdOnly = await prisma.videoContributor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VideoContributorUpdateManyAndReturnArgs>(args: SelectSubset<T, VideoContributorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VideoContributor.
     * @param {VideoContributorUpsertArgs} args - Arguments to update or create a VideoContributor.
     * @example
     * // Update or create a VideoContributor
     * const videoContributor = await prisma.videoContributor.upsert({
     *   create: {
     *     // ... data to create a VideoContributor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VideoContributor we want to update
     *   }
     * })
     */
    upsert<T extends VideoContributorUpsertArgs>(args: SelectSubset<T, VideoContributorUpsertArgs<ExtArgs>>): Prisma__VideoContributorClient<$Result.GetResult<Prisma.$VideoContributorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VideoContributors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorCountArgs} args - Arguments to filter VideoContributors to count.
     * @example
     * // Count the number of VideoContributors
     * const count = await prisma.videoContributor.count({
     *   where: {
     *     // ... the filter for the VideoContributors we want to count
     *   }
     * })
    **/
    count<T extends VideoContributorCountArgs>(
      args?: Subset<T, VideoContributorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoContributorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VideoContributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoContributorAggregateArgs>(args: Subset<T, VideoContributorAggregateArgs>): Prisma.PrismaPromise<GetVideoContributorAggregateType<T>>

    /**
     * Group by VideoContributor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoContributorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoContributorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoContributorGroupByArgs['orderBy'] }
        : { orderBy?: VideoContributorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoContributorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoContributorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VideoContributor model
   */
  readonly fields: VideoContributorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VideoContributor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoContributorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VideoContributor model
   */
  interface VideoContributorFieldRefs {
    readonly id: FieldRef<"VideoContributor", 'String'>
    readonly role: FieldRef<"VideoContributor", 'String'>
    readonly percentage: FieldRef<"VideoContributor", 'Float'>
    readonly userId: FieldRef<"VideoContributor", 'String'>
    readonly videoId: FieldRef<"VideoContributor", 'String'>
    readonly createdAt: FieldRef<"VideoContributor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VideoContributor findUnique
   */
  export type VideoContributorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * Filter, which VideoContributor to fetch.
     */
    where: VideoContributorWhereUniqueInput
  }

  /**
   * VideoContributor findUniqueOrThrow
   */
  export type VideoContributorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * Filter, which VideoContributor to fetch.
     */
    where: VideoContributorWhereUniqueInput
  }

  /**
   * VideoContributor findFirst
   */
  export type VideoContributorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * Filter, which VideoContributor to fetch.
     */
    where?: VideoContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoContributors to fetch.
     */
    orderBy?: VideoContributorOrderByWithRelationInput | VideoContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideoContributors.
     */
    cursor?: VideoContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideoContributors.
     */
    distinct?: VideoContributorScalarFieldEnum | VideoContributorScalarFieldEnum[]
  }

  /**
   * VideoContributor findFirstOrThrow
   */
  export type VideoContributorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * Filter, which VideoContributor to fetch.
     */
    where?: VideoContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoContributors to fetch.
     */
    orderBy?: VideoContributorOrderByWithRelationInput | VideoContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideoContributors.
     */
    cursor?: VideoContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoContributors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideoContributors.
     */
    distinct?: VideoContributorScalarFieldEnum | VideoContributorScalarFieldEnum[]
  }

  /**
   * VideoContributor findMany
   */
  export type VideoContributorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * Filter, which VideoContributors to fetch.
     */
    where?: VideoContributorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoContributors to fetch.
     */
    orderBy?: VideoContributorOrderByWithRelationInput | VideoContributorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VideoContributors.
     */
    cursor?: VideoContributorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoContributors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoContributors.
     */
    skip?: number
    distinct?: VideoContributorScalarFieldEnum | VideoContributorScalarFieldEnum[]
  }

  /**
   * VideoContributor create
   */
  export type VideoContributorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * The data needed to create a VideoContributor.
     */
    data: XOR<VideoContributorCreateInput, VideoContributorUncheckedCreateInput>
  }

  /**
   * VideoContributor createMany
   */
  export type VideoContributorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VideoContributors.
     */
    data: VideoContributorCreateManyInput | VideoContributorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VideoContributor createManyAndReturn
   */
  export type VideoContributorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * The data used to create many VideoContributors.
     */
    data: VideoContributorCreateManyInput | VideoContributorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VideoContributor update
   */
  export type VideoContributorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * The data needed to update a VideoContributor.
     */
    data: XOR<VideoContributorUpdateInput, VideoContributorUncheckedUpdateInput>
    /**
     * Choose, which VideoContributor to update.
     */
    where: VideoContributorWhereUniqueInput
  }

  /**
   * VideoContributor updateMany
   */
  export type VideoContributorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VideoContributors.
     */
    data: XOR<VideoContributorUpdateManyMutationInput, VideoContributorUncheckedUpdateManyInput>
    /**
     * Filter which VideoContributors to update
     */
    where?: VideoContributorWhereInput
    /**
     * Limit how many VideoContributors to update.
     */
    limit?: number
  }

  /**
   * VideoContributor updateManyAndReturn
   */
  export type VideoContributorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * The data used to update VideoContributors.
     */
    data: XOR<VideoContributorUpdateManyMutationInput, VideoContributorUncheckedUpdateManyInput>
    /**
     * Filter which VideoContributors to update
     */
    where?: VideoContributorWhereInput
    /**
     * Limit how many VideoContributors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VideoContributor upsert
   */
  export type VideoContributorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * The filter to search for the VideoContributor to update in case it exists.
     */
    where: VideoContributorWhereUniqueInput
    /**
     * In case the VideoContributor found by the `where` argument doesn't exist, create a new VideoContributor with this data.
     */
    create: XOR<VideoContributorCreateInput, VideoContributorUncheckedCreateInput>
    /**
     * In case the VideoContributor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoContributorUpdateInput, VideoContributorUncheckedUpdateInput>
  }

  /**
   * VideoContributor delete
   */
  export type VideoContributorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
    /**
     * Filter which VideoContributor to delete.
     */
    where: VideoContributorWhereUniqueInput
  }

  /**
   * VideoContributor deleteMany
   */
  export type VideoContributorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VideoContributors to delete
     */
    where?: VideoContributorWhereInput
    /**
     * Limit how many VideoContributors to delete.
     */
    limit?: number
  }

  /**
   * VideoContributor without action
   */
  export type VideoContributorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoContributor
     */
    select?: VideoContributorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VideoContributor
     */
    omit?: VideoContributorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoContributorInclude<ExtArgs> | null
  }


  /**
   * Model SubmissionApproval
   */

  export type AggregateSubmissionApproval = {
    _count: SubmissionApprovalCountAggregateOutputType | null
    _min: SubmissionApprovalMinAggregateOutputType | null
    _max: SubmissionApprovalMaxAggregateOutputType | null
  }

  export type SubmissionApprovalMinAggregateOutputType = {
    id: string | null
    type: $Enums.ApprovalType | null
    isApproved: boolean | null
    reason: string | null
    submissionId: string | null
    approverId: string | null
    createdAt: Date | null
  }

  export type SubmissionApprovalMaxAggregateOutputType = {
    id: string | null
    type: $Enums.ApprovalType | null
    isApproved: boolean | null
    reason: string | null
    submissionId: string | null
    approverId: string | null
    createdAt: Date | null
  }

  export type SubmissionApprovalCountAggregateOutputType = {
    id: number
    type: number
    isApproved: number
    reason: number
    submissionId: number
    approverId: number
    createdAt: number
    _all: number
  }


  export type SubmissionApprovalMinAggregateInputType = {
    id?: true
    type?: true
    isApproved?: true
    reason?: true
    submissionId?: true
    approverId?: true
    createdAt?: true
  }

  export type SubmissionApprovalMaxAggregateInputType = {
    id?: true
    type?: true
    isApproved?: true
    reason?: true
    submissionId?: true
    approverId?: true
    createdAt?: true
  }

  export type SubmissionApprovalCountAggregateInputType = {
    id?: true
    type?: true
    isApproved?: true
    reason?: true
    submissionId?: true
    approverId?: true
    createdAt?: true
    _all?: true
  }

  export type SubmissionApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubmissionApproval to aggregate.
     */
    where?: SubmissionApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionApprovals to fetch.
     */
    orderBy?: SubmissionApprovalOrderByWithRelationInput | SubmissionApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubmissionApprovals
    **/
    _count?: true | SubmissionApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionApprovalMaxAggregateInputType
  }

  export type GetSubmissionApprovalAggregateType<T extends SubmissionApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmissionApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmissionApproval[P]>
      : GetScalarType<T[P], AggregateSubmissionApproval[P]>
  }




  export type SubmissionApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionApprovalWhereInput
    orderBy?: SubmissionApprovalOrderByWithAggregationInput | SubmissionApprovalOrderByWithAggregationInput[]
    by: SubmissionApprovalScalarFieldEnum[] | SubmissionApprovalScalarFieldEnum
    having?: SubmissionApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionApprovalCountAggregateInputType | true
    _min?: SubmissionApprovalMinAggregateInputType
    _max?: SubmissionApprovalMaxAggregateInputType
  }

  export type SubmissionApprovalGroupByOutputType = {
    id: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason: string | null
    submissionId: string
    approverId: string
    createdAt: Date
    _count: SubmissionApprovalCountAggregateOutputType | null
    _min: SubmissionApprovalMinAggregateOutputType | null
    _max: SubmissionApprovalMaxAggregateOutputType | null
  }

  type GetSubmissionApprovalGroupByPayload<T extends SubmissionApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionApprovalGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    isApproved?: boolean
    reason?: boolean
    submissionId?: boolean
    approverId?: boolean
    createdAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionApproval"]>

  export type SubmissionApprovalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    isApproved?: boolean
    reason?: boolean
    submissionId?: boolean
    approverId?: boolean
    createdAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionApproval"]>

  export type SubmissionApprovalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    isApproved?: boolean
    reason?: boolean
    submissionId?: boolean
    approverId?: boolean
    createdAt?: boolean
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionApproval"]>

  export type SubmissionApprovalSelectScalar = {
    id?: boolean
    type?: boolean
    isApproved?: boolean
    reason?: boolean
    submissionId?: boolean
    approverId?: boolean
    createdAt?: boolean
  }

  export type SubmissionApprovalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "isApproved" | "reason" | "submissionId" | "approverId" | "createdAt", ExtArgs["result"]["submissionApproval"]>
  export type SubmissionApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionApprovalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionApprovalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
    approver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubmissionApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubmissionApproval"
    objects: {
      submission: Prisma.$SubmissionPayload<ExtArgs>
      approver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: $Enums.ApprovalType
      isApproved: boolean
      reason: string | null
      submissionId: string
      approverId: string
      createdAt: Date
    }, ExtArgs["result"]["submissionApproval"]>
    composites: {}
  }

  type SubmissionApprovalGetPayload<S extends boolean | null | undefined | SubmissionApprovalDefaultArgs> = $Result.GetResult<Prisma.$SubmissionApprovalPayload, S>

  type SubmissionApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionApprovalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionApprovalCountAggregateInputType | true
    }

  export interface SubmissionApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubmissionApproval'], meta: { name: 'SubmissionApproval' } }
    /**
     * Find zero or one SubmissionApproval that matches the filter.
     * @param {SubmissionApprovalFindUniqueArgs} args - Arguments to find a SubmissionApproval
     * @example
     * // Get one SubmissionApproval
     * const submissionApproval = await prisma.submissionApproval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionApprovalFindUniqueArgs>(args: SelectSubset<T, SubmissionApprovalFindUniqueArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubmissionApproval that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionApprovalFindUniqueOrThrowArgs} args - Arguments to find a SubmissionApproval
     * @example
     * // Get one SubmissionApproval
     * const submissionApproval = await prisma.submissionApproval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubmissionApproval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalFindFirstArgs} args - Arguments to find a SubmissionApproval
     * @example
     * // Get one SubmissionApproval
     * const submissionApproval = await prisma.submissionApproval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionApprovalFindFirstArgs>(args?: SelectSubset<T, SubmissionApprovalFindFirstArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubmissionApproval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalFindFirstOrThrowArgs} args - Arguments to find a SubmissionApproval
     * @example
     * // Get one SubmissionApproval
     * const submissionApproval = await prisma.submissionApproval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubmissionApprovals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubmissionApprovals
     * const submissionApprovals = await prisma.submissionApproval.findMany()
     * 
     * // Get first 10 SubmissionApprovals
     * const submissionApprovals = await prisma.submissionApproval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionApprovalWithIdOnly = await prisma.submissionApproval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionApprovalFindManyArgs>(args?: SelectSubset<T, SubmissionApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubmissionApproval.
     * @param {SubmissionApprovalCreateArgs} args - Arguments to create a SubmissionApproval.
     * @example
     * // Create one SubmissionApproval
     * const SubmissionApproval = await prisma.submissionApproval.create({
     *   data: {
     *     // ... data to create a SubmissionApproval
     *   }
     * })
     * 
     */
    create<T extends SubmissionApprovalCreateArgs>(args: SelectSubset<T, SubmissionApprovalCreateArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubmissionApprovals.
     * @param {SubmissionApprovalCreateManyArgs} args - Arguments to create many SubmissionApprovals.
     * @example
     * // Create many SubmissionApprovals
     * const submissionApproval = await prisma.submissionApproval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionApprovalCreateManyArgs>(args?: SelectSubset<T, SubmissionApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubmissionApprovals and returns the data saved in the database.
     * @param {SubmissionApprovalCreateManyAndReturnArgs} args - Arguments to create many SubmissionApprovals.
     * @example
     * // Create many SubmissionApprovals
     * const submissionApproval = await prisma.submissionApproval.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubmissionApprovals and only return the `id`
     * const submissionApprovalWithIdOnly = await prisma.submissionApproval.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionApprovalCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionApprovalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubmissionApproval.
     * @param {SubmissionApprovalDeleteArgs} args - Arguments to delete one SubmissionApproval.
     * @example
     * // Delete one SubmissionApproval
     * const SubmissionApproval = await prisma.submissionApproval.delete({
     *   where: {
     *     // ... filter to delete one SubmissionApproval
     *   }
     * })
     * 
     */
    delete<T extends SubmissionApprovalDeleteArgs>(args: SelectSubset<T, SubmissionApprovalDeleteArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubmissionApproval.
     * @param {SubmissionApprovalUpdateArgs} args - Arguments to update one SubmissionApproval.
     * @example
     * // Update one SubmissionApproval
     * const submissionApproval = await prisma.submissionApproval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionApprovalUpdateArgs>(args: SelectSubset<T, SubmissionApprovalUpdateArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubmissionApprovals.
     * @param {SubmissionApprovalDeleteManyArgs} args - Arguments to filter SubmissionApprovals to delete.
     * @example
     * // Delete a few SubmissionApprovals
     * const { count } = await prisma.submissionApproval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionApprovalDeleteManyArgs>(args?: SelectSubset<T, SubmissionApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubmissionApprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubmissionApprovals
     * const submissionApproval = await prisma.submissionApproval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionApprovalUpdateManyArgs>(args: SelectSubset<T, SubmissionApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubmissionApprovals and returns the data updated in the database.
     * @param {SubmissionApprovalUpdateManyAndReturnArgs} args - Arguments to update many SubmissionApprovals.
     * @example
     * // Update many SubmissionApprovals
     * const submissionApproval = await prisma.submissionApproval.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubmissionApprovals and only return the `id`
     * const submissionApprovalWithIdOnly = await prisma.submissionApproval.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionApprovalUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionApprovalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubmissionApproval.
     * @param {SubmissionApprovalUpsertArgs} args - Arguments to update or create a SubmissionApproval.
     * @example
     * // Update or create a SubmissionApproval
     * const submissionApproval = await prisma.submissionApproval.upsert({
     *   create: {
     *     // ... data to create a SubmissionApproval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubmissionApproval we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionApprovalUpsertArgs>(args: SelectSubset<T, SubmissionApprovalUpsertArgs<ExtArgs>>): Prisma__SubmissionApprovalClient<$Result.GetResult<Prisma.$SubmissionApprovalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubmissionApprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalCountArgs} args - Arguments to filter SubmissionApprovals to count.
     * @example
     * // Count the number of SubmissionApprovals
     * const count = await prisma.submissionApproval.count({
     *   where: {
     *     // ... the filter for the SubmissionApprovals we want to count
     *   }
     * })
    **/
    count<T extends SubmissionApprovalCountArgs>(
      args?: Subset<T, SubmissionApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubmissionApproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionApprovalAggregateArgs>(args: Subset<T, SubmissionApprovalAggregateArgs>): Prisma.PrismaPromise<GetSubmissionApprovalAggregateType<T>>

    /**
     * Group by SubmissionApproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionApprovalGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubmissionApproval model
   */
  readonly fields: SubmissionApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubmissionApproval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submission<T extends SubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmissionDefaultArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    approver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubmissionApproval model
   */
  interface SubmissionApprovalFieldRefs {
    readonly id: FieldRef<"SubmissionApproval", 'String'>
    readonly type: FieldRef<"SubmissionApproval", 'ApprovalType'>
    readonly isApproved: FieldRef<"SubmissionApproval", 'Boolean'>
    readonly reason: FieldRef<"SubmissionApproval", 'String'>
    readonly submissionId: FieldRef<"SubmissionApproval", 'String'>
    readonly approverId: FieldRef<"SubmissionApproval", 'String'>
    readonly createdAt: FieldRef<"SubmissionApproval", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubmissionApproval findUnique
   */
  export type SubmissionApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionApproval to fetch.
     */
    where: SubmissionApprovalWhereUniqueInput
  }

  /**
   * SubmissionApproval findUniqueOrThrow
   */
  export type SubmissionApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionApproval to fetch.
     */
    where: SubmissionApprovalWhereUniqueInput
  }

  /**
   * SubmissionApproval findFirst
   */
  export type SubmissionApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionApproval to fetch.
     */
    where?: SubmissionApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionApprovals to fetch.
     */
    orderBy?: SubmissionApprovalOrderByWithRelationInput | SubmissionApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubmissionApprovals.
     */
    cursor?: SubmissionApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubmissionApprovals.
     */
    distinct?: SubmissionApprovalScalarFieldEnum | SubmissionApprovalScalarFieldEnum[]
  }

  /**
   * SubmissionApproval findFirstOrThrow
   */
  export type SubmissionApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionApproval to fetch.
     */
    where?: SubmissionApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionApprovals to fetch.
     */
    orderBy?: SubmissionApprovalOrderByWithRelationInput | SubmissionApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubmissionApprovals.
     */
    cursor?: SubmissionApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubmissionApprovals.
     */
    distinct?: SubmissionApprovalScalarFieldEnum | SubmissionApprovalScalarFieldEnum[]
  }

  /**
   * SubmissionApproval findMany
   */
  export type SubmissionApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionApprovals to fetch.
     */
    where?: SubmissionApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionApprovals to fetch.
     */
    orderBy?: SubmissionApprovalOrderByWithRelationInput | SubmissionApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubmissionApprovals.
     */
    cursor?: SubmissionApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionApprovals.
     */
    skip?: number
    distinct?: SubmissionApprovalScalarFieldEnum | SubmissionApprovalScalarFieldEnum[]
  }

  /**
   * SubmissionApproval create
   */
  export type SubmissionApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a SubmissionApproval.
     */
    data: XOR<SubmissionApprovalCreateInput, SubmissionApprovalUncheckedCreateInput>
  }

  /**
   * SubmissionApproval createMany
   */
  export type SubmissionApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubmissionApprovals.
     */
    data: SubmissionApprovalCreateManyInput | SubmissionApprovalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubmissionApproval createManyAndReturn
   */
  export type SubmissionApprovalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * The data used to create many SubmissionApprovals.
     */
    data: SubmissionApprovalCreateManyInput | SubmissionApprovalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubmissionApproval update
   */
  export type SubmissionApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a SubmissionApproval.
     */
    data: XOR<SubmissionApprovalUpdateInput, SubmissionApprovalUncheckedUpdateInput>
    /**
     * Choose, which SubmissionApproval to update.
     */
    where: SubmissionApprovalWhereUniqueInput
  }

  /**
   * SubmissionApproval updateMany
   */
  export type SubmissionApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubmissionApprovals.
     */
    data: XOR<SubmissionApprovalUpdateManyMutationInput, SubmissionApprovalUncheckedUpdateManyInput>
    /**
     * Filter which SubmissionApprovals to update
     */
    where?: SubmissionApprovalWhereInput
    /**
     * Limit how many SubmissionApprovals to update.
     */
    limit?: number
  }

  /**
   * SubmissionApproval updateManyAndReturn
   */
  export type SubmissionApprovalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * The data used to update SubmissionApprovals.
     */
    data: XOR<SubmissionApprovalUpdateManyMutationInput, SubmissionApprovalUncheckedUpdateManyInput>
    /**
     * Filter which SubmissionApprovals to update
     */
    where?: SubmissionApprovalWhereInput
    /**
     * Limit how many SubmissionApprovals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubmissionApproval upsert
   */
  export type SubmissionApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the SubmissionApproval to update in case it exists.
     */
    where: SubmissionApprovalWhereUniqueInput
    /**
     * In case the SubmissionApproval found by the `where` argument doesn't exist, create a new SubmissionApproval with this data.
     */
    create: XOR<SubmissionApprovalCreateInput, SubmissionApprovalUncheckedCreateInput>
    /**
     * In case the SubmissionApproval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionApprovalUpdateInput, SubmissionApprovalUncheckedUpdateInput>
  }

  /**
   * SubmissionApproval delete
   */
  export type SubmissionApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
    /**
     * Filter which SubmissionApproval to delete.
     */
    where: SubmissionApprovalWhereUniqueInput
  }

  /**
   * SubmissionApproval deleteMany
   */
  export type SubmissionApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubmissionApprovals to delete
     */
    where?: SubmissionApprovalWhereInput
    /**
     * Limit how many SubmissionApprovals to delete.
     */
    limit?: number
  }

  /**
   * SubmissionApproval without action
   */
  export type SubmissionApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionApproval
     */
    select?: SubmissionApprovalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionApproval
     */
    omit?: SubmissionApprovalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionApprovalInclude<ExtArgs> | null
  }


  /**
   * Model SubmissionComment
   */

  export type AggregateSubmissionComment = {
    _count: SubmissionCommentCountAggregateOutputType | null
    _min: SubmissionCommentMinAggregateOutputType | null
    _max: SubmissionCommentMaxAggregateOutputType | null
  }

  export type SubmissionCommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    submissionId: string | null
    createdAt: Date | null
  }

  export type SubmissionCommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    submissionId: string | null
    createdAt: Date | null
  }

  export type SubmissionCommentCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    submissionId: number
    createdAt: number
    _all: number
  }


  export type SubmissionCommentMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    submissionId?: true
    createdAt?: true
  }

  export type SubmissionCommentMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    submissionId?: true
    createdAt?: true
  }

  export type SubmissionCommentCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    submissionId?: true
    createdAt?: true
    _all?: true
  }

  export type SubmissionCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubmissionComment to aggregate.
     */
    where?: SubmissionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionComments to fetch.
     */
    orderBy?: SubmissionCommentOrderByWithRelationInput | SubmissionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubmissionComments
    **/
    _count?: true | SubmissionCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionCommentMaxAggregateInputType
  }

  export type GetSubmissionCommentAggregateType<T extends SubmissionCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmissionComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmissionComment[P]>
      : GetScalarType<T[P], AggregateSubmissionComment[P]>
  }




  export type SubmissionCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionCommentWhereInput
    orderBy?: SubmissionCommentOrderByWithAggregationInput | SubmissionCommentOrderByWithAggregationInput[]
    by: SubmissionCommentScalarFieldEnum[] | SubmissionCommentScalarFieldEnum
    having?: SubmissionCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCommentCountAggregateInputType | true
    _min?: SubmissionCommentMinAggregateInputType
    _max?: SubmissionCommentMaxAggregateInputType
  }

  export type SubmissionCommentGroupByOutputType = {
    id: string
    content: string
    userId: string
    submissionId: string
    createdAt: Date
    _count: SubmissionCommentCountAggregateOutputType | null
    _min: SubmissionCommentMinAggregateOutputType | null
    _max: SubmissionCommentMaxAggregateOutputType | null
  }

  type GetSubmissionCommentGroupByPayload<T extends SubmissionCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionCommentGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionCommentGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionComment"]>

  export type SubmissionCommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionComment"]>

  export type SubmissionCommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submissionComment"]>

  export type SubmissionCommentSelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    submissionId?: boolean
    createdAt?: boolean
  }

  export type SubmissionCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "userId" | "submissionId" | "createdAt", ExtArgs["result"]["submissionComment"]>
  export type SubmissionCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type SubmissionCommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }
  export type SubmissionCommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }

  export type $SubmissionCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubmissionComment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      submission: Prisma.$SubmissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      userId: string
      submissionId: string
      createdAt: Date
    }, ExtArgs["result"]["submissionComment"]>
    composites: {}
  }

  type SubmissionCommentGetPayload<S extends boolean | null | undefined | SubmissionCommentDefaultArgs> = $Result.GetResult<Prisma.$SubmissionCommentPayload, S>

  type SubmissionCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCommentCountAggregateInputType | true
    }

  export interface SubmissionCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubmissionComment'], meta: { name: 'SubmissionComment' } }
    /**
     * Find zero or one SubmissionComment that matches the filter.
     * @param {SubmissionCommentFindUniqueArgs} args - Arguments to find a SubmissionComment
     * @example
     * // Get one SubmissionComment
     * const submissionComment = await prisma.submissionComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionCommentFindUniqueArgs>(args: SelectSubset<T, SubmissionCommentFindUniqueArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubmissionComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionCommentFindUniqueOrThrowArgs} args - Arguments to find a SubmissionComment
     * @example
     * // Get one SubmissionComment
     * const submissionComment = await prisma.submissionComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubmissionComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentFindFirstArgs} args - Arguments to find a SubmissionComment
     * @example
     * // Get one SubmissionComment
     * const submissionComment = await prisma.submissionComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionCommentFindFirstArgs>(args?: SelectSubset<T, SubmissionCommentFindFirstArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubmissionComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentFindFirstOrThrowArgs} args - Arguments to find a SubmissionComment
     * @example
     * // Get one SubmissionComment
     * const submissionComment = await prisma.submissionComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubmissionComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubmissionComments
     * const submissionComments = await prisma.submissionComment.findMany()
     * 
     * // Get first 10 SubmissionComments
     * const submissionComments = await prisma.submissionComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionCommentWithIdOnly = await prisma.submissionComment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionCommentFindManyArgs>(args?: SelectSubset<T, SubmissionCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubmissionComment.
     * @param {SubmissionCommentCreateArgs} args - Arguments to create a SubmissionComment.
     * @example
     * // Create one SubmissionComment
     * const SubmissionComment = await prisma.submissionComment.create({
     *   data: {
     *     // ... data to create a SubmissionComment
     *   }
     * })
     * 
     */
    create<T extends SubmissionCommentCreateArgs>(args: SelectSubset<T, SubmissionCommentCreateArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubmissionComments.
     * @param {SubmissionCommentCreateManyArgs} args - Arguments to create many SubmissionComments.
     * @example
     * // Create many SubmissionComments
     * const submissionComment = await prisma.submissionComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCommentCreateManyArgs>(args?: SelectSubset<T, SubmissionCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubmissionComments and returns the data saved in the database.
     * @param {SubmissionCommentCreateManyAndReturnArgs} args - Arguments to create many SubmissionComments.
     * @example
     * // Create many SubmissionComments
     * const submissionComment = await prisma.submissionComment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubmissionComments and only return the `id`
     * const submissionCommentWithIdOnly = await prisma.submissionComment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCommentCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubmissionComment.
     * @param {SubmissionCommentDeleteArgs} args - Arguments to delete one SubmissionComment.
     * @example
     * // Delete one SubmissionComment
     * const SubmissionComment = await prisma.submissionComment.delete({
     *   where: {
     *     // ... filter to delete one SubmissionComment
     *   }
     * })
     * 
     */
    delete<T extends SubmissionCommentDeleteArgs>(args: SelectSubset<T, SubmissionCommentDeleteArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubmissionComment.
     * @param {SubmissionCommentUpdateArgs} args - Arguments to update one SubmissionComment.
     * @example
     * // Update one SubmissionComment
     * const submissionComment = await prisma.submissionComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionCommentUpdateArgs>(args: SelectSubset<T, SubmissionCommentUpdateArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubmissionComments.
     * @param {SubmissionCommentDeleteManyArgs} args - Arguments to filter SubmissionComments to delete.
     * @example
     * // Delete a few SubmissionComments
     * const { count } = await prisma.submissionComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionCommentDeleteManyArgs>(args?: SelectSubset<T, SubmissionCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubmissionComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubmissionComments
     * const submissionComment = await prisma.submissionComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionCommentUpdateManyArgs>(args: SelectSubset<T, SubmissionCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubmissionComments and returns the data updated in the database.
     * @param {SubmissionCommentUpdateManyAndReturnArgs} args - Arguments to update many SubmissionComments.
     * @example
     * // Update many SubmissionComments
     * const submissionComment = await prisma.submissionComment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubmissionComments and only return the `id`
     * const submissionCommentWithIdOnly = await prisma.submissionComment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionCommentUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionCommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubmissionComment.
     * @param {SubmissionCommentUpsertArgs} args - Arguments to update or create a SubmissionComment.
     * @example
     * // Update or create a SubmissionComment
     * const submissionComment = await prisma.submissionComment.upsert({
     *   create: {
     *     // ... data to create a SubmissionComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubmissionComment we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionCommentUpsertArgs>(args: SelectSubset<T, SubmissionCommentUpsertArgs<ExtArgs>>): Prisma__SubmissionCommentClient<$Result.GetResult<Prisma.$SubmissionCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubmissionComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentCountArgs} args - Arguments to filter SubmissionComments to count.
     * @example
     * // Count the number of SubmissionComments
     * const count = await prisma.submissionComment.count({
     *   where: {
     *     // ... the filter for the SubmissionComments we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCommentCountArgs>(
      args?: Subset<T, SubmissionCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubmissionComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionCommentAggregateArgs>(args: Subset<T, SubmissionCommentAggregateArgs>): Prisma.PrismaPromise<GetSubmissionCommentAggregateType<T>>

    /**
     * Group by SubmissionComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionCommentGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubmissionComment model
   */
  readonly fields: SubmissionCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubmissionComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submission<T extends SubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmissionDefaultArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubmissionComment model
   */
  interface SubmissionCommentFieldRefs {
    readonly id: FieldRef<"SubmissionComment", 'String'>
    readonly content: FieldRef<"SubmissionComment", 'String'>
    readonly userId: FieldRef<"SubmissionComment", 'String'>
    readonly submissionId: FieldRef<"SubmissionComment", 'String'>
    readonly createdAt: FieldRef<"SubmissionComment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubmissionComment findUnique
   */
  export type SubmissionCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionComment to fetch.
     */
    where: SubmissionCommentWhereUniqueInput
  }

  /**
   * SubmissionComment findUniqueOrThrow
   */
  export type SubmissionCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionComment to fetch.
     */
    where: SubmissionCommentWhereUniqueInput
  }

  /**
   * SubmissionComment findFirst
   */
  export type SubmissionCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionComment to fetch.
     */
    where?: SubmissionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionComments to fetch.
     */
    orderBy?: SubmissionCommentOrderByWithRelationInput | SubmissionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubmissionComments.
     */
    cursor?: SubmissionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubmissionComments.
     */
    distinct?: SubmissionCommentScalarFieldEnum | SubmissionCommentScalarFieldEnum[]
  }

  /**
   * SubmissionComment findFirstOrThrow
   */
  export type SubmissionCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionComment to fetch.
     */
    where?: SubmissionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionComments to fetch.
     */
    orderBy?: SubmissionCommentOrderByWithRelationInput | SubmissionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubmissionComments.
     */
    cursor?: SubmissionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubmissionComments.
     */
    distinct?: SubmissionCommentScalarFieldEnum | SubmissionCommentScalarFieldEnum[]
  }

  /**
   * SubmissionComment findMany
   */
  export type SubmissionCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * Filter, which SubmissionComments to fetch.
     */
    where?: SubmissionCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubmissionComments to fetch.
     */
    orderBy?: SubmissionCommentOrderByWithRelationInput | SubmissionCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubmissionComments.
     */
    cursor?: SubmissionCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubmissionComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubmissionComments.
     */
    skip?: number
    distinct?: SubmissionCommentScalarFieldEnum | SubmissionCommentScalarFieldEnum[]
  }

  /**
   * SubmissionComment create
   */
  export type SubmissionCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a SubmissionComment.
     */
    data: XOR<SubmissionCommentCreateInput, SubmissionCommentUncheckedCreateInput>
  }

  /**
   * SubmissionComment createMany
   */
  export type SubmissionCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubmissionComments.
     */
    data: SubmissionCommentCreateManyInput | SubmissionCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubmissionComment createManyAndReturn
   */
  export type SubmissionCommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * The data used to create many SubmissionComments.
     */
    data: SubmissionCommentCreateManyInput | SubmissionCommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubmissionComment update
   */
  export type SubmissionCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a SubmissionComment.
     */
    data: XOR<SubmissionCommentUpdateInput, SubmissionCommentUncheckedUpdateInput>
    /**
     * Choose, which SubmissionComment to update.
     */
    where: SubmissionCommentWhereUniqueInput
  }

  /**
   * SubmissionComment updateMany
   */
  export type SubmissionCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubmissionComments.
     */
    data: XOR<SubmissionCommentUpdateManyMutationInput, SubmissionCommentUncheckedUpdateManyInput>
    /**
     * Filter which SubmissionComments to update
     */
    where?: SubmissionCommentWhereInput
    /**
     * Limit how many SubmissionComments to update.
     */
    limit?: number
  }

  /**
   * SubmissionComment updateManyAndReturn
   */
  export type SubmissionCommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * The data used to update SubmissionComments.
     */
    data: XOR<SubmissionCommentUpdateManyMutationInput, SubmissionCommentUncheckedUpdateManyInput>
    /**
     * Filter which SubmissionComments to update
     */
    where?: SubmissionCommentWhereInput
    /**
     * Limit how many SubmissionComments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubmissionComment upsert
   */
  export type SubmissionCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the SubmissionComment to update in case it exists.
     */
    where: SubmissionCommentWhereUniqueInput
    /**
     * In case the SubmissionComment found by the `where` argument doesn't exist, create a new SubmissionComment with this data.
     */
    create: XOR<SubmissionCommentCreateInput, SubmissionCommentUncheckedCreateInput>
    /**
     * In case the SubmissionComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionCommentUpdateInput, SubmissionCommentUncheckedUpdateInput>
  }

  /**
   * SubmissionComment delete
   */
  export type SubmissionCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
    /**
     * Filter which SubmissionComment to delete.
     */
    where: SubmissionCommentWhereUniqueInput
  }

  /**
   * SubmissionComment deleteMany
   */
  export type SubmissionCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubmissionComments to delete
     */
    where?: SubmissionCommentWhereInput
    /**
     * Limit how many SubmissionComments to delete.
     */
    limit?: number
  }

  /**
   * SubmissionComment without action
   */
  export type SubmissionCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionComment
     */
    select?: SubmissionCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubmissionComment
     */
    omit?: SubmissionCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionCommentInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    mimetype: string | null
    size: number | null
    category: $Enums.FileCategory | null
    folderId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    mimetype: string | null
    size: number | null
    category: $Enums.FileCategory | null
    folderId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    path: number
    mimetype: number
    size: number
    category: number
    folderId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    mimetype?: true
    size?: true
    category?: true
    folderId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    mimetype?: true
    size?: true
    category?: true
    folderId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    mimetype?: true
    size?: true
    category?: true
    folderId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    name: string
    path: string
    mimetype: string
    size: number
    category: $Enums.FileCategory
    folderId: string | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    folderId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    folderId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    folderId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    folderId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "path" | "mimetype" | "size" | "category" | "folderId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    folder?: boolean | File$folderArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      folder: Prisma.$FileFolderPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      mimetype: string
      size: number
      category: $Enums.FileCategory
      folderId: string | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    folder<T extends File$folderArgs<ExtArgs> = {}>(args?: Subset<T, File$folderArgs<ExtArgs>>): Prisma__FileFolderClient<$Result.GetResult<Prisma.$FileFolderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends File$userArgs<ExtArgs> = {}>(args?: Subset<T, File$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly mimetype: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly category: FieldRef<"File", 'FileCategory'>
    readonly folderId: FieldRef<"File", 'String'>
    readonly userId: FieldRef<"File", 'String'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.folder
   */
  export type File$folderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileFolder
     */
    select?: FileFolderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FileFolder
     */
    omit?: FileFolderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileFolderInclude<ExtArgs> | null
    where?: FileFolderWhereInput
  }

  /**
   * File.user
   */
  export type File$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model nhatKy
   */

  export type AggregateNhatKy = {
    _count: NhatKyCountAggregateOutputType | null
    _min: NhatKyMinAggregateOutputType | null
    _max: NhatKyMaxAggregateOutputType | null
  }

  export type NhatKyMinAggregateOutputType = {
    id: string | null
    action: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type NhatKyMaxAggregateOutputType = {
    id: string | null
    action: string | null
    userId: string | null
    createdAt: Date | null
  }

  export type NhatKyCountAggregateOutputType = {
    id: number
    action: number
    details: number
    userId: number
    createdAt: number
    _all: number
  }


  export type NhatKyMinAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    createdAt?: true
  }

  export type NhatKyMaxAggregateInputType = {
    id?: true
    action?: true
    userId?: true
    createdAt?: true
  }

  export type NhatKyCountAggregateInputType = {
    id?: true
    action?: true
    details?: true
    userId?: true
    createdAt?: true
    _all?: true
  }

  export type NhatKyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which nhatKy to aggregate.
     */
    where?: nhatKyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nhatKies to fetch.
     */
    orderBy?: nhatKyOrderByWithRelationInput | nhatKyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: nhatKyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nhatKies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nhatKies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned nhatKies
    **/
    _count?: true | NhatKyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NhatKyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NhatKyMaxAggregateInputType
  }

  export type GetNhatKyAggregateType<T extends NhatKyAggregateArgs> = {
        [P in keyof T & keyof AggregateNhatKy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNhatKy[P]>
      : GetScalarType<T[P], AggregateNhatKy[P]>
  }




  export type nhatKyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: nhatKyWhereInput
    orderBy?: nhatKyOrderByWithAggregationInput | nhatKyOrderByWithAggregationInput[]
    by: NhatKyScalarFieldEnum[] | NhatKyScalarFieldEnum
    having?: nhatKyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NhatKyCountAggregateInputType | true
    _min?: NhatKyMinAggregateInputType
    _max?: NhatKyMaxAggregateInputType
  }

  export type NhatKyGroupByOutputType = {
    id: string
    action: string
    details: JsonValue | null
    userId: string | null
    createdAt: Date
    _count: NhatKyCountAggregateOutputType | null
    _min: NhatKyMinAggregateOutputType | null
    _max: NhatKyMaxAggregateOutputType | null
  }

  type GetNhatKyGroupByPayload<T extends nhatKyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NhatKyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NhatKyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NhatKyGroupByOutputType[P]>
            : GetScalarType<T[P], NhatKyGroupByOutputType[P]>
        }
      >
    >


  export type nhatKySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | nhatKy$userArgs<ExtArgs>
  }, ExtArgs["result"]["nhatKy"]>

  export type nhatKySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | nhatKy$userArgs<ExtArgs>
  }, ExtArgs["result"]["nhatKy"]>

  export type nhatKySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    details?: boolean
    userId?: boolean
    createdAt?: boolean
    user?: boolean | nhatKy$userArgs<ExtArgs>
  }, ExtArgs["result"]["nhatKy"]>

  export type nhatKySelectScalar = {
    id?: boolean
    action?: boolean
    details?: boolean
    userId?: boolean
    createdAt?: boolean
  }

  export type nhatKyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "details" | "userId" | "createdAt", ExtArgs["result"]["nhatKy"]>
  export type nhatKyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | nhatKy$userArgs<ExtArgs>
  }
  export type nhatKyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | nhatKy$userArgs<ExtArgs>
  }
  export type nhatKyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | nhatKy$userArgs<ExtArgs>
  }

  export type $nhatKyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "nhatKy"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      details: Prisma.JsonValue | null
      userId: string | null
      createdAt: Date
    }, ExtArgs["result"]["nhatKy"]>
    composites: {}
  }

  type nhatKyGetPayload<S extends boolean | null | undefined | nhatKyDefaultArgs> = $Result.GetResult<Prisma.$nhatKyPayload, S>

  type nhatKyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<nhatKyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NhatKyCountAggregateInputType | true
    }

  export interface nhatKyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['nhatKy'], meta: { name: 'nhatKy' } }
    /**
     * Find zero or one NhatKy that matches the filter.
     * @param {nhatKyFindUniqueArgs} args - Arguments to find a NhatKy
     * @example
     * // Get one NhatKy
     * const nhatKy = await prisma.nhatKy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends nhatKyFindUniqueArgs>(args: SelectSubset<T, nhatKyFindUniqueArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NhatKy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {nhatKyFindUniqueOrThrowArgs} args - Arguments to find a NhatKy
     * @example
     * // Get one NhatKy
     * const nhatKy = await prisma.nhatKy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends nhatKyFindUniqueOrThrowArgs>(args: SelectSubset<T, nhatKyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NhatKy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nhatKyFindFirstArgs} args - Arguments to find a NhatKy
     * @example
     * // Get one NhatKy
     * const nhatKy = await prisma.nhatKy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends nhatKyFindFirstArgs>(args?: SelectSubset<T, nhatKyFindFirstArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NhatKy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nhatKyFindFirstOrThrowArgs} args - Arguments to find a NhatKy
     * @example
     * // Get one NhatKy
     * const nhatKy = await prisma.nhatKy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends nhatKyFindFirstOrThrowArgs>(args?: SelectSubset<T, nhatKyFindFirstOrThrowArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NhatKies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nhatKyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NhatKies
     * const nhatKies = await prisma.nhatKy.findMany()
     * 
     * // Get first 10 NhatKies
     * const nhatKies = await prisma.nhatKy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nhatKyWithIdOnly = await prisma.nhatKy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends nhatKyFindManyArgs>(args?: SelectSubset<T, nhatKyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NhatKy.
     * @param {nhatKyCreateArgs} args - Arguments to create a NhatKy.
     * @example
     * // Create one NhatKy
     * const NhatKy = await prisma.nhatKy.create({
     *   data: {
     *     // ... data to create a NhatKy
     *   }
     * })
     * 
     */
    create<T extends nhatKyCreateArgs>(args: SelectSubset<T, nhatKyCreateArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NhatKies.
     * @param {nhatKyCreateManyArgs} args - Arguments to create many NhatKies.
     * @example
     * // Create many NhatKies
     * const nhatKy = await prisma.nhatKy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends nhatKyCreateManyArgs>(args?: SelectSubset<T, nhatKyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NhatKies and returns the data saved in the database.
     * @param {nhatKyCreateManyAndReturnArgs} args - Arguments to create many NhatKies.
     * @example
     * // Create many NhatKies
     * const nhatKy = await prisma.nhatKy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NhatKies and only return the `id`
     * const nhatKyWithIdOnly = await prisma.nhatKy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends nhatKyCreateManyAndReturnArgs>(args?: SelectSubset<T, nhatKyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NhatKy.
     * @param {nhatKyDeleteArgs} args - Arguments to delete one NhatKy.
     * @example
     * // Delete one NhatKy
     * const NhatKy = await prisma.nhatKy.delete({
     *   where: {
     *     // ... filter to delete one NhatKy
     *   }
     * })
     * 
     */
    delete<T extends nhatKyDeleteArgs>(args: SelectSubset<T, nhatKyDeleteArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NhatKy.
     * @param {nhatKyUpdateArgs} args - Arguments to update one NhatKy.
     * @example
     * // Update one NhatKy
     * const nhatKy = await prisma.nhatKy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends nhatKyUpdateArgs>(args: SelectSubset<T, nhatKyUpdateArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NhatKies.
     * @param {nhatKyDeleteManyArgs} args - Arguments to filter NhatKies to delete.
     * @example
     * // Delete a few NhatKies
     * const { count } = await prisma.nhatKy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends nhatKyDeleteManyArgs>(args?: SelectSubset<T, nhatKyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NhatKies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nhatKyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NhatKies
     * const nhatKy = await prisma.nhatKy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends nhatKyUpdateManyArgs>(args: SelectSubset<T, nhatKyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NhatKies and returns the data updated in the database.
     * @param {nhatKyUpdateManyAndReturnArgs} args - Arguments to update many NhatKies.
     * @example
     * // Update many NhatKies
     * const nhatKy = await prisma.nhatKy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NhatKies and only return the `id`
     * const nhatKyWithIdOnly = await prisma.nhatKy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends nhatKyUpdateManyAndReturnArgs>(args: SelectSubset<T, nhatKyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NhatKy.
     * @param {nhatKyUpsertArgs} args - Arguments to update or create a NhatKy.
     * @example
     * // Update or create a NhatKy
     * const nhatKy = await prisma.nhatKy.upsert({
     *   create: {
     *     // ... data to create a NhatKy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NhatKy we want to update
     *   }
     * })
     */
    upsert<T extends nhatKyUpsertArgs>(args: SelectSubset<T, nhatKyUpsertArgs<ExtArgs>>): Prisma__nhatKyClient<$Result.GetResult<Prisma.$nhatKyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NhatKies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nhatKyCountArgs} args - Arguments to filter NhatKies to count.
     * @example
     * // Count the number of NhatKies
     * const count = await prisma.nhatKy.count({
     *   where: {
     *     // ... the filter for the NhatKies we want to count
     *   }
     * })
    **/
    count<T extends nhatKyCountArgs>(
      args?: Subset<T, nhatKyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NhatKyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NhatKy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NhatKyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NhatKyAggregateArgs>(args: Subset<T, NhatKyAggregateArgs>): Prisma.PrismaPromise<GetNhatKyAggregateType<T>>

    /**
     * Group by NhatKy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nhatKyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends nhatKyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: nhatKyGroupByArgs['orderBy'] }
        : { orderBy?: nhatKyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, nhatKyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNhatKyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the nhatKy model
   */
  readonly fields: nhatKyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for nhatKy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__nhatKyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends nhatKy$userArgs<ExtArgs> = {}>(args?: Subset<T, nhatKy$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the nhatKy model
   */
  interface nhatKyFieldRefs {
    readonly id: FieldRef<"nhatKy", 'String'>
    readonly action: FieldRef<"nhatKy", 'String'>
    readonly details: FieldRef<"nhatKy", 'Json'>
    readonly userId: FieldRef<"nhatKy", 'String'>
    readonly createdAt: FieldRef<"nhatKy", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * nhatKy findUnique
   */
  export type nhatKyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * Filter, which nhatKy to fetch.
     */
    where: nhatKyWhereUniqueInput
  }

  /**
   * nhatKy findUniqueOrThrow
   */
  export type nhatKyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * Filter, which nhatKy to fetch.
     */
    where: nhatKyWhereUniqueInput
  }

  /**
   * nhatKy findFirst
   */
  export type nhatKyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * Filter, which nhatKy to fetch.
     */
    where?: nhatKyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nhatKies to fetch.
     */
    orderBy?: nhatKyOrderByWithRelationInput | nhatKyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for nhatKies.
     */
    cursor?: nhatKyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nhatKies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nhatKies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of nhatKies.
     */
    distinct?: NhatKyScalarFieldEnum | NhatKyScalarFieldEnum[]
  }

  /**
   * nhatKy findFirstOrThrow
   */
  export type nhatKyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * Filter, which nhatKy to fetch.
     */
    where?: nhatKyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nhatKies to fetch.
     */
    orderBy?: nhatKyOrderByWithRelationInput | nhatKyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for nhatKies.
     */
    cursor?: nhatKyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nhatKies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nhatKies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of nhatKies.
     */
    distinct?: NhatKyScalarFieldEnum | NhatKyScalarFieldEnum[]
  }

  /**
   * nhatKy findMany
   */
  export type nhatKyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * Filter, which nhatKies to fetch.
     */
    where?: nhatKyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of nhatKies to fetch.
     */
    orderBy?: nhatKyOrderByWithRelationInput | nhatKyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing nhatKies.
     */
    cursor?: nhatKyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` nhatKies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` nhatKies.
     */
    skip?: number
    distinct?: NhatKyScalarFieldEnum | NhatKyScalarFieldEnum[]
  }

  /**
   * nhatKy create
   */
  export type nhatKyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * The data needed to create a nhatKy.
     */
    data: XOR<nhatKyCreateInput, nhatKyUncheckedCreateInput>
  }

  /**
   * nhatKy createMany
   */
  export type nhatKyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many nhatKies.
     */
    data: nhatKyCreateManyInput | nhatKyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * nhatKy createManyAndReturn
   */
  export type nhatKyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * The data used to create many nhatKies.
     */
    data: nhatKyCreateManyInput | nhatKyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * nhatKy update
   */
  export type nhatKyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * The data needed to update a nhatKy.
     */
    data: XOR<nhatKyUpdateInput, nhatKyUncheckedUpdateInput>
    /**
     * Choose, which nhatKy to update.
     */
    where: nhatKyWhereUniqueInput
  }

  /**
   * nhatKy updateMany
   */
  export type nhatKyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update nhatKies.
     */
    data: XOR<nhatKyUpdateManyMutationInput, nhatKyUncheckedUpdateManyInput>
    /**
     * Filter which nhatKies to update
     */
    where?: nhatKyWhereInput
    /**
     * Limit how many nhatKies to update.
     */
    limit?: number
  }

  /**
   * nhatKy updateManyAndReturn
   */
  export type nhatKyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * The data used to update nhatKies.
     */
    data: XOR<nhatKyUpdateManyMutationInput, nhatKyUncheckedUpdateManyInput>
    /**
     * Filter which nhatKies to update
     */
    where?: nhatKyWhereInput
    /**
     * Limit how many nhatKies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * nhatKy upsert
   */
  export type nhatKyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * The filter to search for the nhatKy to update in case it exists.
     */
    where: nhatKyWhereUniqueInput
    /**
     * In case the nhatKy found by the `where` argument doesn't exist, create a new nhatKy with this data.
     */
    create: XOR<nhatKyCreateInput, nhatKyUncheckedCreateInput>
    /**
     * In case the nhatKy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<nhatKyUpdateInput, nhatKyUncheckedUpdateInput>
  }

  /**
   * nhatKy delete
   */
  export type nhatKyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
    /**
     * Filter which nhatKy to delete.
     */
    where: nhatKyWhereUniqueInput
  }

  /**
   * nhatKy deleteMany
   */
  export type nhatKyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which nhatKies to delete
     */
    where?: nhatKyWhereInput
    /**
     * Limit how many nhatKies to delete.
     */
    limit?: number
  }

  /**
   * nhatKy.user
   */
  export type nhatKy$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * nhatKy without action
   */
  export type nhatKyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the nhatKy
     */
    select?: nhatKySelect<ExtArgs> | null
    /**
     * Omit specific fields from the nhatKy
     */
    omit?: nhatKyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nhatKyInclude<ExtArgs> | null
  }


  /**
   * Model DistributionPlatform
   */

  export type AggregateDistributionPlatform = {
    _count: DistributionPlatformCountAggregateOutputType | null
    _min: DistributionPlatformMinAggregateOutputType | null
    _max: DistributionPlatformMaxAggregateOutputType | null
  }

  export type DistributionPlatformMinAggregateOutputType = {
    id: string | null
    name: string | null
    logoUrl: string | null
    apiEndpoint: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistributionPlatformMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logoUrl: string | null
    apiEndpoint: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DistributionPlatformCountAggregateOutputType = {
    id: number
    name: number
    logoUrl: number
    apiEndpoint: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DistributionPlatformMinAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    apiEndpoint?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistributionPlatformMaxAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    apiEndpoint?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DistributionPlatformCountAggregateInputType = {
    id?: true
    name?: true
    logoUrl?: true
    apiEndpoint?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DistributionPlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionPlatform to aggregate.
     */
    where?: DistributionPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionPlatforms to fetch.
     */
    orderBy?: DistributionPlatformOrderByWithRelationInput | DistributionPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DistributionPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DistributionPlatforms
    **/
    _count?: true | DistributionPlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DistributionPlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DistributionPlatformMaxAggregateInputType
  }

  export type GetDistributionPlatformAggregateType<T extends DistributionPlatformAggregateArgs> = {
        [P in keyof T & keyof AggregateDistributionPlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDistributionPlatform[P]>
      : GetScalarType<T[P], AggregateDistributionPlatform[P]>
  }




  export type DistributionPlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DistributionPlatformWhereInput
    orderBy?: DistributionPlatformOrderByWithAggregationInput | DistributionPlatformOrderByWithAggregationInput[]
    by: DistributionPlatformScalarFieldEnum[] | DistributionPlatformScalarFieldEnum
    having?: DistributionPlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DistributionPlatformCountAggregateInputType | true
    _min?: DistributionPlatformMinAggregateInputType
    _max?: DistributionPlatformMaxAggregateInputType
  }

  export type DistributionPlatformGroupByOutputType = {
    id: string
    name: string
    logoUrl: string | null
    apiEndpoint: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DistributionPlatformCountAggregateOutputType | null
    _min: DistributionPlatformMinAggregateOutputType | null
    _max: DistributionPlatformMaxAggregateOutputType | null
  }

  type GetDistributionPlatformGroupByPayload<T extends DistributionPlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DistributionPlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DistributionPlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DistributionPlatformGroupByOutputType[P]>
            : GetScalarType<T[P], DistributionPlatformGroupByOutputType[P]>
        }
      >
    >


  export type DistributionPlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    apiEndpoint?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["distributionPlatform"]>

  export type DistributionPlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    apiEndpoint?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["distributionPlatform"]>

  export type DistributionPlatformSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    apiEndpoint?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["distributionPlatform"]>

  export type DistributionPlatformSelectScalar = {
    id?: boolean
    name?: boolean
    logoUrl?: boolean
    apiEndpoint?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DistributionPlatformOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logoUrl" | "apiEndpoint" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["distributionPlatform"]>

  export type $DistributionPlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DistributionPlatform"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logoUrl: string | null
      apiEndpoint: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["distributionPlatform"]>
    composites: {}
  }

  type DistributionPlatformGetPayload<S extends boolean | null | undefined | DistributionPlatformDefaultArgs> = $Result.GetResult<Prisma.$DistributionPlatformPayload, S>

  type DistributionPlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DistributionPlatformFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DistributionPlatformCountAggregateInputType | true
    }

  export interface DistributionPlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DistributionPlatform'], meta: { name: 'DistributionPlatform' } }
    /**
     * Find zero or one DistributionPlatform that matches the filter.
     * @param {DistributionPlatformFindUniqueArgs} args - Arguments to find a DistributionPlatform
     * @example
     * // Get one DistributionPlatform
     * const distributionPlatform = await prisma.distributionPlatform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DistributionPlatformFindUniqueArgs>(args: SelectSubset<T, DistributionPlatformFindUniqueArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DistributionPlatform that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DistributionPlatformFindUniqueOrThrowArgs} args - Arguments to find a DistributionPlatform
     * @example
     * // Get one DistributionPlatform
     * const distributionPlatform = await prisma.distributionPlatform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DistributionPlatformFindUniqueOrThrowArgs>(args: SelectSubset<T, DistributionPlatformFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionPlatform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformFindFirstArgs} args - Arguments to find a DistributionPlatform
     * @example
     * // Get one DistributionPlatform
     * const distributionPlatform = await prisma.distributionPlatform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DistributionPlatformFindFirstArgs>(args?: SelectSubset<T, DistributionPlatformFindFirstArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DistributionPlatform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformFindFirstOrThrowArgs} args - Arguments to find a DistributionPlatform
     * @example
     * // Get one DistributionPlatform
     * const distributionPlatform = await prisma.distributionPlatform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DistributionPlatformFindFirstOrThrowArgs>(args?: SelectSubset<T, DistributionPlatformFindFirstOrThrowArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DistributionPlatforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DistributionPlatforms
     * const distributionPlatforms = await prisma.distributionPlatform.findMany()
     * 
     * // Get first 10 DistributionPlatforms
     * const distributionPlatforms = await prisma.distributionPlatform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const distributionPlatformWithIdOnly = await prisma.distributionPlatform.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DistributionPlatformFindManyArgs>(args?: SelectSubset<T, DistributionPlatformFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DistributionPlatform.
     * @param {DistributionPlatformCreateArgs} args - Arguments to create a DistributionPlatform.
     * @example
     * // Create one DistributionPlatform
     * const DistributionPlatform = await prisma.distributionPlatform.create({
     *   data: {
     *     // ... data to create a DistributionPlatform
     *   }
     * })
     * 
     */
    create<T extends DistributionPlatformCreateArgs>(args: SelectSubset<T, DistributionPlatformCreateArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DistributionPlatforms.
     * @param {DistributionPlatformCreateManyArgs} args - Arguments to create many DistributionPlatforms.
     * @example
     * // Create many DistributionPlatforms
     * const distributionPlatform = await prisma.distributionPlatform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DistributionPlatformCreateManyArgs>(args?: SelectSubset<T, DistributionPlatformCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DistributionPlatforms and returns the data saved in the database.
     * @param {DistributionPlatformCreateManyAndReturnArgs} args - Arguments to create many DistributionPlatforms.
     * @example
     * // Create many DistributionPlatforms
     * const distributionPlatform = await prisma.distributionPlatform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DistributionPlatforms and only return the `id`
     * const distributionPlatformWithIdOnly = await prisma.distributionPlatform.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DistributionPlatformCreateManyAndReturnArgs>(args?: SelectSubset<T, DistributionPlatformCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DistributionPlatform.
     * @param {DistributionPlatformDeleteArgs} args - Arguments to delete one DistributionPlatform.
     * @example
     * // Delete one DistributionPlatform
     * const DistributionPlatform = await prisma.distributionPlatform.delete({
     *   where: {
     *     // ... filter to delete one DistributionPlatform
     *   }
     * })
     * 
     */
    delete<T extends DistributionPlatformDeleteArgs>(args: SelectSubset<T, DistributionPlatformDeleteArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DistributionPlatform.
     * @param {DistributionPlatformUpdateArgs} args - Arguments to update one DistributionPlatform.
     * @example
     * // Update one DistributionPlatform
     * const distributionPlatform = await prisma.distributionPlatform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DistributionPlatformUpdateArgs>(args: SelectSubset<T, DistributionPlatformUpdateArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DistributionPlatforms.
     * @param {DistributionPlatformDeleteManyArgs} args - Arguments to filter DistributionPlatforms to delete.
     * @example
     * // Delete a few DistributionPlatforms
     * const { count } = await prisma.distributionPlatform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DistributionPlatformDeleteManyArgs>(args?: SelectSubset<T, DistributionPlatformDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionPlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DistributionPlatforms
     * const distributionPlatform = await prisma.distributionPlatform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DistributionPlatformUpdateManyArgs>(args: SelectSubset<T, DistributionPlatformUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DistributionPlatforms and returns the data updated in the database.
     * @param {DistributionPlatformUpdateManyAndReturnArgs} args - Arguments to update many DistributionPlatforms.
     * @example
     * // Update many DistributionPlatforms
     * const distributionPlatform = await prisma.distributionPlatform.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DistributionPlatforms and only return the `id`
     * const distributionPlatformWithIdOnly = await prisma.distributionPlatform.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DistributionPlatformUpdateManyAndReturnArgs>(args: SelectSubset<T, DistributionPlatformUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DistributionPlatform.
     * @param {DistributionPlatformUpsertArgs} args - Arguments to update or create a DistributionPlatform.
     * @example
     * // Update or create a DistributionPlatform
     * const distributionPlatform = await prisma.distributionPlatform.upsert({
     *   create: {
     *     // ... data to create a DistributionPlatform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DistributionPlatform we want to update
     *   }
     * })
     */
    upsert<T extends DistributionPlatformUpsertArgs>(args: SelectSubset<T, DistributionPlatformUpsertArgs<ExtArgs>>): Prisma__DistributionPlatformClient<$Result.GetResult<Prisma.$DistributionPlatformPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DistributionPlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformCountArgs} args - Arguments to filter DistributionPlatforms to count.
     * @example
     * // Count the number of DistributionPlatforms
     * const count = await prisma.distributionPlatform.count({
     *   where: {
     *     // ... the filter for the DistributionPlatforms we want to count
     *   }
     * })
    **/
    count<T extends DistributionPlatformCountArgs>(
      args?: Subset<T, DistributionPlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DistributionPlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DistributionPlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DistributionPlatformAggregateArgs>(args: Subset<T, DistributionPlatformAggregateArgs>): Prisma.PrismaPromise<GetDistributionPlatformAggregateType<T>>

    /**
     * Group by DistributionPlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DistributionPlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DistributionPlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DistributionPlatformGroupByArgs['orderBy'] }
        : { orderBy?: DistributionPlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DistributionPlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDistributionPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DistributionPlatform model
   */
  readonly fields: DistributionPlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DistributionPlatform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DistributionPlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DistributionPlatform model
   */
  interface DistributionPlatformFieldRefs {
    readonly id: FieldRef<"DistributionPlatform", 'String'>
    readonly name: FieldRef<"DistributionPlatform", 'String'>
    readonly logoUrl: FieldRef<"DistributionPlatform", 'String'>
    readonly apiEndpoint: FieldRef<"DistributionPlatform", 'String'>
    readonly isActive: FieldRef<"DistributionPlatform", 'Boolean'>
    readonly createdAt: FieldRef<"DistributionPlatform", 'DateTime'>
    readonly updatedAt: FieldRef<"DistributionPlatform", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DistributionPlatform findUnique
   */
  export type DistributionPlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * Filter, which DistributionPlatform to fetch.
     */
    where: DistributionPlatformWhereUniqueInput
  }

  /**
   * DistributionPlatform findUniqueOrThrow
   */
  export type DistributionPlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * Filter, which DistributionPlatform to fetch.
     */
    where: DistributionPlatformWhereUniqueInput
  }

  /**
   * DistributionPlatform findFirst
   */
  export type DistributionPlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * Filter, which DistributionPlatform to fetch.
     */
    where?: DistributionPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionPlatforms to fetch.
     */
    orderBy?: DistributionPlatformOrderByWithRelationInput | DistributionPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionPlatforms.
     */
    cursor?: DistributionPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionPlatforms.
     */
    distinct?: DistributionPlatformScalarFieldEnum | DistributionPlatformScalarFieldEnum[]
  }

  /**
   * DistributionPlatform findFirstOrThrow
   */
  export type DistributionPlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * Filter, which DistributionPlatform to fetch.
     */
    where?: DistributionPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionPlatforms to fetch.
     */
    orderBy?: DistributionPlatformOrderByWithRelationInput | DistributionPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DistributionPlatforms.
     */
    cursor?: DistributionPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DistributionPlatforms.
     */
    distinct?: DistributionPlatformScalarFieldEnum | DistributionPlatformScalarFieldEnum[]
  }

  /**
   * DistributionPlatform findMany
   */
  export type DistributionPlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * Filter, which DistributionPlatforms to fetch.
     */
    where?: DistributionPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DistributionPlatforms to fetch.
     */
    orderBy?: DistributionPlatformOrderByWithRelationInput | DistributionPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DistributionPlatforms.
     */
    cursor?: DistributionPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DistributionPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DistributionPlatforms.
     */
    skip?: number
    distinct?: DistributionPlatformScalarFieldEnum | DistributionPlatformScalarFieldEnum[]
  }

  /**
   * DistributionPlatform create
   */
  export type DistributionPlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * The data needed to create a DistributionPlatform.
     */
    data: XOR<DistributionPlatformCreateInput, DistributionPlatformUncheckedCreateInput>
  }

  /**
   * DistributionPlatform createMany
   */
  export type DistributionPlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DistributionPlatforms.
     */
    data: DistributionPlatformCreateManyInput | DistributionPlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DistributionPlatform createManyAndReturn
   */
  export type DistributionPlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * The data used to create many DistributionPlatforms.
     */
    data: DistributionPlatformCreateManyInput | DistributionPlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DistributionPlatform update
   */
  export type DistributionPlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * The data needed to update a DistributionPlatform.
     */
    data: XOR<DistributionPlatformUpdateInput, DistributionPlatformUncheckedUpdateInput>
    /**
     * Choose, which DistributionPlatform to update.
     */
    where: DistributionPlatformWhereUniqueInput
  }

  /**
   * DistributionPlatform updateMany
   */
  export type DistributionPlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DistributionPlatforms.
     */
    data: XOR<DistributionPlatformUpdateManyMutationInput, DistributionPlatformUncheckedUpdateManyInput>
    /**
     * Filter which DistributionPlatforms to update
     */
    where?: DistributionPlatformWhereInput
    /**
     * Limit how many DistributionPlatforms to update.
     */
    limit?: number
  }

  /**
   * DistributionPlatform updateManyAndReturn
   */
  export type DistributionPlatformUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * The data used to update DistributionPlatforms.
     */
    data: XOR<DistributionPlatformUpdateManyMutationInput, DistributionPlatformUncheckedUpdateManyInput>
    /**
     * Filter which DistributionPlatforms to update
     */
    where?: DistributionPlatformWhereInput
    /**
     * Limit how many DistributionPlatforms to update.
     */
    limit?: number
  }

  /**
   * DistributionPlatform upsert
   */
  export type DistributionPlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * The filter to search for the DistributionPlatform to update in case it exists.
     */
    where: DistributionPlatformWhereUniqueInput
    /**
     * In case the DistributionPlatform found by the `where` argument doesn't exist, create a new DistributionPlatform with this data.
     */
    create: XOR<DistributionPlatformCreateInput, DistributionPlatformUncheckedCreateInput>
    /**
     * In case the DistributionPlatform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DistributionPlatformUpdateInput, DistributionPlatformUncheckedUpdateInput>
  }

  /**
   * DistributionPlatform delete
   */
  export type DistributionPlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
    /**
     * Filter which DistributionPlatform to delete.
     */
    where: DistributionPlatformWhereUniqueInput
  }

  /**
   * DistributionPlatform deleteMany
   */
  export type DistributionPlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DistributionPlatforms to delete
     */
    where?: DistributionPlatformWhereInput
    /**
     * Limit how many DistributionPlatforms to delete.
     */
    limit?: number
  }

  /**
   * DistributionPlatform without action
   */
  export type DistributionPlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DistributionPlatform
     */
    select?: DistributionPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DistributionPlatform
     */
    omit?: DistributionPlatformOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    roles: 'roles',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    labelId: 'labelId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    bio: 'bio',
    avatarUrl: 'avatarUrl',
    phone: 'phone',
    artistName: 'artistName',
    fullName: 'fullName',
    facebookUrl: 'facebookUrl',
    instagramUrl: 'instagramUrl',
    youtubeUrl: 'youtubeUrl',
    spotifyUrl: 'spotifyUrl',
    appleMusicUrl: 'appleMusicUrl',
    soundcloudUrl: 'soundcloudUrl',
    userId: 'userId',
    socialLinks: 'socialLinks',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const LabelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LabelScalarFieldEnum = (typeof LabelScalarFieldEnum)[keyof typeof LabelScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    artist: 'artist',
    upc: 'upc',
    type: 'type',
    coverImagePath: 'coverImagePath',
    releaseDate: 'releaseDate',
    status: 'status',
    metadataLocked: 'metadataLocked',
    published: 'published',
    albumName: 'albumName',
    mainCategory: 'mainCategory',
    subCategory: 'subCategory',
    platforms: 'platforms',
    distributionLink: 'distributionLink',
    distributionPlatforms: 'distributionPlatforms',
    statusVietnamese: 'statusVietnamese',
    rejectionReason: 'rejectionReason',
    notes: 'notes',
    userId: 'userId',
    labelId: 'labelId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const TrackScalarFieldEnum: {
    id: 'id',
    title: 'title',
    artist: 'artist',
    filePath: 'filePath',
    duration: 'duration',
    isrc: 'isrc',
    fileName: 'fileName',
    artistFullName: 'artistFullName',
    fileSize: 'fileSize',
    format: 'format',
    bitrate: 'bitrate',
    sampleRate: 'sampleRate',
    submissionId: 'submissionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TrackScalarFieldEnum = (typeof TrackScalarFieldEnum)[keyof typeof TrackScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    title: 'title',
    artist: 'artist',
    youtubeVideoId: 'youtubeVideoId',
    youtubeUrl: 'youtubeUrl',
    thumbnailUrl: 'thumbnailUrl',
    duration: 'duration',
    description: 'description',
    tags: 'tags',
    category: 'category',
    language: 'language',
    contentIdEnabled: 'contentIdEnabled',
    contentIdStatus: 'contentIdStatus',
    userId: 'userId',
    labelId: 'labelId',
    submissionId: 'submissionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const FileFolderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    parentId: 'parentId',
    ownerId: 'ownerId',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileFolderScalarFieldEnum = (typeof FileFolderScalarFieldEnum)[keyof typeof FileFolderScalarFieldEnum]


  export const SubmissionContributorScalarFieldEnum: {
    id: 'id',
    role: 'role',
    percentage: 'percentage',
    userId: 'userId',
    submissionId: 'submissionId',
    createdAt: 'createdAt'
  };

  export type SubmissionContributorScalarFieldEnum = (typeof SubmissionContributorScalarFieldEnum)[keyof typeof SubmissionContributorScalarFieldEnum]


  export const TrackContributorScalarFieldEnum: {
    id: 'id',
    role: 'role',
    percentage: 'percentage',
    userId: 'userId',
    trackId: 'trackId',
    createdAt: 'createdAt'
  };

  export type TrackContributorScalarFieldEnum = (typeof TrackContributorScalarFieldEnum)[keyof typeof TrackContributorScalarFieldEnum]


  export const VideoContributorScalarFieldEnum: {
    id: 'id',
    role: 'role',
    percentage: 'percentage',
    userId: 'userId',
    videoId: 'videoId',
    createdAt: 'createdAt'
  };

  export type VideoContributorScalarFieldEnum = (typeof VideoContributorScalarFieldEnum)[keyof typeof VideoContributorScalarFieldEnum]


  export const SubmissionApprovalScalarFieldEnum: {
    id: 'id',
    type: 'type',
    isApproved: 'isApproved',
    reason: 'reason',
    submissionId: 'submissionId',
    approverId: 'approverId',
    createdAt: 'createdAt'
  };

  export type SubmissionApprovalScalarFieldEnum = (typeof SubmissionApprovalScalarFieldEnum)[keyof typeof SubmissionApprovalScalarFieldEnum]


  export const SubmissionCommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    submissionId: 'submissionId',
    createdAt: 'createdAt'
  };

  export type SubmissionCommentScalarFieldEnum = (typeof SubmissionCommentScalarFieldEnum)[keyof typeof SubmissionCommentScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    mimetype: 'mimetype',
    size: 'size',
    category: 'category',
    folderId: 'folderId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const NhatKyScalarFieldEnum: {
    id: 'id',
    action: 'action',
    details: 'details',
    userId: 'userId',
    createdAt: 'createdAt'
  };

  export type NhatKyScalarFieldEnum = (typeof NhatKyScalarFieldEnum)[keyof typeof NhatKyScalarFieldEnum]


  export const DistributionPlatformScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logoUrl: 'logoUrl',
    apiEndpoint: 'apiEndpoint',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DistributionPlatformScalarFieldEnum = (typeof DistributionPlatformScalarFieldEnum)[keyof typeof DistributionPlatformScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ReleaseType'
   */
  export type EnumReleaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReleaseType'>
    


  /**
   * Reference to a field of type 'ReleaseType[]'
   */
  export type ListEnumReleaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReleaseType[]'>
    


  /**
   * Reference to a field of type 'SubmissionStatus'
   */
  export type EnumSubmissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubmissionStatus'>
    


  /**
   * Reference to a field of type 'SubmissionStatus[]'
   */
  export type ListEnumSubmissionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubmissionStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ContributorRole'
   */
  export type EnumContributorRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContributorRole'>
    


  /**
   * Reference to a field of type 'ContributorRole[]'
   */
  export type ListEnumContributorRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContributorRole[]'>
    


  /**
   * Reference to a field of type 'ApprovalType'
   */
  export type EnumApprovalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalType'>
    


  /**
   * Reference to a field of type 'ApprovalType[]'
   */
  export type ListEnumApprovalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalType[]'>
    


  /**
   * Reference to a field of type 'FileCategory'
   */
  export type EnumFileCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileCategory'>
    


  /**
   * Reference to a field of type 'FileCategory[]'
   */
  export type ListEnumFileCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FileCategory[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    roles?: EnumUserRoleNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    labelId?: StringNullableFilter<"User"> | string | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    submissions?: SubmissionListRelationFilter
    label?: XOR<LabelNullableScalarRelationFilter, LabelWhereInput> | null
    files?: FileListRelationFilter
    nhatKy?: NhatKyListRelationFilter
    videos?: VideoListRelationFilter
    fileFolders?: FileFolderListRelationFilter
    submissionContributions?: SubmissionContributorListRelationFilter
    trackContributions?: TrackContributorListRelationFilter
    videoContributions?: VideoContributorListRelationFilter
    comments?: SubmissionCommentListRelationFilter
    approvals?: SubmissionApprovalListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    labelId?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    submissions?: SubmissionOrderByRelationAggregateInput
    label?: LabelOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
    nhatKy?: nhatKyOrderByRelationAggregateInput
    videos?: VideoOrderByRelationAggregateInput
    fileFolders?: FileFolderOrderByRelationAggregateInput
    submissionContributions?: SubmissionContributorOrderByRelationAggregateInput
    trackContributions?: TrackContributorOrderByRelationAggregateInput
    videoContributions?: VideoContributorOrderByRelationAggregateInput
    comments?: SubmissionCommentOrderByRelationAggregateInput
    approvals?: SubmissionApprovalOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    roles?: EnumUserRoleNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    labelId?: StringNullableFilter<"User"> | string | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    submissions?: SubmissionListRelationFilter
    label?: XOR<LabelNullableScalarRelationFilter, LabelWhereInput> | null
    files?: FileListRelationFilter
    nhatKy?: NhatKyListRelationFilter
    videos?: VideoListRelationFilter
    fileFolders?: FileFolderListRelationFilter
    submissionContributions?: SubmissionContributorListRelationFilter
    trackContributions?: TrackContributorListRelationFilter
    videoContributions?: VideoContributorListRelationFilter
    comments?: SubmissionCommentListRelationFilter
    approvals?: SubmissionApprovalListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    password?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    labelId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    roles?: EnumUserRoleNullableListFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    labelId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    bio?: StringNullableFilter<"Profile"> | string | null
    avatarUrl?: StringNullableFilter<"Profile"> | string | null
    phone?: StringNullableFilter<"Profile"> | string | null
    artistName?: StringNullableFilter<"Profile"> | string | null
    fullName?: StringNullableFilter<"Profile"> | string | null
    facebookUrl?: StringNullableFilter<"Profile"> | string | null
    instagramUrl?: StringNullableFilter<"Profile"> | string | null
    youtubeUrl?: StringNullableFilter<"Profile"> | string | null
    spotifyUrl?: StringNullableFilter<"Profile"> | string | null
    appleMusicUrl?: StringNullableFilter<"Profile"> | string | null
    soundcloudUrl?: StringNullableFilter<"Profile"> | string | null
    userId?: StringFilter<"Profile"> | string
    socialLinks?: JsonNullableFilter<"Profile">
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    bio?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    artistName?: SortOrderInput | SortOrder
    fullName?: SortOrderInput | SortOrder
    facebookUrl?: SortOrderInput | SortOrder
    instagramUrl?: SortOrderInput | SortOrder
    youtubeUrl?: SortOrderInput | SortOrder
    spotifyUrl?: SortOrderInput | SortOrder
    appleMusicUrl?: SortOrderInput | SortOrder
    soundcloudUrl?: SortOrderInput | SortOrder
    userId?: SortOrder
    socialLinks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phone?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    bio?: StringNullableFilter<"Profile"> | string | null
    avatarUrl?: StringNullableFilter<"Profile"> | string | null
    artistName?: StringNullableFilter<"Profile"> | string | null
    fullName?: StringNullableFilter<"Profile"> | string | null
    facebookUrl?: StringNullableFilter<"Profile"> | string | null
    instagramUrl?: StringNullableFilter<"Profile"> | string | null
    youtubeUrl?: StringNullableFilter<"Profile"> | string | null
    spotifyUrl?: StringNullableFilter<"Profile"> | string | null
    appleMusicUrl?: StringNullableFilter<"Profile"> | string | null
    soundcloudUrl?: StringNullableFilter<"Profile"> | string | null
    socialLinks?: JsonNullableFilter<"Profile">
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "phone" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    bio?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    artistName?: SortOrderInput | SortOrder
    fullName?: SortOrderInput | SortOrder
    facebookUrl?: SortOrderInput | SortOrder
    instagramUrl?: SortOrderInput | SortOrder
    youtubeUrl?: SortOrderInput | SortOrder
    spotifyUrl?: SortOrderInput | SortOrder
    appleMusicUrl?: SortOrderInput | SortOrder
    soundcloudUrl?: SortOrderInput | SortOrder
    userId?: SortOrder
    socialLinks?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    bio?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    artistName?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    fullName?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    facebookUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    instagramUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    youtubeUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    spotifyUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    appleMusicUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    soundcloudUrl?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    userId?: StringWithAggregatesFilter<"Profile"> | string
    socialLinks?: JsonNullableWithAggregatesFilter<"Profile">
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type LabelWhereInput = {
    AND?: LabelWhereInput | LabelWhereInput[]
    OR?: LabelWhereInput[]
    NOT?: LabelWhereInput | LabelWhereInput[]
    id?: StringFilter<"Label"> | string
    name?: StringFilter<"Label"> | string
    ownerId?: StringFilter<"Label"> | string
    createdAt?: DateTimeFilter<"Label"> | Date | string
    updatedAt?: DateTimeFilter<"Label"> | Date | string
    members?: UserListRelationFilter
    submissions?: SubmissionListRelationFilter
    videos?: VideoListRelationFilter
  }

  export type LabelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: UserOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    videos?: VideoOrderByRelationAggregateInput
  }

  export type LabelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    ownerId?: string
    AND?: LabelWhereInput | LabelWhereInput[]
    OR?: LabelWhereInput[]
    NOT?: LabelWhereInput | LabelWhereInput[]
    createdAt?: DateTimeFilter<"Label"> | Date | string
    updatedAt?: DateTimeFilter<"Label"> | Date | string
    members?: UserListRelationFilter
    submissions?: SubmissionListRelationFilter
    videos?: VideoListRelationFilter
  }, "id" | "name" | "ownerId">

  export type LabelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LabelCountOrderByAggregateInput
    _max?: LabelMaxOrderByAggregateInput
    _min?: LabelMinOrderByAggregateInput
  }

  export type LabelScalarWhereWithAggregatesInput = {
    AND?: LabelScalarWhereWithAggregatesInput | LabelScalarWhereWithAggregatesInput[]
    OR?: LabelScalarWhereWithAggregatesInput[]
    NOT?: LabelScalarWhereWithAggregatesInput | LabelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Label"> | string
    name?: StringWithAggregatesFilter<"Label"> | string
    ownerId?: StringWithAggregatesFilter<"Label"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Label"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Label"> | Date | string
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    title?: StringFilter<"Submission"> | string
    artist?: StringFilter<"Submission"> | string
    upc?: StringNullableFilter<"Submission"> | string | null
    type?: EnumReleaseTypeFilter<"Submission"> | $Enums.ReleaseType
    coverImagePath?: StringFilter<"Submission"> | string
    releaseDate?: DateTimeFilter<"Submission"> | Date | string
    status?: EnumSubmissionStatusFilter<"Submission"> | $Enums.SubmissionStatus
    metadataLocked?: BoolFilter<"Submission"> | boolean
    published?: BoolFilter<"Submission"> | boolean
    albumName?: StringNullableFilter<"Submission"> | string | null
    mainCategory?: StringNullableFilter<"Submission"> | string | null
    subCategory?: StringNullableFilter<"Submission"> | string | null
    platforms?: JsonNullableFilter<"Submission">
    distributionLink?: StringNullableFilter<"Submission"> | string | null
    distributionPlatforms?: JsonNullableFilter<"Submission">
    statusVietnamese?: StringNullableFilter<"Submission"> | string | null
    rejectionReason?: StringNullableFilter<"Submission"> | string | null
    notes?: StringNullableFilter<"Submission"> | string | null
    userId?: StringFilter<"Submission"> | string
    labelId?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updatedAt?: DateTimeFilter<"Submission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    label?: XOR<LabelScalarRelationFilter, LabelWhereInput>
    tracks?: TrackListRelationFilter
    videos?: VideoListRelationFilter
    contributors?: SubmissionContributorListRelationFilter
    comments?: SubmissionCommentListRelationFilter
    approvals?: SubmissionApprovalListRelationFilter
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    upc?: SortOrderInput | SortOrder
    type?: SortOrder
    coverImagePath?: SortOrder
    releaseDate?: SortOrder
    status?: SortOrder
    metadataLocked?: SortOrder
    published?: SortOrder
    albumName?: SortOrderInput | SortOrder
    mainCategory?: SortOrderInput | SortOrder
    subCategory?: SortOrderInput | SortOrder
    platforms?: SortOrderInput | SortOrder
    distributionLink?: SortOrderInput | SortOrder
    distributionPlatforms?: SortOrderInput | SortOrder
    statusVietnamese?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    label?: LabelOrderByWithRelationInput
    tracks?: TrackOrderByRelationAggregateInput
    videos?: VideoOrderByRelationAggregateInput
    contributors?: SubmissionContributorOrderByRelationAggregateInput
    comments?: SubmissionCommentOrderByRelationAggregateInput
    approvals?: SubmissionApprovalOrderByRelationAggregateInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    upc?: string
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    title?: StringFilter<"Submission"> | string
    artist?: StringFilter<"Submission"> | string
    type?: EnumReleaseTypeFilter<"Submission"> | $Enums.ReleaseType
    coverImagePath?: StringFilter<"Submission"> | string
    releaseDate?: DateTimeFilter<"Submission"> | Date | string
    status?: EnumSubmissionStatusFilter<"Submission"> | $Enums.SubmissionStatus
    metadataLocked?: BoolFilter<"Submission"> | boolean
    published?: BoolFilter<"Submission"> | boolean
    albumName?: StringNullableFilter<"Submission"> | string | null
    mainCategory?: StringNullableFilter<"Submission"> | string | null
    subCategory?: StringNullableFilter<"Submission"> | string | null
    platforms?: JsonNullableFilter<"Submission">
    distributionLink?: StringNullableFilter<"Submission"> | string | null
    distributionPlatforms?: JsonNullableFilter<"Submission">
    statusVietnamese?: StringNullableFilter<"Submission"> | string | null
    rejectionReason?: StringNullableFilter<"Submission"> | string | null
    notes?: StringNullableFilter<"Submission"> | string | null
    userId?: StringFilter<"Submission"> | string
    labelId?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updatedAt?: DateTimeFilter<"Submission"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    label?: XOR<LabelScalarRelationFilter, LabelWhereInput>
    tracks?: TrackListRelationFilter
    videos?: VideoListRelationFilter
    contributors?: SubmissionContributorListRelationFilter
    comments?: SubmissionCommentListRelationFilter
    approvals?: SubmissionApprovalListRelationFilter
  }, "id" | "upc">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    upc?: SortOrderInput | SortOrder
    type?: SortOrder
    coverImagePath?: SortOrder
    releaseDate?: SortOrder
    status?: SortOrder
    metadataLocked?: SortOrder
    published?: SortOrder
    albumName?: SortOrderInput | SortOrder
    mainCategory?: SortOrderInput | SortOrder
    subCategory?: SortOrderInput | SortOrder
    platforms?: SortOrderInput | SortOrder
    distributionLink?: SortOrderInput | SortOrder
    distributionPlatforms?: SortOrderInput | SortOrder
    statusVietnamese?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    title?: StringWithAggregatesFilter<"Submission"> | string
    artist?: StringWithAggregatesFilter<"Submission"> | string
    upc?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    type?: EnumReleaseTypeWithAggregatesFilter<"Submission"> | $Enums.ReleaseType
    coverImagePath?: StringWithAggregatesFilter<"Submission"> | string
    releaseDate?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    status?: EnumSubmissionStatusWithAggregatesFilter<"Submission"> | $Enums.SubmissionStatus
    metadataLocked?: BoolWithAggregatesFilter<"Submission"> | boolean
    published?: BoolWithAggregatesFilter<"Submission"> | boolean
    albumName?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    mainCategory?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    subCategory?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    platforms?: JsonNullableWithAggregatesFilter<"Submission">
    distributionLink?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    distributionPlatforms?: JsonNullableWithAggregatesFilter<"Submission">
    statusVietnamese?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    userId?: StringWithAggregatesFilter<"Submission"> | string
    labelId?: StringWithAggregatesFilter<"Submission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type TrackWhereInput = {
    AND?: TrackWhereInput | TrackWhereInput[]
    OR?: TrackWhereInput[]
    NOT?: TrackWhereInput | TrackWhereInput[]
    id?: StringFilter<"Track"> | string
    title?: StringFilter<"Track"> | string
    artist?: StringFilter<"Track"> | string
    filePath?: StringFilter<"Track"> | string
    duration?: IntFilter<"Track"> | number
    isrc?: StringNullableFilter<"Track"> | string | null
    fileName?: StringNullableFilter<"Track"> | string | null
    artistFullName?: StringNullableFilter<"Track"> | string | null
    fileSize?: IntNullableFilter<"Track"> | number | null
    format?: StringNullableFilter<"Track"> | string | null
    bitrate?: StringNullableFilter<"Track"> | string | null
    sampleRate?: StringNullableFilter<"Track"> | string | null
    submissionId?: StringFilter<"Track"> | string
    createdAt?: DateTimeFilter<"Track"> | Date | string
    updatedAt?: DateTimeFilter<"Track"> | Date | string
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
    contributors?: TrackContributorListRelationFilter
  }

  export type TrackOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    filePath?: SortOrder
    duration?: SortOrder
    isrc?: SortOrderInput | SortOrder
    fileName?: SortOrderInput | SortOrder
    artistFullName?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    bitrate?: SortOrderInput | SortOrder
    sampleRate?: SortOrderInput | SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    submission?: SubmissionOrderByWithRelationInput
    contributors?: TrackContributorOrderByRelationAggregateInput
  }

  export type TrackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    isrc?: string
    AND?: TrackWhereInput | TrackWhereInput[]
    OR?: TrackWhereInput[]
    NOT?: TrackWhereInput | TrackWhereInput[]
    title?: StringFilter<"Track"> | string
    artist?: StringFilter<"Track"> | string
    filePath?: StringFilter<"Track"> | string
    duration?: IntFilter<"Track"> | number
    fileName?: StringNullableFilter<"Track"> | string | null
    artistFullName?: StringNullableFilter<"Track"> | string | null
    fileSize?: IntNullableFilter<"Track"> | number | null
    format?: StringNullableFilter<"Track"> | string | null
    bitrate?: StringNullableFilter<"Track"> | string | null
    sampleRate?: StringNullableFilter<"Track"> | string | null
    submissionId?: StringFilter<"Track"> | string
    createdAt?: DateTimeFilter<"Track"> | Date | string
    updatedAt?: DateTimeFilter<"Track"> | Date | string
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
    contributors?: TrackContributorListRelationFilter
  }, "id" | "isrc">

  export type TrackOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    filePath?: SortOrder
    duration?: SortOrder
    isrc?: SortOrderInput | SortOrder
    fileName?: SortOrderInput | SortOrder
    artistFullName?: SortOrderInput | SortOrder
    fileSize?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    bitrate?: SortOrderInput | SortOrder
    sampleRate?: SortOrderInput | SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TrackCountOrderByAggregateInput
    _avg?: TrackAvgOrderByAggregateInput
    _max?: TrackMaxOrderByAggregateInput
    _min?: TrackMinOrderByAggregateInput
    _sum?: TrackSumOrderByAggregateInput
  }

  export type TrackScalarWhereWithAggregatesInput = {
    AND?: TrackScalarWhereWithAggregatesInput | TrackScalarWhereWithAggregatesInput[]
    OR?: TrackScalarWhereWithAggregatesInput[]
    NOT?: TrackScalarWhereWithAggregatesInput | TrackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Track"> | string
    title?: StringWithAggregatesFilter<"Track"> | string
    artist?: StringWithAggregatesFilter<"Track"> | string
    filePath?: StringWithAggregatesFilter<"Track"> | string
    duration?: IntWithAggregatesFilter<"Track"> | number
    isrc?: StringNullableWithAggregatesFilter<"Track"> | string | null
    fileName?: StringNullableWithAggregatesFilter<"Track"> | string | null
    artistFullName?: StringNullableWithAggregatesFilter<"Track"> | string | null
    fileSize?: IntNullableWithAggregatesFilter<"Track"> | number | null
    format?: StringNullableWithAggregatesFilter<"Track"> | string | null
    bitrate?: StringNullableWithAggregatesFilter<"Track"> | string | null
    sampleRate?: StringNullableWithAggregatesFilter<"Track"> | string | null
    submissionId?: StringWithAggregatesFilter<"Track"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Track"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Track"> | Date | string
  }

  export type VideoWhereInput = {
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    id?: StringFilter<"Video"> | string
    title?: StringFilter<"Video"> | string
    artist?: StringFilter<"Video"> | string
    youtubeVideoId?: StringNullableFilter<"Video"> | string | null
    youtubeUrl?: StringNullableFilter<"Video"> | string | null
    thumbnailUrl?: StringNullableFilter<"Video"> | string | null
    duration?: IntNullableFilter<"Video"> | number | null
    description?: StringNullableFilter<"Video"> | string | null
    tags?: StringNullableFilter<"Video"> | string | null
    category?: StringNullableFilter<"Video"> | string | null
    language?: StringNullableFilter<"Video"> | string | null
    contentIdEnabled?: BoolFilter<"Video"> | boolean
    contentIdStatus?: StringNullableFilter<"Video"> | string | null
    userId?: StringFilter<"Video"> | string
    labelId?: StringFilter<"Video"> | string
    submissionId?: StringNullableFilter<"Video"> | string | null
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    label?: XOR<LabelScalarRelationFilter, LabelWhereInput>
    submission?: XOR<SubmissionNullableScalarRelationFilter, SubmissionWhereInput> | null
    contributors?: VideoContributorListRelationFilter
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    youtubeVideoId?: SortOrderInput | SortOrder
    youtubeUrl?: SortOrderInput | SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    contentIdEnabled?: SortOrder
    contentIdStatus?: SortOrderInput | SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    submissionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    label?: LabelOrderByWithRelationInput
    submission?: SubmissionOrderByWithRelationInput
    contributors?: VideoContributorOrderByRelationAggregateInput
  }

  export type VideoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    title?: StringFilter<"Video"> | string
    artist?: StringFilter<"Video"> | string
    youtubeVideoId?: StringNullableFilter<"Video"> | string | null
    youtubeUrl?: StringNullableFilter<"Video"> | string | null
    thumbnailUrl?: StringNullableFilter<"Video"> | string | null
    duration?: IntNullableFilter<"Video"> | number | null
    description?: StringNullableFilter<"Video"> | string | null
    tags?: StringNullableFilter<"Video"> | string | null
    category?: StringNullableFilter<"Video"> | string | null
    language?: StringNullableFilter<"Video"> | string | null
    contentIdEnabled?: BoolFilter<"Video"> | boolean
    contentIdStatus?: StringNullableFilter<"Video"> | string | null
    userId?: StringFilter<"Video"> | string
    labelId?: StringFilter<"Video"> | string
    submissionId?: StringNullableFilter<"Video"> | string | null
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    label?: XOR<LabelScalarRelationFilter, LabelWhereInput>
    submission?: XOR<SubmissionNullableScalarRelationFilter, SubmissionWhereInput> | null
    contributors?: VideoContributorListRelationFilter
  }, "id">

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    youtubeVideoId?: SortOrderInput | SortOrder
    youtubeUrl?: SortOrderInput | SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    contentIdEnabled?: SortOrder
    contentIdStatus?: SortOrderInput | SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    submissionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _avg?: VideoAvgOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
    _sum?: VideoSumOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    OR?: VideoScalarWhereWithAggregatesInput[]
    NOT?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Video"> | string
    title?: StringWithAggregatesFilter<"Video"> | string
    artist?: StringWithAggregatesFilter<"Video"> | string
    youtubeVideoId?: StringNullableWithAggregatesFilter<"Video"> | string | null
    youtubeUrl?: StringNullableWithAggregatesFilter<"Video"> | string | null
    thumbnailUrl?: StringNullableWithAggregatesFilter<"Video"> | string | null
    duration?: IntNullableWithAggregatesFilter<"Video"> | number | null
    description?: StringNullableWithAggregatesFilter<"Video"> | string | null
    tags?: StringNullableWithAggregatesFilter<"Video"> | string | null
    category?: StringNullableWithAggregatesFilter<"Video"> | string | null
    language?: StringNullableWithAggregatesFilter<"Video"> | string | null
    contentIdEnabled?: BoolWithAggregatesFilter<"Video"> | boolean
    contentIdStatus?: StringNullableWithAggregatesFilter<"Video"> | string | null
    userId?: StringWithAggregatesFilter<"Video"> | string
    labelId?: StringWithAggregatesFilter<"Video"> | string
    submissionId?: StringNullableWithAggregatesFilter<"Video"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Video"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Video"> | Date | string
  }

  export type FileFolderWhereInput = {
    AND?: FileFolderWhereInput | FileFolderWhereInput[]
    OR?: FileFolderWhereInput[]
    NOT?: FileFolderWhereInput | FileFolderWhereInput[]
    id?: StringFilter<"FileFolder"> | string
    name?: StringFilter<"FileFolder"> | string
    path?: StringFilter<"FileFolder"> | string
    parentId?: StringNullableFilter<"FileFolder"> | string | null
    ownerId?: StringNullableFilter<"FileFolder"> | string | null
    isPublic?: BoolFilter<"FileFolder"> | boolean
    createdAt?: DateTimeFilter<"FileFolder"> | Date | string
    updatedAt?: DateTimeFilter<"FileFolder"> | Date | string
    parent?: XOR<FileFolderNullableScalarRelationFilter, FileFolderWhereInput> | null
    children?: FileFolderListRelationFilter
    files?: FileListRelationFilter
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FileFolderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: FileFolderOrderByWithRelationInput
    children?: FileFolderOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
  }

  export type FileFolderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    path?: string
    AND?: FileFolderWhereInput | FileFolderWhereInput[]
    OR?: FileFolderWhereInput[]
    NOT?: FileFolderWhereInput | FileFolderWhereInput[]
    name?: StringFilter<"FileFolder"> | string
    parentId?: StringNullableFilter<"FileFolder"> | string | null
    ownerId?: StringNullableFilter<"FileFolder"> | string | null
    isPublic?: BoolFilter<"FileFolder"> | boolean
    createdAt?: DateTimeFilter<"FileFolder"> | Date | string
    updatedAt?: DateTimeFilter<"FileFolder"> | Date | string
    parent?: XOR<FileFolderNullableScalarRelationFilter, FileFolderWhereInput> | null
    children?: FileFolderListRelationFilter
    files?: FileListRelationFilter
    owner?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "path">

  export type FileFolderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrderInput | SortOrder
    ownerId?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileFolderCountOrderByAggregateInput
    _max?: FileFolderMaxOrderByAggregateInput
    _min?: FileFolderMinOrderByAggregateInput
  }

  export type FileFolderScalarWhereWithAggregatesInput = {
    AND?: FileFolderScalarWhereWithAggregatesInput | FileFolderScalarWhereWithAggregatesInput[]
    OR?: FileFolderScalarWhereWithAggregatesInput[]
    NOT?: FileFolderScalarWhereWithAggregatesInput | FileFolderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FileFolder"> | string
    name?: StringWithAggregatesFilter<"FileFolder"> | string
    path?: StringWithAggregatesFilter<"FileFolder"> | string
    parentId?: StringNullableWithAggregatesFilter<"FileFolder"> | string | null
    ownerId?: StringNullableWithAggregatesFilter<"FileFolder"> | string | null
    isPublic?: BoolWithAggregatesFilter<"FileFolder"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"FileFolder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FileFolder"> | Date | string
  }

  export type SubmissionContributorWhereInput = {
    AND?: SubmissionContributorWhereInput | SubmissionContributorWhereInput[]
    OR?: SubmissionContributorWhereInput[]
    NOT?: SubmissionContributorWhereInput | SubmissionContributorWhereInput[]
    id?: StringFilter<"SubmissionContributor"> | string
    role?: StringFilter<"SubmissionContributor"> | string
    percentage?: FloatNullableFilter<"SubmissionContributor"> | number | null
    userId?: StringFilter<"SubmissionContributor"> | string
    submissionId?: StringFilter<"SubmissionContributor"> | string
    createdAt?: DateTimeFilter<"SubmissionContributor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
  }

  export type SubmissionContributorOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrderInput | SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    submission?: SubmissionOrderByWithRelationInput
  }

  export type SubmissionContributorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionContributorWhereInput | SubmissionContributorWhereInput[]
    OR?: SubmissionContributorWhereInput[]
    NOT?: SubmissionContributorWhereInput | SubmissionContributorWhereInput[]
    role?: StringFilter<"SubmissionContributor"> | string
    percentage?: FloatNullableFilter<"SubmissionContributor"> | number | null
    userId?: StringFilter<"SubmissionContributor"> | string
    submissionId?: StringFilter<"SubmissionContributor"> | string
    createdAt?: DateTimeFilter<"SubmissionContributor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
  }, "id">

  export type SubmissionContributorOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrderInput | SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    _count?: SubmissionContributorCountOrderByAggregateInput
    _avg?: SubmissionContributorAvgOrderByAggregateInput
    _max?: SubmissionContributorMaxOrderByAggregateInput
    _min?: SubmissionContributorMinOrderByAggregateInput
    _sum?: SubmissionContributorSumOrderByAggregateInput
  }

  export type SubmissionContributorScalarWhereWithAggregatesInput = {
    AND?: SubmissionContributorScalarWhereWithAggregatesInput | SubmissionContributorScalarWhereWithAggregatesInput[]
    OR?: SubmissionContributorScalarWhereWithAggregatesInput[]
    NOT?: SubmissionContributorScalarWhereWithAggregatesInput | SubmissionContributorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubmissionContributor"> | string
    role?: StringWithAggregatesFilter<"SubmissionContributor"> | string
    percentage?: FloatNullableWithAggregatesFilter<"SubmissionContributor"> | number | null
    userId?: StringWithAggregatesFilter<"SubmissionContributor"> | string
    submissionId?: StringWithAggregatesFilter<"SubmissionContributor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SubmissionContributor"> | Date | string
  }

  export type TrackContributorWhereInput = {
    AND?: TrackContributorWhereInput | TrackContributorWhereInput[]
    OR?: TrackContributorWhereInput[]
    NOT?: TrackContributorWhereInput | TrackContributorWhereInput[]
    id?: StringFilter<"TrackContributor"> | string
    role?: EnumContributorRoleFilter<"TrackContributor"> | $Enums.ContributorRole
    percentage?: FloatNullableFilter<"TrackContributor"> | number | null
    userId?: StringFilter<"TrackContributor"> | string
    trackId?: StringFilter<"TrackContributor"> | string
    createdAt?: DateTimeFilter<"TrackContributor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    track?: XOR<TrackScalarRelationFilter, TrackWhereInput>
  }

  export type TrackContributorOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrderInput | SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    track?: TrackOrderByWithRelationInput
  }

  export type TrackContributorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TrackContributorWhereInput | TrackContributorWhereInput[]
    OR?: TrackContributorWhereInput[]
    NOT?: TrackContributorWhereInput | TrackContributorWhereInput[]
    role?: EnumContributorRoleFilter<"TrackContributor"> | $Enums.ContributorRole
    percentage?: FloatNullableFilter<"TrackContributor"> | number | null
    userId?: StringFilter<"TrackContributor"> | string
    trackId?: StringFilter<"TrackContributor"> | string
    createdAt?: DateTimeFilter<"TrackContributor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    track?: XOR<TrackScalarRelationFilter, TrackWhereInput>
  }, "id">

  export type TrackContributorOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrderInput | SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    createdAt?: SortOrder
    _count?: TrackContributorCountOrderByAggregateInput
    _avg?: TrackContributorAvgOrderByAggregateInput
    _max?: TrackContributorMaxOrderByAggregateInput
    _min?: TrackContributorMinOrderByAggregateInput
    _sum?: TrackContributorSumOrderByAggregateInput
  }

  export type TrackContributorScalarWhereWithAggregatesInput = {
    AND?: TrackContributorScalarWhereWithAggregatesInput | TrackContributorScalarWhereWithAggregatesInput[]
    OR?: TrackContributorScalarWhereWithAggregatesInput[]
    NOT?: TrackContributorScalarWhereWithAggregatesInput | TrackContributorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TrackContributor"> | string
    role?: EnumContributorRoleWithAggregatesFilter<"TrackContributor"> | $Enums.ContributorRole
    percentage?: FloatNullableWithAggregatesFilter<"TrackContributor"> | number | null
    userId?: StringWithAggregatesFilter<"TrackContributor"> | string
    trackId?: StringWithAggregatesFilter<"TrackContributor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TrackContributor"> | Date | string
  }

  export type VideoContributorWhereInput = {
    AND?: VideoContributorWhereInput | VideoContributorWhereInput[]
    OR?: VideoContributorWhereInput[]
    NOT?: VideoContributorWhereInput | VideoContributorWhereInput[]
    id?: StringFilter<"VideoContributor"> | string
    role?: StringFilter<"VideoContributor"> | string
    percentage?: FloatNullableFilter<"VideoContributor"> | number | null
    userId?: StringFilter<"VideoContributor"> | string
    videoId?: StringFilter<"VideoContributor"> | string
    createdAt?: DateTimeFilter<"VideoContributor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    video?: XOR<VideoScalarRelationFilter, VideoWhereInput>
  }

  export type VideoContributorOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrderInput | SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    video?: VideoOrderByWithRelationInput
  }

  export type VideoContributorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VideoContributorWhereInput | VideoContributorWhereInput[]
    OR?: VideoContributorWhereInput[]
    NOT?: VideoContributorWhereInput | VideoContributorWhereInput[]
    role?: StringFilter<"VideoContributor"> | string
    percentage?: FloatNullableFilter<"VideoContributor"> | number | null
    userId?: StringFilter<"VideoContributor"> | string
    videoId?: StringFilter<"VideoContributor"> | string
    createdAt?: DateTimeFilter<"VideoContributor"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    video?: XOR<VideoScalarRelationFilter, VideoWhereInput>
  }, "id">

  export type VideoContributorOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrderInput | SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    createdAt?: SortOrder
    _count?: VideoContributorCountOrderByAggregateInput
    _avg?: VideoContributorAvgOrderByAggregateInput
    _max?: VideoContributorMaxOrderByAggregateInput
    _min?: VideoContributorMinOrderByAggregateInput
    _sum?: VideoContributorSumOrderByAggregateInput
  }

  export type VideoContributorScalarWhereWithAggregatesInput = {
    AND?: VideoContributorScalarWhereWithAggregatesInput | VideoContributorScalarWhereWithAggregatesInput[]
    OR?: VideoContributorScalarWhereWithAggregatesInput[]
    NOT?: VideoContributorScalarWhereWithAggregatesInput | VideoContributorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VideoContributor"> | string
    role?: StringWithAggregatesFilter<"VideoContributor"> | string
    percentage?: FloatNullableWithAggregatesFilter<"VideoContributor"> | number | null
    userId?: StringWithAggregatesFilter<"VideoContributor"> | string
    videoId?: StringWithAggregatesFilter<"VideoContributor"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VideoContributor"> | Date | string
  }

  export type SubmissionApprovalWhereInput = {
    AND?: SubmissionApprovalWhereInput | SubmissionApprovalWhereInput[]
    OR?: SubmissionApprovalWhereInput[]
    NOT?: SubmissionApprovalWhereInput | SubmissionApprovalWhereInput[]
    id?: StringFilter<"SubmissionApproval"> | string
    type?: EnumApprovalTypeFilter<"SubmissionApproval"> | $Enums.ApprovalType
    isApproved?: BoolFilter<"SubmissionApproval"> | boolean
    reason?: StringNullableFilter<"SubmissionApproval"> | string | null
    submissionId?: StringFilter<"SubmissionApproval"> | string
    approverId?: StringFilter<"SubmissionApproval"> | string
    createdAt?: DateTimeFilter<"SubmissionApproval"> | Date | string
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
    approver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SubmissionApprovalOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    reason?: SortOrderInput | SortOrder
    submissionId?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
    submission?: SubmissionOrderByWithRelationInput
    approver?: UserOrderByWithRelationInput
  }

  export type SubmissionApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionApprovalWhereInput | SubmissionApprovalWhereInput[]
    OR?: SubmissionApprovalWhereInput[]
    NOT?: SubmissionApprovalWhereInput | SubmissionApprovalWhereInput[]
    type?: EnumApprovalTypeFilter<"SubmissionApproval"> | $Enums.ApprovalType
    isApproved?: BoolFilter<"SubmissionApproval"> | boolean
    reason?: StringNullableFilter<"SubmissionApproval"> | string | null
    submissionId?: StringFilter<"SubmissionApproval"> | string
    approverId?: StringFilter<"SubmissionApproval"> | string
    createdAt?: DateTimeFilter<"SubmissionApproval"> | Date | string
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
    approver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SubmissionApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    reason?: SortOrderInput | SortOrder
    submissionId?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
    _count?: SubmissionApprovalCountOrderByAggregateInput
    _max?: SubmissionApprovalMaxOrderByAggregateInput
    _min?: SubmissionApprovalMinOrderByAggregateInput
  }

  export type SubmissionApprovalScalarWhereWithAggregatesInput = {
    AND?: SubmissionApprovalScalarWhereWithAggregatesInput | SubmissionApprovalScalarWhereWithAggregatesInput[]
    OR?: SubmissionApprovalScalarWhereWithAggregatesInput[]
    NOT?: SubmissionApprovalScalarWhereWithAggregatesInput | SubmissionApprovalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubmissionApproval"> | string
    type?: EnumApprovalTypeWithAggregatesFilter<"SubmissionApproval"> | $Enums.ApprovalType
    isApproved?: BoolWithAggregatesFilter<"SubmissionApproval"> | boolean
    reason?: StringNullableWithAggregatesFilter<"SubmissionApproval"> | string | null
    submissionId?: StringWithAggregatesFilter<"SubmissionApproval"> | string
    approverId?: StringWithAggregatesFilter<"SubmissionApproval"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SubmissionApproval"> | Date | string
  }

  export type SubmissionCommentWhereInput = {
    AND?: SubmissionCommentWhereInput | SubmissionCommentWhereInput[]
    OR?: SubmissionCommentWhereInput[]
    NOT?: SubmissionCommentWhereInput | SubmissionCommentWhereInput[]
    id?: StringFilter<"SubmissionComment"> | string
    content?: StringFilter<"SubmissionComment"> | string
    userId?: StringFilter<"SubmissionComment"> | string
    submissionId?: StringFilter<"SubmissionComment"> | string
    createdAt?: DateTimeFilter<"SubmissionComment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
  }

  export type SubmissionCommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    submission?: SubmissionOrderByWithRelationInput
  }

  export type SubmissionCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionCommentWhereInput | SubmissionCommentWhereInput[]
    OR?: SubmissionCommentWhereInput[]
    NOT?: SubmissionCommentWhereInput | SubmissionCommentWhereInput[]
    content?: StringFilter<"SubmissionComment"> | string
    userId?: StringFilter<"SubmissionComment"> | string
    submissionId?: StringFilter<"SubmissionComment"> | string
    createdAt?: DateTimeFilter<"SubmissionComment"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    submission?: XOR<SubmissionScalarRelationFilter, SubmissionWhereInput>
  }, "id">

  export type SubmissionCommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    _count?: SubmissionCommentCountOrderByAggregateInput
    _max?: SubmissionCommentMaxOrderByAggregateInput
    _min?: SubmissionCommentMinOrderByAggregateInput
  }

  export type SubmissionCommentScalarWhereWithAggregatesInput = {
    AND?: SubmissionCommentScalarWhereWithAggregatesInput | SubmissionCommentScalarWhereWithAggregatesInput[]
    OR?: SubmissionCommentScalarWhereWithAggregatesInput[]
    NOT?: SubmissionCommentScalarWhereWithAggregatesInput | SubmissionCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubmissionComment"> | string
    content?: StringWithAggregatesFilter<"SubmissionComment"> | string
    userId?: StringWithAggregatesFilter<"SubmissionComment"> | string
    submissionId?: StringWithAggregatesFilter<"SubmissionComment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SubmissionComment"> | Date | string
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    category?: EnumFileCategoryFilter<"File"> | $Enums.FileCategory
    folderId?: StringNullableFilter<"File"> | string | null
    userId?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    folder?: XOR<FileFolderNullableScalarRelationFilter, FileFolderWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    folderId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    folder?: FileFolderOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    path?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    category?: EnumFileCategoryFilter<"File"> | $Enums.FileCategory
    folderId?: StringNullableFilter<"File"> | string | null
    userId?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    folder?: XOR<FileFolderNullableScalarRelationFilter, FileFolderWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "path">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    folderId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    name?: StringWithAggregatesFilter<"File"> | string
    path?: StringWithAggregatesFilter<"File"> | string
    mimetype?: StringWithAggregatesFilter<"File"> | string
    size?: IntWithAggregatesFilter<"File"> | number
    category?: EnumFileCategoryWithAggregatesFilter<"File"> | $Enums.FileCategory
    folderId?: StringNullableWithAggregatesFilter<"File"> | string | null
    userId?: StringNullableWithAggregatesFilter<"File"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
  }

  export type nhatKyWhereInput = {
    AND?: nhatKyWhereInput | nhatKyWhereInput[]
    OR?: nhatKyWhereInput[]
    NOT?: nhatKyWhereInput | nhatKyWhereInput[]
    id?: StringFilter<"nhatKy"> | string
    action?: StringFilter<"nhatKy"> | string
    details?: JsonNullableFilter<"nhatKy">
    userId?: StringNullableFilter<"nhatKy"> | string | null
    createdAt?: DateTimeFilter<"nhatKy"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type nhatKyOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type nhatKyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: nhatKyWhereInput | nhatKyWhereInput[]
    OR?: nhatKyWhereInput[]
    NOT?: nhatKyWhereInput | nhatKyWhereInput[]
    action?: StringFilter<"nhatKy"> | string
    details?: JsonNullableFilter<"nhatKy">
    userId?: StringNullableFilter<"nhatKy"> | string | null
    createdAt?: DateTimeFilter<"nhatKy"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type nhatKyOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: nhatKyCountOrderByAggregateInput
    _max?: nhatKyMaxOrderByAggregateInput
    _min?: nhatKyMinOrderByAggregateInput
  }

  export type nhatKyScalarWhereWithAggregatesInput = {
    AND?: nhatKyScalarWhereWithAggregatesInput | nhatKyScalarWhereWithAggregatesInput[]
    OR?: nhatKyScalarWhereWithAggregatesInput[]
    NOT?: nhatKyScalarWhereWithAggregatesInput | nhatKyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"nhatKy"> | string
    action?: StringWithAggregatesFilter<"nhatKy"> | string
    details?: JsonNullableWithAggregatesFilter<"nhatKy">
    userId?: StringNullableWithAggregatesFilter<"nhatKy"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"nhatKy"> | Date | string
  }

  export type DistributionPlatformWhereInput = {
    AND?: DistributionPlatformWhereInput | DistributionPlatformWhereInput[]
    OR?: DistributionPlatformWhereInput[]
    NOT?: DistributionPlatformWhereInput | DistributionPlatformWhereInput[]
    id?: StringFilter<"DistributionPlatform"> | string
    name?: StringFilter<"DistributionPlatform"> | string
    logoUrl?: StringNullableFilter<"DistributionPlatform"> | string | null
    apiEndpoint?: StringNullableFilter<"DistributionPlatform"> | string | null
    isActive?: BoolFilter<"DistributionPlatform"> | boolean
    createdAt?: DateTimeFilter<"DistributionPlatform"> | Date | string
    updatedAt?: DateTimeFilter<"DistributionPlatform"> | Date | string
  }

  export type DistributionPlatformOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    apiEndpoint?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributionPlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: DistributionPlatformWhereInput | DistributionPlatformWhereInput[]
    OR?: DistributionPlatformWhereInput[]
    NOT?: DistributionPlatformWhereInput | DistributionPlatformWhereInput[]
    logoUrl?: StringNullableFilter<"DistributionPlatform"> | string | null
    apiEndpoint?: StringNullableFilter<"DistributionPlatform"> | string | null
    isActive?: BoolFilter<"DistributionPlatform"> | boolean
    createdAt?: DateTimeFilter<"DistributionPlatform"> | Date | string
    updatedAt?: DateTimeFilter<"DistributionPlatform"> | Date | string
  }, "id" | "name">

  export type DistributionPlatformOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    apiEndpoint?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DistributionPlatformCountOrderByAggregateInput
    _max?: DistributionPlatformMaxOrderByAggregateInput
    _min?: DistributionPlatformMinOrderByAggregateInput
  }

  export type DistributionPlatformScalarWhereWithAggregatesInput = {
    AND?: DistributionPlatformScalarWhereWithAggregatesInput | DistributionPlatformScalarWhereWithAggregatesInput[]
    OR?: DistributionPlatformScalarWhereWithAggregatesInput[]
    NOT?: DistributionPlatformScalarWhereWithAggregatesInput | DistributionPlatformScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DistributionPlatform"> | string
    name?: StringWithAggregatesFilter<"DistributionPlatform"> | string
    logoUrl?: StringNullableWithAggregatesFilter<"DistributionPlatform"> | string | null
    apiEndpoint?: StringNullableWithAggregatesFilter<"DistributionPlatform"> | string | null
    isActive?: BoolWithAggregatesFilter<"DistributionPlatform"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DistributionPlatform"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DistributionPlatform"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateInput = {
    id?: string
    bio?: string | null
    avatarUrl?: string | null
    phone?: string | null
    artistName?: string | null
    fullName?: string | null
    facebookUrl?: string | null
    instagramUrl?: string | null
    youtubeUrl?: string | null
    spotifyUrl?: string | null
    appleMusicUrl?: string | null
    soundcloudUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    bio?: string | null
    avatarUrl?: string | null
    phone?: string | null
    artistName?: string | null
    fullName?: string | null
    facebookUrl?: string | null
    instagramUrl?: string | null
    youtubeUrl?: string | null
    spotifyUrl?: string | null
    appleMusicUrl?: string | null
    soundcloudUrl?: string | null
    userId: string
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    artistName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    appleMusicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    soundcloudUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    artistName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    appleMusicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    soundcloudUrl?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    bio?: string | null
    avatarUrl?: string | null
    phone?: string | null
    artistName?: string | null
    fullName?: string | null
    facebookUrl?: string | null
    instagramUrl?: string | null
    youtubeUrl?: string | null
    spotifyUrl?: string | null
    appleMusicUrl?: string | null
    soundcloudUrl?: string | null
    userId: string
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    artistName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    appleMusicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    soundcloudUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    artistName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    appleMusicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    soundcloudUrl?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabelCreateInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutLabelInput
    submissions?: SubmissionCreateNestedManyWithoutLabelInput
    videos?: VideoCreateNestedManyWithoutLabelInput
  }

  export type LabelUncheckedCreateInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutLabelInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabelInput
    videos?: VideoUncheckedCreateNestedManyWithoutLabelInput
  }

  export type LabelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutLabelNestedInput
    submissions?: SubmissionUpdateManyWithoutLabelNestedInput
    videos?: VideoUpdateManyWithoutLabelNestedInput
  }

  export type LabelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutLabelNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabelNestedInput
    videos?: VideoUncheckedUpdateManyWithoutLabelNestedInput
  }

  export type LabelCreateManyInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LabelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    label: LabelCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionCreateManyInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackCreateInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutTracksInput
    contributors?: TrackContributorCreateNestedManyWithoutTrackInput
  }

  export type TrackUncheckedCreateInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    submissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: TrackContributorUncheckedCreateNestedManyWithoutTrackInput
  }

  export type TrackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutTracksNestedInput
    contributors?: TrackContributorUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: TrackContributorUncheckedUpdateManyWithoutTrackNestedInput
  }

  export type TrackCreateManyInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    submissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoCreateInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVideosInput
    label: LabelCreateNestedOneWithoutVideosInput
    submission?: SubmissionCreateNestedOneWithoutVideosInput
    contributors?: VideoContributorCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    labelId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: VideoContributorUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVideosNestedInput
    label?: LabelUpdateOneRequiredWithoutVideosNestedInput
    submission?: SubmissionUpdateOneWithoutVideosNestedInput
    contributors?: VideoContributorUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: VideoContributorUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoCreateManyInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    labelId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileFolderCreateInput = {
    id?: string
    name: string
    path: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: FileFolderCreateNestedOneWithoutChildrenInput
    children?: FileFolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
    owner?: UserCreateNestedOneWithoutFileFoldersInput
  }

  export type FileFolderUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    ownerId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FileFolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FileFolderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: FileFolderUpdateOneWithoutChildrenNestedInput
    children?: FileFolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
    owner?: UserUpdateOneWithoutFileFoldersNestedInput
  }

  export type FileFolderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FileFolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FileFolderCreateManyInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    ownerId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileFolderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileFolderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorCreateInput = {
    id?: string
    role: string
    percentage?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionContributionsInput
    submission: SubmissionCreateNestedOneWithoutContributorsInput
  }

  export type SubmissionContributorUncheckedCreateInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionContributorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionContributionsNestedInput
    submission?: SubmissionUpdateOneRequiredWithoutContributorsNestedInput
  }

  export type SubmissionContributorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorCreateManyInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionContributorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorCreateInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTrackContributionsInput
    track: TrackCreateNestedOneWithoutContributorsInput
  }

  export type TrackContributorUncheckedCreateInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    userId: string
    trackId: string
    createdAt?: Date | string
  }

  export type TrackContributorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTrackContributionsNestedInput
    track?: TrackUpdateOneRequiredWithoutContributorsNestedInput
  }

  export type TrackContributorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorCreateManyInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    userId: string
    trackId: string
    createdAt?: Date | string
  }

  export type TrackContributorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    trackId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorCreateInput = {
    id?: string
    role: string
    percentage?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutVideoContributionsInput
    video: VideoCreateNestedOneWithoutContributorsInput
  }

  export type VideoContributorUncheckedCreateInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    videoId: string
    createdAt?: Date | string
  }

  export type VideoContributorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVideoContributionsNestedInput
    video?: VideoUpdateOneRequiredWithoutContributorsNestedInput
  }

  export type VideoContributorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorCreateManyInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    videoId: string
    createdAt?: Date | string
  }

  export type VideoContributorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    videoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalCreateInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    createdAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutApprovalsInput
    approver: UserCreateNestedOneWithoutApprovalsInput
  }

  export type SubmissionApprovalUncheckedCreateInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    submissionId: string
    approverId: string
    createdAt?: Date | string
  }

  export type SubmissionApprovalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutApprovalsNestedInput
    approver?: UserUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type SubmissionApprovalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalCreateManyInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    submissionId: string
    approverId: string
    createdAt?: Date | string
  }

  export type SubmissionApprovalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    approverId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
    submission: SubmissionCreateNestedOneWithoutCommentsInput
  }

  export type SubmissionCommentUncheckedCreateInput = {
    id?: string
    content: string
    userId: string
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    submission?: SubmissionUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type SubmissionCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentCreateManyInput = {
    id?: string
    content: string
    userId: string
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FileFolderCreateNestedOneWithoutFilesInput
    user?: UserCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    folderId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FileFolderUpdateOneWithoutFilesNestedInput
    user?: UserUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    folderId?: string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type nhatKyCreateInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutNhatKyInput
  }

  export type nhatKyUncheckedCreateInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
  }

  export type nhatKyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutNhatKyNestedInput
  }

  export type nhatKyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type nhatKyCreateManyInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
  }

  export type nhatKyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type nhatKyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionPlatformCreateInput = {
    id?: string
    name: string
    logoUrl?: string | null
    apiEndpoint?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistributionPlatformUncheckedCreateInput = {
    id?: string
    name: string
    logoUrl?: string | null
    apiEndpoint?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistributionPlatformUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionPlatformUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionPlatformCreateManyInput = {
    id?: string
    name: string
    logoUrl?: string | null
    apiEndpoint?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DistributionPlatformUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DistributionPlatformUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type LabelNullableScalarRelationFilter = {
    is?: LabelWhereInput | null
    isNot?: LabelWhereInput | null
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type NhatKyListRelationFilter = {
    every?: nhatKyWhereInput
    some?: nhatKyWhereInput
    none?: nhatKyWhereInput
  }

  export type VideoListRelationFilter = {
    every?: VideoWhereInput
    some?: VideoWhereInput
    none?: VideoWhereInput
  }

  export type FileFolderListRelationFilter = {
    every?: FileFolderWhereInput
    some?: FileFolderWhereInput
    none?: FileFolderWhereInput
  }

  export type SubmissionContributorListRelationFilter = {
    every?: SubmissionContributorWhereInput
    some?: SubmissionContributorWhereInput
    none?: SubmissionContributorWhereInput
  }

  export type TrackContributorListRelationFilter = {
    every?: TrackContributorWhereInput
    some?: TrackContributorWhereInput
    none?: TrackContributorWhereInput
  }

  export type VideoContributorListRelationFilter = {
    every?: VideoContributorWhereInput
    some?: VideoContributorWhereInput
    none?: VideoContributorWhereInput
  }

  export type SubmissionCommentListRelationFilter = {
    every?: SubmissionCommentWhereInput
    some?: SubmissionCommentWhereInput
    none?: SubmissionCommentWhereInput
  }

  export type SubmissionApprovalListRelationFilter = {
    every?: SubmissionApprovalWhereInput
    some?: SubmissionApprovalWhereInput
    none?: SubmissionApprovalWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type nhatKyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileFolderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionContributorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TrackContributorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoContributorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    labelId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    labelId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    labelId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    avatarUrl?: SortOrder
    phone?: SortOrder
    artistName?: SortOrder
    fullName?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    youtubeUrl?: SortOrder
    spotifyUrl?: SortOrder
    appleMusicUrl?: SortOrder
    soundcloudUrl?: SortOrder
    userId?: SortOrder
    socialLinks?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    avatarUrl?: SortOrder
    phone?: SortOrder
    artistName?: SortOrder
    fullName?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    youtubeUrl?: SortOrder
    spotifyUrl?: SortOrder
    appleMusicUrl?: SortOrder
    soundcloudUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    bio?: SortOrder
    avatarUrl?: SortOrder
    phone?: SortOrder
    artistName?: SortOrder
    fullName?: SortOrder
    facebookUrl?: SortOrder
    instagramUrl?: SortOrder
    youtubeUrl?: SortOrder
    spotifyUrl?: SortOrder
    appleMusicUrl?: SortOrder
    soundcloudUrl?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LabelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LabelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LabelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReleaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReleaseType | EnumReleaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReleaseTypeFilter<$PrismaModel> | $Enums.ReleaseType
  }

  export type EnumSubmissionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionStatus | EnumSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionStatusFilter<$PrismaModel> | $Enums.SubmissionStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LabelScalarRelationFilter = {
    is?: LabelWhereInput
    isNot?: LabelWhereInput
  }

  export type TrackListRelationFilter = {
    every?: TrackWhereInput
    some?: TrackWhereInput
    none?: TrackWhereInput
  }

  export type TrackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    upc?: SortOrder
    type?: SortOrder
    coverImagePath?: SortOrder
    releaseDate?: SortOrder
    status?: SortOrder
    metadataLocked?: SortOrder
    published?: SortOrder
    albumName?: SortOrder
    mainCategory?: SortOrder
    subCategory?: SortOrder
    platforms?: SortOrder
    distributionLink?: SortOrder
    distributionPlatforms?: SortOrder
    statusVietnamese?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    upc?: SortOrder
    type?: SortOrder
    coverImagePath?: SortOrder
    releaseDate?: SortOrder
    status?: SortOrder
    metadataLocked?: SortOrder
    published?: SortOrder
    albumName?: SortOrder
    mainCategory?: SortOrder
    subCategory?: SortOrder
    distributionLink?: SortOrder
    statusVietnamese?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    upc?: SortOrder
    type?: SortOrder
    coverImagePath?: SortOrder
    releaseDate?: SortOrder
    status?: SortOrder
    metadataLocked?: SortOrder
    published?: SortOrder
    albumName?: SortOrder
    mainCategory?: SortOrder
    subCategory?: SortOrder
    distributionLink?: SortOrder
    statusVietnamese?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumReleaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReleaseType | EnumReleaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReleaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReleaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReleaseTypeFilter<$PrismaModel>
    _max?: NestedEnumReleaseTypeFilter<$PrismaModel>
  }

  export type EnumSubmissionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionStatus | EnumSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubmissionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubmissionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubmissionStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SubmissionScalarRelationFilter = {
    is?: SubmissionWhereInput
    isNot?: SubmissionWhereInput
  }

  export type TrackCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    filePath?: SortOrder
    duration?: SortOrder
    isrc?: SortOrder
    fileName?: SortOrder
    artistFullName?: SortOrder
    fileSize?: SortOrder
    format?: SortOrder
    bitrate?: SortOrder
    sampleRate?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrackAvgOrderByAggregateInput = {
    duration?: SortOrder
    fileSize?: SortOrder
  }

  export type TrackMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    filePath?: SortOrder
    duration?: SortOrder
    isrc?: SortOrder
    fileName?: SortOrder
    artistFullName?: SortOrder
    fileSize?: SortOrder
    format?: SortOrder
    bitrate?: SortOrder
    sampleRate?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrackMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    filePath?: SortOrder
    duration?: SortOrder
    isrc?: SortOrder
    fileName?: SortOrder
    artistFullName?: SortOrder
    fileSize?: SortOrder
    format?: SortOrder
    bitrate?: SortOrder
    sampleRate?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TrackSumOrderByAggregateInput = {
    duration?: SortOrder
    fileSize?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SubmissionNullableScalarRelationFilter = {
    is?: SubmissionWhereInput | null
    isNot?: SubmissionWhereInput | null
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    youtubeVideoId?: SortOrder
    youtubeUrl?: SortOrder
    thumbnailUrl?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    category?: SortOrder
    language?: SortOrder
    contentIdEnabled?: SortOrder
    contentIdStatus?: SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    youtubeVideoId?: SortOrder
    youtubeUrl?: SortOrder
    thumbnailUrl?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    category?: SortOrder
    language?: SortOrder
    contentIdEnabled?: SortOrder
    contentIdStatus?: SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    youtubeVideoId?: SortOrder
    youtubeUrl?: SortOrder
    thumbnailUrl?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    category?: SortOrder
    language?: SortOrder
    contentIdEnabled?: SortOrder
    contentIdStatus?: SortOrder
    userId?: SortOrder
    labelId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VideoSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type FileFolderNullableScalarRelationFilter = {
    is?: FileFolderWhereInput | null
    isNot?: FileFolderWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FileFolderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileFolderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileFolderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SubmissionContributorCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionContributorAvgOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type SubmissionContributorMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionContributorMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionContributorSumOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumContributorRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributorRole | EnumContributorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumContributorRoleFilter<$PrismaModel> | $Enums.ContributorRole
  }

  export type TrackScalarRelationFilter = {
    is?: TrackWhereInput
    isNot?: TrackWhereInput
  }

  export type TrackContributorCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    createdAt?: SortOrder
  }

  export type TrackContributorAvgOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type TrackContributorMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    createdAt?: SortOrder
  }

  export type TrackContributorMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    trackId?: SortOrder
    createdAt?: SortOrder
  }

  export type TrackContributorSumOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type EnumContributorRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributorRole | EnumContributorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumContributorRoleWithAggregatesFilter<$PrismaModel> | $Enums.ContributorRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContributorRoleFilter<$PrismaModel>
    _max?: NestedEnumContributorRoleFilter<$PrismaModel>
  }

  export type VideoScalarRelationFilter = {
    is?: VideoWhereInput
    isNot?: VideoWhereInput
  }

  export type VideoContributorCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    createdAt?: SortOrder
  }

  export type VideoContributorAvgOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type VideoContributorMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    createdAt?: SortOrder
  }

  export type VideoContributorMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    percentage?: SortOrder
    userId?: SortOrder
    videoId?: SortOrder
    createdAt?: SortOrder
  }

  export type VideoContributorSumOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type EnumApprovalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeFilter<$PrismaModel> | $Enums.ApprovalType
  }

  export type SubmissionApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    reason?: SortOrder
    submissionId?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    reason?: SortOrder
    submissionId?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    isApproved?: SortOrder
    reason?: SortOrder
    submissionId?: SortOrder
    approverId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumApprovalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalTypeFilter<$PrismaModel>
    _max?: NestedEnumApprovalTypeFilter<$PrismaModel>
  }

  export type SubmissionCommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type SubmissionCommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    submissionId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumFileCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryFilter<$PrismaModel> | $Enums.FileCategory
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    folderId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    folderId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    folderId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumFileCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryWithAggregatesFilter<$PrismaModel> | $Enums.FileCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileCategoryFilter<$PrismaModel>
    _max?: NestedEnumFileCategoryFilter<$PrismaModel>
  }

  export type nhatKyCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    details?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type nhatKyMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type nhatKyMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
  }

  export type DistributionPlatformCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    apiEndpoint?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributionPlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    apiEndpoint?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DistributionPlatformMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logoUrl?: SortOrder
    apiEndpoint?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCreaterolesInput = {
    set: $Enums.UserRole[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type SubmissionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type LabelCreateNestedOneWithoutMembersInput = {
    create?: XOR<LabelCreateWithoutMembersInput, LabelUncheckedCreateWithoutMembersInput>
    connectOrCreate?: LabelCreateOrConnectWithoutMembersInput
    connect?: LabelWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type nhatKyCreateNestedManyWithoutUserInput = {
    create?: XOR<nhatKyCreateWithoutUserInput, nhatKyUncheckedCreateWithoutUserInput> | nhatKyCreateWithoutUserInput[] | nhatKyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: nhatKyCreateOrConnectWithoutUserInput | nhatKyCreateOrConnectWithoutUserInput[]
    createMany?: nhatKyCreateManyUserInputEnvelope
    connect?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
  }

  export type VideoCreateNestedManyWithoutUserInput = {
    create?: XOR<VideoCreateWithoutUserInput, VideoUncheckedCreateWithoutUserInput> | VideoCreateWithoutUserInput[] | VideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutUserInput | VideoCreateOrConnectWithoutUserInput[]
    createMany?: VideoCreateManyUserInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type FileFolderCreateNestedManyWithoutOwnerInput = {
    create?: XOR<FileFolderCreateWithoutOwnerInput, FileFolderUncheckedCreateWithoutOwnerInput> | FileFolderCreateWithoutOwnerInput[] | FileFolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutOwnerInput | FileFolderCreateOrConnectWithoutOwnerInput[]
    createMany?: FileFolderCreateManyOwnerInputEnvelope
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
  }

  export type SubmissionContributorCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionContributorCreateWithoutUserInput, SubmissionContributorUncheckedCreateWithoutUserInput> | SubmissionContributorCreateWithoutUserInput[] | SubmissionContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutUserInput | SubmissionContributorCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionContributorCreateManyUserInputEnvelope
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
  }

  export type TrackContributorCreateNestedManyWithoutUserInput = {
    create?: XOR<TrackContributorCreateWithoutUserInput, TrackContributorUncheckedCreateWithoutUserInput> | TrackContributorCreateWithoutUserInput[] | TrackContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutUserInput | TrackContributorCreateOrConnectWithoutUserInput[]
    createMany?: TrackContributorCreateManyUserInputEnvelope
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
  }

  export type VideoContributorCreateNestedManyWithoutUserInput = {
    create?: XOR<VideoContributorCreateWithoutUserInput, VideoContributorUncheckedCreateWithoutUserInput> | VideoContributorCreateWithoutUserInput[] | VideoContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutUserInput | VideoContributorCreateOrConnectWithoutUserInput[]
    createMany?: VideoContributorCreateManyUserInputEnvelope
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
  }

  export type SubmissionCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCommentCreateWithoutUserInput, SubmissionCommentUncheckedCreateWithoutUserInput> | SubmissionCommentCreateWithoutUserInput[] | SubmissionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutUserInput | SubmissionCommentCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCommentCreateManyUserInputEnvelope
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
  }

  export type SubmissionApprovalCreateNestedManyWithoutApproverInput = {
    create?: XOR<SubmissionApprovalCreateWithoutApproverInput, SubmissionApprovalUncheckedCreateWithoutApproverInput> | SubmissionApprovalCreateWithoutApproverInput[] | SubmissionApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutApproverInput | SubmissionApprovalCreateOrConnectWithoutApproverInput[]
    createMany?: SubmissionApprovalCreateManyApproverInputEnvelope
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type SubmissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type nhatKyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<nhatKyCreateWithoutUserInput, nhatKyUncheckedCreateWithoutUserInput> | nhatKyCreateWithoutUserInput[] | nhatKyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: nhatKyCreateOrConnectWithoutUserInput | nhatKyCreateOrConnectWithoutUserInput[]
    createMany?: nhatKyCreateManyUserInputEnvelope
    connect?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
  }

  export type VideoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VideoCreateWithoutUserInput, VideoUncheckedCreateWithoutUserInput> | VideoCreateWithoutUserInput[] | VideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutUserInput | VideoCreateOrConnectWithoutUserInput[]
    createMany?: VideoCreateManyUserInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type FileFolderUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<FileFolderCreateWithoutOwnerInput, FileFolderUncheckedCreateWithoutOwnerInput> | FileFolderCreateWithoutOwnerInput[] | FileFolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutOwnerInput | FileFolderCreateOrConnectWithoutOwnerInput[]
    createMany?: FileFolderCreateManyOwnerInputEnvelope
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
  }

  export type SubmissionContributorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionContributorCreateWithoutUserInput, SubmissionContributorUncheckedCreateWithoutUserInput> | SubmissionContributorCreateWithoutUserInput[] | SubmissionContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutUserInput | SubmissionContributorCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionContributorCreateManyUserInputEnvelope
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
  }

  export type TrackContributorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TrackContributorCreateWithoutUserInput, TrackContributorUncheckedCreateWithoutUserInput> | TrackContributorCreateWithoutUserInput[] | TrackContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutUserInput | TrackContributorCreateOrConnectWithoutUserInput[]
    createMany?: TrackContributorCreateManyUserInputEnvelope
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
  }

  export type VideoContributorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<VideoContributorCreateWithoutUserInput, VideoContributorUncheckedCreateWithoutUserInput> | VideoContributorCreateWithoutUserInput[] | VideoContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutUserInput | VideoContributorCreateOrConnectWithoutUserInput[]
    createMany?: VideoContributorCreateManyUserInputEnvelope
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
  }

  export type SubmissionCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCommentCreateWithoutUserInput, SubmissionCommentUncheckedCreateWithoutUserInput> | SubmissionCommentCreateWithoutUserInput[] | SubmissionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutUserInput | SubmissionCommentCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCommentCreateManyUserInputEnvelope
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
  }

  export type SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput = {
    create?: XOR<SubmissionApprovalCreateWithoutApproverInput, SubmissionApprovalUncheckedCreateWithoutApproverInput> | SubmissionApprovalCreateWithoutApproverInput[] | SubmissionApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutApproverInput | SubmissionApprovalCreateOrConnectWithoutApproverInput[]
    createMany?: SubmissionApprovalCreateManyApproverInputEnvelope
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdaterolesInput = {
    set?: $Enums.UserRole[]
    push?: $Enums.UserRole | $Enums.UserRole[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type LabelUpdateOneWithoutMembersNestedInput = {
    create?: XOR<LabelCreateWithoutMembersInput, LabelUncheckedCreateWithoutMembersInput>
    connectOrCreate?: LabelCreateOrConnectWithoutMembersInput
    upsert?: LabelUpsertWithoutMembersInput
    disconnect?: LabelWhereInput | boolean
    delete?: LabelWhereInput | boolean
    connect?: LabelWhereUniqueInput
    update?: XOR<XOR<LabelUpdateToOneWithWhereWithoutMembersInput, LabelUpdateWithoutMembersInput>, LabelUncheckedUpdateWithoutMembersInput>
  }

  export type FileUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type nhatKyUpdateManyWithoutUserNestedInput = {
    create?: XOR<nhatKyCreateWithoutUserInput, nhatKyUncheckedCreateWithoutUserInput> | nhatKyCreateWithoutUserInput[] | nhatKyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: nhatKyCreateOrConnectWithoutUserInput | nhatKyCreateOrConnectWithoutUserInput[]
    upsert?: nhatKyUpsertWithWhereUniqueWithoutUserInput | nhatKyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: nhatKyCreateManyUserInputEnvelope
    set?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    disconnect?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    delete?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    connect?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    update?: nhatKyUpdateWithWhereUniqueWithoutUserInput | nhatKyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: nhatKyUpdateManyWithWhereWithoutUserInput | nhatKyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: nhatKyScalarWhereInput | nhatKyScalarWhereInput[]
  }

  export type VideoUpdateManyWithoutUserNestedInput = {
    create?: XOR<VideoCreateWithoutUserInput, VideoUncheckedCreateWithoutUserInput> | VideoCreateWithoutUserInput[] | VideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutUserInput | VideoCreateOrConnectWithoutUserInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutUserInput | VideoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VideoCreateManyUserInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutUserInput | VideoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutUserInput | VideoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type FileFolderUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<FileFolderCreateWithoutOwnerInput, FileFolderUncheckedCreateWithoutOwnerInput> | FileFolderCreateWithoutOwnerInput[] | FileFolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutOwnerInput | FileFolderCreateOrConnectWithoutOwnerInput[]
    upsert?: FileFolderUpsertWithWhereUniqueWithoutOwnerInput | FileFolderUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: FileFolderCreateManyOwnerInputEnvelope
    set?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    disconnect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    delete?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    update?: FileFolderUpdateWithWhereUniqueWithoutOwnerInput | FileFolderUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: FileFolderUpdateManyWithWhereWithoutOwnerInput | FileFolderUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: FileFolderScalarWhereInput | FileFolderScalarWhereInput[]
  }

  export type SubmissionContributorUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionContributorCreateWithoutUserInput, SubmissionContributorUncheckedCreateWithoutUserInput> | SubmissionContributorCreateWithoutUserInput[] | SubmissionContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutUserInput | SubmissionContributorCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionContributorUpsertWithWhereUniqueWithoutUserInput | SubmissionContributorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionContributorCreateManyUserInputEnvelope
    set?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    disconnect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    delete?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    update?: SubmissionContributorUpdateWithWhereUniqueWithoutUserInput | SubmissionContributorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionContributorUpdateManyWithWhereWithoutUserInput | SubmissionContributorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionContributorScalarWhereInput | SubmissionContributorScalarWhereInput[]
  }

  export type TrackContributorUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrackContributorCreateWithoutUserInput, TrackContributorUncheckedCreateWithoutUserInput> | TrackContributorCreateWithoutUserInput[] | TrackContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutUserInput | TrackContributorCreateOrConnectWithoutUserInput[]
    upsert?: TrackContributorUpsertWithWhereUniqueWithoutUserInput | TrackContributorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrackContributorCreateManyUserInputEnvelope
    set?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    disconnect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    delete?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    update?: TrackContributorUpdateWithWhereUniqueWithoutUserInput | TrackContributorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrackContributorUpdateManyWithWhereWithoutUserInput | TrackContributorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrackContributorScalarWhereInput | TrackContributorScalarWhereInput[]
  }

  export type VideoContributorUpdateManyWithoutUserNestedInput = {
    create?: XOR<VideoContributorCreateWithoutUserInput, VideoContributorUncheckedCreateWithoutUserInput> | VideoContributorCreateWithoutUserInput[] | VideoContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutUserInput | VideoContributorCreateOrConnectWithoutUserInput[]
    upsert?: VideoContributorUpsertWithWhereUniqueWithoutUserInput | VideoContributorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VideoContributorCreateManyUserInputEnvelope
    set?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    disconnect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    delete?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    update?: VideoContributorUpdateWithWhereUniqueWithoutUserInput | VideoContributorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VideoContributorUpdateManyWithWhereWithoutUserInput | VideoContributorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VideoContributorScalarWhereInput | VideoContributorScalarWhereInput[]
  }

  export type SubmissionCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCommentCreateWithoutUserInput, SubmissionCommentUncheckedCreateWithoutUserInput> | SubmissionCommentCreateWithoutUserInput[] | SubmissionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutUserInput | SubmissionCommentCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionCommentUpsertWithWhereUniqueWithoutUserInput | SubmissionCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCommentCreateManyUserInputEnvelope
    set?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    disconnect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    delete?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    update?: SubmissionCommentUpdateWithWhereUniqueWithoutUserInput | SubmissionCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionCommentUpdateManyWithWhereWithoutUserInput | SubmissionCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionCommentScalarWhereInput | SubmissionCommentScalarWhereInput[]
  }

  export type SubmissionApprovalUpdateManyWithoutApproverNestedInput = {
    create?: XOR<SubmissionApprovalCreateWithoutApproverInput, SubmissionApprovalUncheckedCreateWithoutApproverInput> | SubmissionApprovalCreateWithoutApproverInput[] | SubmissionApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutApproverInput | SubmissionApprovalCreateOrConnectWithoutApproverInput[]
    upsert?: SubmissionApprovalUpsertWithWhereUniqueWithoutApproverInput | SubmissionApprovalUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: SubmissionApprovalCreateManyApproverInputEnvelope
    set?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    disconnect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    delete?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    update?: SubmissionApprovalUpdateWithWhereUniqueWithoutApproverInput | SubmissionApprovalUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: SubmissionApprovalUpdateManyWithWhereWithoutApproverInput | SubmissionApprovalUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: SubmissionApprovalScalarWhereInput | SubmissionApprovalScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type nhatKyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<nhatKyCreateWithoutUserInput, nhatKyUncheckedCreateWithoutUserInput> | nhatKyCreateWithoutUserInput[] | nhatKyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: nhatKyCreateOrConnectWithoutUserInput | nhatKyCreateOrConnectWithoutUserInput[]
    upsert?: nhatKyUpsertWithWhereUniqueWithoutUserInput | nhatKyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: nhatKyCreateManyUserInputEnvelope
    set?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    disconnect?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    delete?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    connect?: nhatKyWhereUniqueInput | nhatKyWhereUniqueInput[]
    update?: nhatKyUpdateWithWhereUniqueWithoutUserInput | nhatKyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: nhatKyUpdateManyWithWhereWithoutUserInput | nhatKyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: nhatKyScalarWhereInput | nhatKyScalarWhereInput[]
  }

  export type VideoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VideoCreateWithoutUserInput, VideoUncheckedCreateWithoutUserInput> | VideoCreateWithoutUserInput[] | VideoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutUserInput | VideoCreateOrConnectWithoutUserInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutUserInput | VideoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VideoCreateManyUserInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutUserInput | VideoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutUserInput | VideoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type FileFolderUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<FileFolderCreateWithoutOwnerInput, FileFolderUncheckedCreateWithoutOwnerInput> | FileFolderCreateWithoutOwnerInput[] | FileFolderUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutOwnerInput | FileFolderCreateOrConnectWithoutOwnerInput[]
    upsert?: FileFolderUpsertWithWhereUniqueWithoutOwnerInput | FileFolderUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: FileFolderCreateManyOwnerInputEnvelope
    set?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    disconnect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    delete?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    update?: FileFolderUpdateWithWhereUniqueWithoutOwnerInput | FileFolderUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: FileFolderUpdateManyWithWhereWithoutOwnerInput | FileFolderUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: FileFolderScalarWhereInput | FileFolderScalarWhereInput[]
  }

  export type SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionContributorCreateWithoutUserInput, SubmissionContributorUncheckedCreateWithoutUserInput> | SubmissionContributorCreateWithoutUserInput[] | SubmissionContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutUserInput | SubmissionContributorCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionContributorUpsertWithWhereUniqueWithoutUserInput | SubmissionContributorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionContributorCreateManyUserInputEnvelope
    set?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    disconnect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    delete?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    update?: SubmissionContributorUpdateWithWhereUniqueWithoutUserInput | SubmissionContributorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionContributorUpdateManyWithWhereWithoutUserInput | SubmissionContributorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionContributorScalarWhereInput | SubmissionContributorScalarWhereInput[]
  }

  export type TrackContributorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TrackContributorCreateWithoutUserInput, TrackContributorUncheckedCreateWithoutUserInput> | TrackContributorCreateWithoutUserInput[] | TrackContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutUserInput | TrackContributorCreateOrConnectWithoutUserInput[]
    upsert?: TrackContributorUpsertWithWhereUniqueWithoutUserInput | TrackContributorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TrackContributorCreateManyUserInputEnvelope
    set?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    disconnect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    delete?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    update?: TrackContributorUpdateWithWhereUniqueWithoutUserInput | TrackContributorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TrackContributorUpdateManyWithWhereWithoutUserInput | TrackContributorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TrackContributorScalarWhereInput | TrackContributorScalarWhereInput[]
  }

  export type VideoContributorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<VideoContributorCreateWithoutUserInput, VideoContributorUncheckedCreateWithoutUserInput> | VideoContributorCreateWithoutUserInput[] | VideoContributorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutUserInput | VideoContributorCreateOrConnectWithoutUserInput[]
    upsert?: VideoContributorUpsertWithWhereUniqueWithoutUserInput | VideoContributorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: VideoContributorCreateManyUserInputEnvelope
    set?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    disconnect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    delete?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    update?: VideoContributorUpdateWithWhereUniqueWithoutUserInput | VideoContributorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: VideoContributorUpdateManyWithWhereWithoutUserInput | VideoContributorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: VideoContributorScalarWhereInput | VideoContributorScalarWhereInput[]
  }

  export type SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCommentCreateWithoutUserInput, SubmissionCommentUncheckedCreateWithoutUserInput> | SubmissionCommentCreateWithoutUserInput[] | SubmissionCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutUserInput | SubmissionCommentCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionCommentUpsertWithWhereUniqueWithoutUserInput | SubmissionCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCommentCreateManyUserInputEnvelope
    set?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    disconnect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    delete?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    update?: SubmissionCommentUpdateWithWhereUniqueWithoutUserInput | SubmissionCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionCommentUpdateManyWithWhereWithoutUserInput | SubmissionCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionCommentScalarWhereInput | SubmissionCommentScalarWhereInput[]
  }

  export type SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput = {
    create?: XOR<SubmissionApprovalCreateWithoutApproverInput, SubmissionApprovalUncheckedCreateWithoutApproverInput> | SubmissionApprovalCreateWithoutApproverInput[] | SubmissionApprovalUncheckedCreateWithoutApproverInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutApproverInput | SubmissionApprovalCreateOrConnectWithoutApproverInput[]
    upsert?: SubmissionApprovalUpsertWithWhereUniqueWithoutApproverInput | SubmissionApprovalUpsertWithWhereUniqueWithoutApproverInput[]
    createMany?: SubmissionApprovalCreateManyApproverInputEnvelope
    set?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    disconnect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    delete?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    update?: SubmissionApprovalUpdateWithWhereUniqueWithoutApproverInput | SubmissionApprovalUpdateWithWhereUniqueWithoutApproverInput[]
    updateMany?: SubmissionApprovalUpdateManyWithWhereWithoutApproverInput | SubmissionApprovalUpdateManyWithWhereWithoutApproverInput[]
    deleteMany?: SubmissionApprovalScalarWhereInput | SubmissionApprovalScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedManyWithoutLabelInput = {
    create?: XOR<UserCreateWithoutLabelInput, UserUncheckedCreateWithoutLabelInput> | UserCreateWithoutLabelInput[] | UserUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLabelInput | UserCreateOrConnectWithoutLabelInput[]
    createMany?: UserCreateManyLabelInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutLabelInput = {
    create?: XOR<SubmissionCreateWithoutLabelInput, SubmissionUncheckedCreateWithoutLabelInput> | SubmissionCreateWithoutLabelInput[] | SubmissionUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabelInput | SubmissionCreateOrConnectWithoutLabelInput[]
    createMany?: SubmissionCreateManyLabelInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type VideoCreateNestedManyWithoutLabelInput = {
    create?: XOR<VideoCreateWithoutLabelInput, VideoUncheckedCreateWithoutLabelInput> | VideoCreateWithoutLabelInput[] | VideoUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutLabelInput | VideoCreateOrConnectWithoutLabelInput[]
    createMany?: VideoCreateManyLabelInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutLabelInput = {
    create?: XOR<UserCreateWithoutLabelInput, UserUncheckedCreateWithoutLabelInput> | UserCreateWithoutLabelInput[] | UserUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLabelInput | UserCreateOrConnectWithoutLabelInput[]
    createMany?: UserCreateManyLabelInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutLabelInput = {
    create?: XOR<SubmissionCreateWithoutLabelInput, SubmissionUncheckedCreateWithoutLabelInput> | SubmissionCreateWithoutLabelInput[] | SubmissionUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabelInput | SubmissionCreateOrConnectWithoutLabelInput[]
    createMany?: SubmissionCreateManyLabelInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type VideoUncheckedCreateNestedManyWithoutLabelInput = {
    create?: XOR<VideoCreateWithoutLabelInput, VideoUncheckedCreateWithoutLabelInput> | VideoCreateWithoutLabelInput[] | VideoUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutLabelInput | VideoCreateOrConnectWithoutLabelInput[]
    createMany?: VideoCreateManyLabelInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutLabelNestedInput = {
    create?: XOR<UserCreateWithoutLabelInput, UserUncheckedCreateWithoutLabelInput> | UserCreateWithoutLabelInput[] | UserUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLabelInput | UserCreateOrConnectWithoutLabelInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLabelInput | UserUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: UserCreateManyLabelInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLabelInput | UserUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLabelInput | UserUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutLabelNestedInput = {
    create?: XOR<SubmissionCreateWithoutLabelInput, SubmissionUncheckedCreateWithoutLabelInput> | SubmissionCreateWithoutLabelInput[] | SubmissionUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabelInput | SubmissionCreateOrConnectWithoutLabelInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutLabelInput | SubmissionUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: SubmissionCreateManyLabelInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutLabelInput | SubmissionUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutLabelInput | SubmissionUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type VideoUpdateManyWithoutLabelNestedInput = {
    create?: XOR<VideoCreateWithoutLabelInput, VideoUncheckedCreateWithoutLabelInput> | VideoCreateWithoutLabelInput[] | VideoUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutLabelInput | VideoCreateOrConnectWithoutLabelInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutLabelInput | VideoUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: VideoCreateManyLabelInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutLabelInput | VideoUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutLabelInput | VideoUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutLabelNestedInput = {
    create?: XOR<UserCreateWithoutLabelInput, UserUncheckedCreateWithoutLabelInput> | UserCreateWithoutLabelInput[] | UserUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: UserCreateOrConnectWithoutLabelInput | UserCreateOrConnectWithoutLabelInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutLabelInput | UserUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: UserCreateManyLabelInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutLabelInput | UserUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: UserUpdateManyWithWhereWithoutLabelInput | UserUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutLabelNestedInput = {
    create?: XOR<SubmissionCreateWithoutLabelInput, SubmissionUncheckedCreateWithoutLabelInput> | SubmissionCreateWithoutLabelInput[] | SubmissionUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabelInput | SubmissionCreateOrConnectWithoutLabelInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutLabelInput | SubmissionUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: SubmissionCreateManyLabelInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutLabelInput | SubmissionUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutLabelInput | SubmissionUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type VideoUncheckedUpdateManyWithoutLabelNestedInput = {
    create?: XOR<VideoCreateWithoutLabelInput, VideoUncheckedCreateWithoutLabelInput> | VideoCreateWithoutLabelInput[] | VideoUncheckedCreateWithoutLabelInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutLabelInput | VideoCreateOrConnectWithoutLabelInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutLabelInput | VideoUpsertWithWhereUniqueWithoutLabelInput[]
    createMany?: VideoCreateManyLabelInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutLabelInput | VideoUpdateWithWhereUniqueWithoutLabelInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutLabelInput | VideoUpdateManyWithWhereWithoutLabelInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type LabelCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<LabelCreateWithoutSubmissionsInput, LabelUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: LabelCreateOrConnectWithoutSubmissionsInput
    connect?: LabelWhereUniqueInput
  }

  export type TrackCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<TrackCreateWithoutSubmissionInput, TrackUncheckedCreateWithoutSubmissionInput> | TrackCreateWithoutSubmissionInput[] | TrackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutSubmissionInput | TrackCreateOrConnectWithoutSubmissionInput[]
    createMany?: TrackCreateManySubmissionInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type VideoCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<VideoCreateWithoutSubmissionInput, VideoUncheckedCreateWithoutSubmissionInput> | VideoCreateWithoutSubmissionInput[] | VideoUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutSubmissionInput | VideoCreateOrConnectWithoutSubmissionInput[]
    createMany?: VideoCreateManySubmissionInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type SubmissionContributorCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<SubmissionContributorCreateWithoutSubmissionInput, SubmissionContributorUncheckedCreateWithoutSubmissionInput> | SubmissionContributorCreateWithoutSubmissionInput[] | SubmissionContributorUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutSubmissionInput | SubmissionContributorCreateOrConnectWithoutSubmissionInput[]
    createMany?: SubmissionContributorCreateManySubmissionInputEnvelope
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
  }

  export type SubmissionCommentCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<SubmissionCommentCreateWithoutSubmissionInput, SubmissionCommentUncheckedCreateWithoutSubmissionInput> | SubmissionCommentCreateWithoutSubmissionInput[] | SubmissionCommentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutSubmissionInput | SubmissionCommentCreateOrConnectWithoutSubmissionInput[]
    createMany?: SubmissionCommentCreateManySubmissionInputEnvelope
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
  }

  export type SubmissionApprovalCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<SubmissionApprovalCreateWithoutSubmissionInput, SubmissionApprovalUncheckedCreateWithoutSubmissionInput> | SubmissionApprovalCreateWithoutSubmissionInput[] | SubmissionApprovalUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutSubmissionInput | SubmissionApprovalCreateOrConnectWithoutSubmissionInput[]
    createMany?: SubmissionApprovalCreateManySubmissionInputEnvelope
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
  }

  export type TrackUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<TrackCreateWithoutSubmissionInput, TrackUncheckedCreateWithoutSubmissionInput> | TrackCreateWithoutSubmissionInput[] | TrackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutSubmissionInput | TrackCreateOrConnectWithoutSubmissionInput[]
    createMany?: TrackCreateManySubmissionInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type VideoUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<VideoCreateWithoutSubmissionInput, VideoUncheckedCreateWithoutSubmissionInput> | VideoCreateWithoutSubmissionInput[] | VideoUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutSubmissionInput | VideoCreateOrConnectWithoutSubmissionInput[]
    createMany?: VideoCreateManySubmissionInputEnvelope
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
  }

  export type SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<SubmissionContributorCreateWithoutSubmissionInput, SubmissionContributorUncheckedCreateWithoutSubmissionInput> | SubmissionContributorCreateWithoutSubmissionInput[] | SubmissionContributorUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutSubmissionInput | SubmissionContributorCreateOrConnectWithoutSubmissionInput[]
    createMany?: SubmissionContributorCreateManySubmissionInputEnvelope
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
  }

  export type SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<SubmissionCommentCreateWithoutSubmissionInput, SubmissionCommentUncheckedCreateWithoutSubmissionInput> | SubmissionCommentCreateWithoutSubmissionInput[] | SubmissionCommentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutSubmissionInput | SubmissionCommentCreateOrConnectWithoutSubmissionInput[]
    createMany?: SubmissionCommentCreateManySubmissionInputEnvelope
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
  }

  export type SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<SubmissionApprovalCreateWithoutSubmissionInput, SubmissionApprovalUncheckedCreateWithoutSubmissionInput> | SubmissionApprovalCreateWithoutSubmissionInput[] | SubmissionApprovalUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutSubmissionInput | SubmissionApprovalCreateOrConnectWithoutSubmissionInput[]
    createMany?: SubmissionApprovalCreateManySubmissionInputEnvelope
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
  }

  export type EnumReleaseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ReleaseType
  }

  export type EnumSubmissionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubmissionStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    upsert?: UserUpsertWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionsInput, UserUpdateWithoutSubmissionsInput>, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type LabelUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<LabelCreateWithoutSubmissionsInput, LabelUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: LabelCreateOrConnectWithoutSubmissionsInput
    upsert?: LabelUpsertWithoutSubmissionsInput
    connect?: LabelWhereUniqueInput
    update?: XOR<XOR<LabelUpdateToOneWithWhereWithoutSubmissionsInput, LabelUpdateWithoutSubmissionsInput>, LabelUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TrackUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<TrackCreateWithoutSubmissionInput, TrackUncheckedCreateWithoutSubmissionInput> | TrackCreateWithoutSubmissionInput[] | TrackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutSubmissionInput | TrackCreateOrConnectWithoutSubmissionInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutSubmissionInput | TrackUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: TrackCreateManySubmissionInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutSubmissionInput | TrackUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutSubmissionInput | TrackUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type VideoUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<VideoCreateWithoutSubmissionInput, VideoUncheckedCreateWithoutSubmissionInput> | VideoCreateWithoutSubmissionInput[] | VideoUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutSubmissionInput | VideoCreateOrConnectWithoutSubmissionInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutSubmissionInput | VideoUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: VideoCreateManySubmissionInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutSubmissionInput | VideoUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutSubmissionInput | VideoUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type SubmissionContributorUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<SubmissionContributorCreateWithoutSubmissionInput, SubmissionContributorUncheckedCreateWithoutSubmissionInput> | SubmissionContributorCreateWithoutSubmissionInput[] | SubmissionContributorUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutSubmissionInput | SubmissionContributorCreateOrConnectWithoutSubmissionInput[]
    upsert?: SubmissionContributorUpsertWithWhereUniqueWithoutSubmissionInput | SubmissionContributorUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: SubmissionContributorCreateManySubmissionInputEnvelope
    set?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    disconnect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    delete?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    update?: SubmissionContributorUpdateWithWhereUniqueWithoutSubmissionInput | SubmissionContributorUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: SubmissionContributorUpdateManyWithWhereWithoutSubmissionInput | SubmissionContributorUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: SubmissionContributorScalarWhereInput | SubmissionContributorScalarWhereInput[]
  }

  export type SubmissionCommentUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<SubmissionCommentCreateWithoutSubmissionInput, SubmissionCommentUncheckedCreateWithoutSubmissionInput> | SubmissionCommentCreateWithoutSubmissionInput[] | SubmissionCommentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutSubmissionInput | SubmissionCommentCreateOrConnectWithoutSubmissionInput[]
    upsert?: SubmissionCommentUpsertWithWhereUniqueWithoutSubmissionInput | SubmissionCommentUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: SubmissionCommentCreateManySubmissionInputEnvelope
    set?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    disconnect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    delete?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    update?: SubmissionCommentUpdateWithWhereUniqueWithoutSubmissionInput | SubmissionCommentUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: SubmissionCommentUpdateManyWithWhereWithoutSubmissionInput | SubmissionCommentUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: SubmissionCommentScalarWhereInput | SubmissionCommentScalarWhereInput[]
  }

  export type SubmissionApprovalUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<SubmissionApprovalCreateWithoutSubmissionInput, SubmissionApprovalUncheckedCreateWithoutSubmissionInput> | SubmissionApprovalCreateWithoutSubmissionInput[] | SubmissionApprovalUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutSubmissionInput | SubmissionApprovalCreateOrConnectWithoutSubmissionInput[]
    upsert?: SubmissionApprovalUpsertWithWhereUniqueWithoutSubmissionInput | SubmissionApprovalUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: SubmissionApprovalCreateManySubmissionInputEnvelope
    set?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    disconnect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    delete?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    update?: SubmissionApprovalUpdateWithWhereUniqueWithoutSubmissionInput | SubmissionApprovalUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: SubmissionApprovalUpdateManyWithWhereWithoutSubmissionInput | SubmissionApprovalUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: SubmissionApprovalScalarWhereInput | SubmissionApprovalScalarWhereInput[]
  }

  export type TrackUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<TrackCreateWithoutSubmissionInput, TrackUncheckedCreateWithoutSubmissionInput> | TrackCreateWithoutSubmissionInput[] | TrackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutSubmissionInput | TrackCreateOrConnectWithoutSubmissionInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutSubmissionInput | TrackUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: TrackCreateManySubmissionInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutSubmissionInput | TrackUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutSubmissionInput | TrackUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type VideoUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<VideoCreateWithoutSubmissionInput, VideoUncheckedCreateWithoutSubmissionInput> | VideoCreateWithoutSubmissionInput[] | VideoUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: VideoCreateOrConnectWithoutSubmissionInput | VideoCreateOrConnectWithoutSubmissionInput[]
    upsert?: VideoUpsertWithWhereUniqueWithoutSubmissionInput | VideoUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: VideoCreateManySubmissionInputEnvelope
    set?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    disconnect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    delete?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    connect?: VideoWhereUniqueInput | VideoWhereUniqueInput[]
    update?: VideoUpdateWithWhereUniqueWithoutSubmissionInput | VideoUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: VideoUpdateManyWithWhereWithoutSubmissionInput | VideoUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: VideoScalarWhereInput | VideoScalarWhereInput[]
  }

  export type SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<SubmissionContributorCreateWithoutSubmissionInput, SubmissionContributorUncheckedCreateWithoutSubmissionInput> | SubmissionContributorCreateWithoutSubmissionInput[] | SubmissionContributorUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionContributorCreateOrConnectWithoutSubmissionInput | SubmissionContributorCreateOrConnectWithoutSubmissionInput[]
    upsert?: SubmissionContributorUpsertWithWhereUniqueWithoutSubmissionInput | SubmissionContributorUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: SubmissionContributorCreateManySubmissionInputEnvelope
    set?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    disconnect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    delete?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    connect?: SubmissionContributorWhereUniqueInput | SubmissionContributorWhereUniqueInput[]
    update?: SubmissionContributorUpdateWithWhereUniqueWithoutSubmissionInput | SubmissionContributorUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: SubmissionContributorUpdateManyWithWhereWithoutSubmissionInput | SubmissionContributorUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: SubmissionContributorScalarWhereInput | SubmissionContributorScalarWhereInput[]
  }

  export type SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<SubmissionCommentCreateWithoutSubmissionInput, SubmissionCommentUncheckedCreateWithoutSubmissionInput> | SubmissionCommentCreateWithoutSubmissionInput[] | SubmissionCommentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionCommentCreateOrConnectWithoutSubmissionInput | SubmissionCommentCreateOrConnectWithoutSubmissionInput[]
    upsert?: SubmissionCommentUpsertWithWhereUniqueWithoutSubmissionInput | SubmissionCommentUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: SubmissionCommentCreateManySubmissionInputEnvelope
    set?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    disconnect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    delete?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    connect?: SubmissionCommentWhereUniqueInput | SubmissionCommentWhereUniqueInput[]
    update?: SubmissionCommentUpdateWithWhereUniqueWithoutSubmissionInput | SubmissionCommentUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: SubmissionCommentUpdateManyWithWhereWithoutSubmissionInput | SubmissionCommentUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: SubmissionCommentScalarWhereInput | SubmissionCommentScalarWhereInput[]
  }

  export type SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<SubmissionApprovalCreateWithoutSubmissionInput, SubmissionApprovalUncheckedCreateWithoutSubmissionInput> | SubmissionApprovalCreateWithoutSubmissionInput[] | SubmissionApprovalUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: SubmissionApprovalCreateOrConnectWithoutSubmissionInput | SubmissionApprovalCreateOrConnectWithoutSubmissionInput[]
    upsert?: SubmissionApprovalUpsertWithWhereUniqueWithoutSubmissionInput | SubmissionApprovalUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: SubmissionApprovalCreateManySubmissionInputEnvelope
    set?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    disconnect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    delete?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    connect?: SubmissionApprovalWhereUniqueInput | SubmissionApprovalWhereUniqueInput[]
    update?: SubmissionApprovalUpdateWithWhereUniqueWithoutSubmissionInput | SubmissionApprovalUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: SubmissionApprovalUpdateManyWithWhereWithoutSubmissionInput | SubmissionApprovalUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: SubmissionApprovalScalarWhereInput | SubmissionApprovalScalarWhereInput[]
  }

  export type SubmissionCreateNestedOneWithoutTracksInput = {
    create?: XOR<SubmissionCreateWithoutTracksInput, SubmissionUncheckedCreateWithoutTracksInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutTracksInput
    connect?: SubmissionWhereUniqueInput
  }

  export type TrackContributorCreateNestedManyWithoutTrackInput = {
    create?: XOR<TrackContributorCreateWithoutTrackInput, TrackContributorUncheckedCreateWithoutTrackInput> | TrackContributorCreateWithoutTrackInput[] | TrackContributorUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutTrackInput | TrackContributorCreateOrConnectWithoutTrackInput[]
    createMany?: TrackContributorCreateManyTrackInputEnvelope
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
  }

  export type TrackContributorUncheckedCreateNestedManyWithoutTrackInput = {
    create?: XOR<TrackContributorCreateWithoutTrackInput, TrackContributorUncheckedCreateWithoutTrackInput> | TrackContributorCreateWithoutTrackInput[] | TrackContributorUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutTrackInput | TrackContributorCreateOrConnectWithoutTrackInput[]
    createMany?: TrackContributorCreateManyTrackInputEnvelope
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SubmissionUpdateOneRequiredWithoutTracksNestedInput = {
    create?: XOR<SubmissionCreateWithoutTracksInput, SubmissionUncheckedCreateWithoutTracksInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutTracksInput
    upsert?: SubmissionUpsertWithoutTracksInput
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutTracksInput, SubmissionUpdateWithoutTracksInput>, SubmissionUncheckedUpdateWithoutTracksInput>
  }

  export type TrackContributorUpdateManyWithoutTrackNestedInput = {
    create?: XOR<TrackContributorCreateWithoutTrackInput, TrackContributorUncheckedCreateWithoutTrackInput> | TrackContributorCreateWithoutTrackInput[] | TrackContributorUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutTrackInput | TrackContributorCreateOrConnectWithoutTrackInput[]
    upsert?: TrackContributorUpsertWithWhereUniqueWithoutTrackInput | TrackContributorUpsertWithWhereUniqueWithoutTrackInput[]
    createMany?: TrackContributorCreateManyTrackInputEnvelope
    set?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    disconnect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    delete?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    update?: TrackContributorUpdateWithWhereUniqueWithoutTrackInput | TrackContributorUpdateWithWhereUniqueWithoutTrackInput[]
    updateMany?: TrackContributorUpdateManyWithWhereWithoutTrackInput | TrackContributorUpdateManyWithWhereWithoutTrackInput[]
    deleteMany?: TrackContributorScalarWhereInput | TrackContributorScalarWhereInput[]
  }

  export type TrackContributorUncheckedUpdateManyWithoutTrackNestedInput = {
    create?: XOR<TrackContributorCreateWithoutTrackInput, TrackContributorUncheckedCreateWithoutTrackInput> | TrackContributorCreateWithoutTrackInput[] | TrackContributorUncheckedCreateWithoutTrackInput[]
    connectOrCreate?: TrackContributorCreateOrConnectWithoutTrackInput | TrackContributorCreateOrConnectWithoutTrackInput[]
    upsert?: TrackContributorUpsertWithWhereUniqueWithoutTrackInput | TrackContributorUpsertWithWhereUniqueWithoutTrackInput[]
    createMany?: TrackContributorCreateManyTrackInputEnvelope
    set?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    disconnect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    delete?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    connect?: TrackContributorWhereUniqueInput | TrackContributorWhereUniqueInput[]
    update?: TrackContributorUpdateWithWhereUniqueWithoutTrackInput | TrackContributorUpdateWithWhereUniqueWithoutTrackInput[]
    updateMany?: TrackContributorUpdateManyWithWhereWithoutTrackInput | TrackContributorUpdateManyWithWhereWithoutTrackInput[]
    deleteMany?: TrackContributorScalarWhereInput | TrackContributorScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutVideosInput = {
    create?: XOR<UserCreateWithoutVideosInput, UserUncheckedCreateWithoutVideosInput>
    connectOrCreate?: UserCreateOrConnectWithoutVideosInput
    connect?: UserWhereUniqueInput
  }

  export type LabelCreateNestedOneWithoutVideosInput = {
    create?: XOR<LabelCreateWithoutVideosInput, LabelUncheckedCreateWithoutVideosInput>
    connectOrCreate?: LabelCreateOrConnectWithoutVideosInput
    connect?: LabelWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutVideosInput = {
    create?: XOR<SubmissionCreateWithoutVideosInput, SubmissionUncheckedCreateWithoutVideosInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutVideosInput
    connect?: SubmissionWhereUniqueInput
  }

  export type VideoContributorCreateNestedManyWithoutVideoInput = {
    create?: XOR<VideoContributorCreateWithoutVideoInput, VideoContributorUncheckedCreateWithoutVideoInput> | VideoContributorCreateWithoutVideoInput[] | VideoContributorUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutVideoInput | VideoContributorCreateOrConnectWithoutVideoInput[]
    createMany?: VideoContributorCreateManyVideoInputEnvelope
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
  }

  export type VideoContributorUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<VideoContributorCreateWithoutVideoInput, VideoContributorUncheckedCreateWithoutVideoInput> | VideoContributorCreateWithoutVideoInput[] | VideoContributorUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutVideoInput | VideoContributorCreateOrConnectWithoutVideoInput[]
    createMany?: VideoContributorCreateManyVideoInputEnvelope
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<UserCreateWithoutVideosInput, UserUncheckedCreateWithoutVideosInput>
    connectOrCreate?: UserCreateOrConnectWithoutVideosInput
    upsert?: UserUpsertWithoutVideosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVideosInput, UserUpdateWithoutVideosInput>, UserUncheckedUpdateWithoutVideosInput>
  }

  export type LabelUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<LabelCreateWithoutVideosInput, LabelUncheckedCreateWithoutVideosInput>
    connectOrCreate?: LabelCreateOrConnectWithoutVideosInput
    upsert?: LabelUpsertWithoutVideosInput
    connect?: LabelWhereUniqueInput
    update?: XOR<XOR<LabelUpdateToOneWithWhereWithoutVideosInput, LabelUpdateWithoutVideosInput>, LabelUncheckedUpdateWithoutVideosInput>
  }

  export type SubmissionUpdateOneWithoutVideosNestedInput = {
    create?: XOR<SubmissionCreateWithoutVideosInput, SubmissionUncheckedCreateWithoutVideosInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutVideosInput
    upsert?: SubmissionUpsertWithoutVideosInput
    disconnect?: SubmissionWhereInput | boolean
    delete?: SubmissionWhereInput | boolean
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutVideosInput, SubmissionUpdateWithoutVideosInput>, SubmissionUncheckedUpdateWithoutVideosInput>
  }

  export type VideoContributorUpdateManyWithoutVideoNestedInput = {
    create?: XOR<VideoContributorCreateWithoutVideoInput, VideoContributorUncheckedCreateWithoutVideoInput> | VideoContributorCreateWithoutVideoInput[] | VideoContributorUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutVideoInput | VideoContributorCreateOrConnectWithoutVideoInput[]
    upsert?: VideoContributorUpsertWithWhereUniqueWithoutVideoInput | VideoContributorUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: VideoContributorCreateManyVideoInputEnvelope
    set?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    disconnect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    delete?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    update?: VideoContributorUpdateWithWhereUniqueWithoutVideoInput | VideoContributorUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: VideoContributorUpdateManyWithWhereWithoutVideoInput | VideoContributorUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: VideoContributorScalarWhereInput | VideoContributorScalarWhereInput[]
  }

  export type VideoContributorUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<VideoContributorCreateWithoutVideoInput, VideoContributorUncheckedCreateWithoutVideoInput> | VideoContributorCreateWithoutVideoInput[] | VideoContributorUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: VideoContributorCreateOrConnectWithoutVideoInput | VideoContributorCreateOrConnectWithoutVideoInput[]
    upsert?: VideoContributorUpsertWithWhereUniqueWithoutVideoInput | VideoContributorUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: VideoContributorCreateManyVideoInputEnvelope
    set?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    disconnect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    delete?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    connect?: VideoContributorWhereUniqueInput | VideoContributorWhereUniqueInput[]
    update?: VideoContributorUpdateWithWhereUniqueWithoutVideoInput | VideoContributorUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: VideoContributorUpdateManyWithWhereWithoutVideoInput | VideoContributorUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: VideoContributorScalarWhereInput | VideoContributorScalarWhereInput[]
  }

  export type FileFolderCreateNestedOneWithoutChildrenInput = {
    create?: XOR<FileFolderCreateWithoutChildrenInput, FileFolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FileFolderCreateOrConnectWithoutChildrenInput
    connect?: FileFolderWhereUniqueInput
  }

  export type FileFolderCreateNestedManyWithoutParentInput = {
    create?: XOR<FileFolderCreateWithoutParentInput, FileFolderUncheckedCreateWithoutParentInput> | FileFolderCreateWithoutParentInput[] | FileFolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutParentInput | FileFolderCreateOrConnectWithoutParentInput[]
    createMany?: FileFolderCreateManyParentInputEnvelope
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutFolderInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutFileFoldersInput = {
    create?: XOR<UserCreateWithoutFileFoldersInput, UserUncheckedCreateWithoutFileFoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileFoldersInput
    connect?: UserWhereUniqueInput
  }

  export type FileFolderUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<FileFolderCreateWithoutParentInput, FileFolderUncheckedCreateWithoutParentInput> | FileFolderCreateWithoutParentInput[] | FileFolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutParentInput | FileFolderCreateOrConnectWithoutParentInput[]
    createMany?: FileFolderCreateManyParentInputEnvelope
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutFolderInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type FileFolderUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<FileFolderCreateWithoutChildrenInput, FileFolderUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: FileFolderCreateOrConnectWithoutChildrenInput
    upsert?: FileFolderUpsertWithoutChildrenInput
    disconnect?: FileFolderWhereInput | boolean
    delete?: FileFolderWhereInput | boolean
    connect?: FileFolderWhereUniqueInput
    update?: XOR<XOR<FileFolderUpdateToOneWithWhereWithoutChildrenInput, FileFolderUpdateWithoutChildrenInput>, FileFolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FileFolderUpdateManyWithoutParentNestedInput = {
    create?: XOR<FileFolderCreateWithoutParentInput, FileFolderUncheckedCreateWithoutParentInput> | FileFolderCreateWithoutParentInput[] | FileFolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutParentInput | FileFolderCreateOrConnectWithoutParentInput[]
    upsert?: FileFolderUpsertWithWhereUniqueWithoutParentInput | FileFolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FileFolderCreateManyParentInputEnvelope
    set?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    disconnect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    delete?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    update?: FileFolderUpdateWithWhereUniqueWithoutParentInput | FileFolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FileFolderUpdateManyWithWhereWithoutParentInput | FileFolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FileFolderScalarWhereInput | FileFolderScalarWhereInput[]
  }

  export type FileUpdateManyWithoutFolderNestedInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutFolderInput | FileUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutFolderInput | FileUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: FileUpdateManyWithWhereWithoutFolderInput | FileUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type UserUpdateOneWithoutFileFoldersNestedInput = {
    create?: XOR<UserCreateWithoutFileFoldersInput, UserUncheckedCreateWithoutFileFoldersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFileFoldersInput
    upsert?: UserUpsertWithoutFileFoldersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFileFoldersInput, UserUpdateWithoutFileFoldersInput>, UserUncheckedUpdateWithoutFileFoldersInput>
  }

  export type FileFolderUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<FileFolderCreateWithoutParentInput, FileFolderUncheckedCreateWithoutParentInput> | FileFolderCreateWithoutParentInput[] | FileFolderUncheckedCreateWithoutParentInput[]
    connectOrCreate?: FileFolderCreateOrConnectWithoutParentInput | FileFolderCreateOrConnectWithoutParentInput[]
    upsert?: FileFolderUpsertWithWhereUniqueWithoutParentInput | FileFolderUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: FileFolderCreateManyParentInputEnvelope
    set?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    disconnect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    delete?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    connect?: FileFolderWhereUniqueInput | FileFolderWhereUniqueInput[]
    update?: FileFolderUpdateWithWhereUniqueWithoutParentInput | FileFolderUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: FileFolderUpdateManyWithWhereWithoutParentInput | FileFolderUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: FileFolderScalarWhereInput | FileFolderScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutFolderNestedInput = {
    create?: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput> | FileCreateWithoutFolderInput[] | FileUncheckedCreateWithoutFolderInput[]
    connectOrCreate?: FileCreateOrConnectWithoutFolderInput | FileCreateOrConnectWithoutFolderInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutFolderInput | FileUpsertWithWhereUniqueWithoutFolderInput[]
    createMany?: FileCreateManyFolderInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutFolderInput | FileUpdateWithWhereUniqueWithoutFolderInput[]
    updateMany?: FileUpdateManyWithWhereWithoutFolderInput | FileUpdateManyWithWhereWithoutFolderInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSubmissionContributionsInput = {
    create?: XOR<UserCreateWithoutSubmissionContributionsInput, UserUncheckedCreateWithoutSubmissionContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionContributionsInput
    connect?: UserWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutContributorsInput = {
    create?: XOR<SubmissionCreateWithoutContributorsInput, SubmissionUncheckedCreateWithoutContributorsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutContributorsInput
    connect?: SubmissionWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSubmissionContributionsNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionContributionsInput, UserUncheckedCreateWithoutSubmissionContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionContributionsInput
    upsert?: UserUpsertWithoutSubmissionContributionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionContributionsInput, UserUpdateWithoutSubmissionContributionsInput>, UserUncheckedUpdateWithoutSubmissionContributionsInput>
  }

  export type SubmissionUpdateOneRequiredWithoutContributorsNestedInput = {
    create?: XOR<SubmissionCreateWithoutContributorsInput, SubmissionUncheckedCreateWithoutContributorsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutContributorsInput
    upsert?: SubmissionUpsertWithoutContributorsInput
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutContributorsInput, SubmissionUpdateWithoutContributorsInput>, SubmissionUncheckedUpdateWithoutContributorsInput>
  }

  export type UserCreateNestedOneWithoutTrackContributionsInput = {
    create?: XOR<UserCreateWithoutTrackContributionsInput, UserUncheckedCreateWithoutTrackContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrackContributionsInput
    connect?: UserWhereUniqueInput
  }

  export type TrackCreateNestedOneWithoutContributorsInput = {
    create?: XOR<TrackCreateWithoutContributorsInput, TrackUncheckedCreateWithoutContributorsInput>
    connectOrCreate?: TrackCreateOrConnectWithoutContributorsInput
    connect?: TrackWhereUniqueInput
  }

  export type EnumContributorRoleFieldUpdateOperationsInput = {
    set?: $Enums.ContributorRole
  }

  export type UserUpdateOneRequiredWithoutTrackContributionsNestedInput = {
    create?: XOR<UserCreateWithoutTrackContributionsInput, UserUncheckedCreateWithoutTrackContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTrackContributionsInput
    upsert?: UserUpsertWithoutTrackContributionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTrackContributionsInput, UserUpdateWithoutTrackContributionsInput>, UserUncheckedUpdateWithoutTrackContributionsInput>
  }

  export type TrackUpdateOneRequiredWithoutContributorsNestedInput = {
    create?: XOR<TrackCreateWithoutContributorsInput, TrackUncheckedCreateWithoutContributorsInput>
    connectOrCreate?: TrackCreateOrConnectWithoutContributorsInput
    upsert?: TrackUpsertWithoutContributorsInput
    connect?: TrackWhereUniqueInput
    update?: XOR<XOR<TrackUpdateToOneWithWhereWithoutContributorsInput, TrackUpdateWithoutContributorsInput>, TrackUncheckedUpdateWithoutContributorsInput>
  }

  export type UserCreateNestedOneWithoutVideoContributionsInput = {
    create?: XOR<UserCreateWithoutVideoContributionsInput, UserUncheckedCreateWithoutVideoContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVideoContributionsInput
    connect?: UserWhereUniqueInput
  }

  export type VideoCreateNestedOneWithoutContributorsInput = {
    create?: XOR<VideoCreateWithoutContributorsInput, VideoUncheckedCreateWithoutContributorsInput>
    connectOrCreate?: VideoCreateOrConnectWithoutContributorsInput
    connect?: VideoWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVideoContributionsNestedInput = {
    create?: XOR<UserCreateWithoutVideoContributionsInput, UserUncheckedCreateWithoutVideoContributionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutVideoContributionsInput
    upsert?: UserUpsertWithoutVideoContributionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVideoContributionsInput, UserUpdateWithoutVideoContributionsInput>, UserUncheckedUpdateWithoutVideoContributionsInput>
  }

  export type VideoUpdateOneRequiredWithoutContributorsNestedInput = {
    create?: XOR<VideoCreateWithoutContributorsInput, VideoUncheckedCreateWithoutContributorsInput>
    connectOrCreate?: VideoCreateOrConnectWithoutContributorsInput
    upsert?: VideoUpsertWithoutContributorsInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutContributorsInput, VideoUpdateWithoutContributorsInput>, VideoUncheckedUpdateWithoutContributorsInput>
  }

  export type SubmissionCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<SubmissionCreateWithoutApprovalsInput, SubmissionUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutApprovalsInput
    connect?: SubmissionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumApprovalTypeFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalType
  }

  export type SubmissionUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<SubmissionCreateWithoutApprovalsInput, SubmissionUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutApprovalsInput
    upsert?: SubmissionUpsertWithoutApprovalsInput
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutApprovalsInput, SubmissionUpdateWithoutApprovalsInput>, SubmissionUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsInput
    upsert?: UserUpsertWithoutApprovalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalsInput, UserUpdateWithoutApprovalsInput>, UserUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutCommentsInput = {
    create?: XOR<SubmissionCreateWithoutCommentsInput, SubmissionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutCommentsInput
    connect?: SubmissionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type SubmissionUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<SubmissionCreateWithoutCommentsInput, SubmissionUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutCommentsInput
    upsert?: SubmissionUpsertWithoutCommentsInput
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutCommentsInput, SubmissionUpdateWithoutCommentsInput>, SubmissionUncheckedUpdateWithoutCommentsInput>
  }

  export type FileFolderCreateNestedOneWithoutFilesInput = {
    create?: XOR<FileFolderCreateWithoutFilesInput, FileFolderUncheckedCreateWithoutFilesInput>
    connectOrCreate?: FileFolderCreateOrConnectWithoutFilesInput
    connect?: FileFolderWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumFileCategoryFieldUpdateOperationsInput = {
    set?: $Enums.FileCategory
  }

  export type FileFolderUpdateOneWithoutFilesNestedInput = {
    create?: XOR<FileFolderCreateWithoutFilesInput, FileFolderUncheckedCreateWithoutFilesInput>
    connectOrCreate?: FileFolderCreateOrConnectWithoutFilesInput
    upsert?: FileFolderUpsertWithoutFilesInput
    disconnect?: FileFolderWhereInput | boolean
    delete?: FileFolderWhereInput | boolean
    connect?: FileFolderWhereUniqueInput
    update?: XOR<XOR<FileFolderUpdateToOneWithWhereWithoutFilesInput, FileFolderUpdateWithoutFilesInput>, FileFolderUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateOneWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFilesInput, UserUpdateWithoutFilesInput>, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserCreateNestedOneWithoutNhatKyInput = {
    create?: XOR<UserCreateWithoutNhatKyInput, UserUncheckedCreateWithoutNhatKyInput>
    connectOrCreate?: UserCreateOrConnectWithoutNhatKyInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutNhatKyNestedInput = {
    create?: XOR<UserCreateWithoutNhatKyInput, UserUncheckedCreateWithoutNhatKyInput>
    connectOrCreate?: UserCreateOrConnectWithoutNhatKyInput
    upsert?: UserUpsertWithoutNhatKyInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNhatKyInput, UserUpdateWithoutNhatKyInput>, UserUncheckedUpdateWithoutNhatKyInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumReleaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReleaseType | EnumReleaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReleaseTypeFilter<$PrismaModel> | $Enums.ReleaseType
  }

  export type NestedEnumSubmissionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionStatus | EnumSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionStatusFilter<$PrismaModel> | $Enums.SubmissionStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumReleaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReleaseType | EnumReleaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReleaseType[] | ListEnumReleaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumReleaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReleaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReleaseTypeFilter<$PrismaModel>
    _max?: NestedEnumReleaseTypeFilter<$PrismaModel>
  }

  export type NestedEnumSubmissionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubmissionStatus | EnumSubmissionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubmissionStatus[] | ListEnumSubmissionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubmissionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubmissionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubmissionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubmissionStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumContributorRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributorRole | EnumContributorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumContributorRoleFilter<$PrismaModel> | $Enums.ContributorRole
  }

  export type NestedEnumContributorRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContributorRole | EnumContributorRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContributorRole[] | ListEnumContributorRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumContributorRoleWithAggregatesFilter<$PrismaModel> | $Enums.ContributorRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContributorRoleFilter<$PrismaModel>
    _max?: NestedEnumContributorRoleFilter<$PrismaModel>
  }

  export type NestedEnumApprovalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeFilter<$PrismaModel> | $Enums.ApprovalType
  }

  export type NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalTypeFilter<$PrismaModel>
    _max?: NestedEnumApprovalTypeFilter<$PrismaModel>
  }

  export type NestedEnumFileCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryFilter<$PrismaModel> | $Enums.FileCategory
  }

  export type NestedEnumFileCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FileCategory | EnumFileCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.FileCategory[] | ListEnumFileCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumFileCategoryWithAggregatesFilter<$PrismaModel> | $Enums.FileCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFileCategoryFilter<$PrismaModel>
    _max?: NestedEnumFileCategoryFilter<$PrismaModel>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    bio?: string | null
    avatarUrl?: string | null
    phone?: string | null
    artistName?: string | null
    fullName?: string | null
    facebookUrl?: string | null
    instagramUrl?: string | null
    youtubeUrl?: string | null
    spotifyUrl?: string | null
    appleMusicUrl?: string | null
    soundcloudUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    bio?: string | null
    avatarUrl?: string | null
    phone?: string | null
    artistName?: string | null
    fullName?: string | null
    facebookUrl?: string | null
    instagramUrl?: string | null
    youtubeUrl?: string | null
    spotifyUrl?: string | null
    appleMusicUrl?: string | null
    soundcloudUrl?: string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCreateWithoutUserInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    label: LabelCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCreateManyUserInputEnvelope = {
    data: SubmissionCreateManyUserInput | SubmissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LabelCreateWithoutMembersInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutLabelInput
    videos?: VideoCreateNestedManyWithoutLabelInput
  }

  export type LabelUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabelInput
    videos?: VideoUncheckedCreateNestedManyWithoutLabelInput
  }

  export type LabelCreateOrConnectWithoutMembersInput = {
    where: LabelWhereUniqueInput
    create: XOR<LabelCreateWithoutMembersInput, LabelUncheckedCreateWithoutMembersInput>
  }

  export type FileCreateWithoutUserInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    folder?: FileFolderCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    folderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutUserInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileCreateManyUserInputEnvelope = {
    data: FileCreateManyUserInput | FileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type nhatKyCreateWithoutUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type nhatKyUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type nhatKyCreateOrConnectWithoutUserInput = {
    where: nhatKyWhereUniqueInput
    create: XOR<nhatKyCreateWithoutUserInput, nhatKyUncheckedCreateWithoutUserInput>
  }

  export type nhatKyCreateManyUserInputEnvelope = {
    data: nhatKyCreateManyUserInput | nhatKyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VideoCreateWithoutUserInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    label: LabelCreateNestedOneWithoutVideosInput
    submission?: SubmissionCreateNestedOneWithoutVideosInput
    contributors?: VideoContributorCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    labelId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: VideoContributorUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutUserInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutUserInput, VideoUncheckedCreateWithoutUserInput>
  }

  export type VideoCreateManyUserInputEnvelope = {
    data: VideoCreateManyUserInput | VideoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileFolderCreateWithoutOwnerInput = {
    id?: string
    name: string
    path: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: FileFolderCreateNestedOneWithoutChildrenInput
    children?: FileFolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
  }

  export type FileFolderUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FileFolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FileFolderCreateOrConnectWithoutOwnerInput = {
    where: FileFolderWhereUniqueInput
    create: XOR<FileFolderCreateWithoutOwnerInput, FileFolderUncheckedCreateWithoutOwnerInput>
  }

  export type FileFolderCreateManyOwnerInputEnvelope = {
    data: FileFolderCreateManyOwnerInput | FileFolderCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionContributorCreateWithoutUserInput = {
    id?: string
    role: string
    percentage?: number | null
    createdAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutContributorsInput
  }

  export type SubmissionContributorUncheckedCreateWithoutUserInput = {
    id?: string
    role: string
    percentage?: number | null
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionContributorCreateOrConnectWithoutUserInput = {
    where: SubmissionContributorWhereUniqueInput
    create: XOR<SubmissionContributorCreateWithoutUserInput, SubmissionContributorUncheckedCreateWithoutUserInput>
  }

  export type SubmissionContributorCreateManyUserInputEnvelope = {
    data: SubmissionContributorCreateManyUserInput | SubmissionContributorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TrackContributorCreateWithoutUserInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    createdAt?: Date | string
    track: TrackCreateNestedOneWithoutContributorsInput
  }

  export type TrackContributorUncheckedCreateWithoutUserInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    trackId: string
    createdAt?: Date | string
  }

  export type TrackContributorCreateOrConnectWithoutUserInput = {
    where: TrackContributorWhereUniqueInput
    create: XOR<TrackContributorCreateWithoutUserInput, TrackContributorUncheckedCreateWithoutUserInput>
  }

  export type TrackContributorCreateManyUserInputEnvelope = {
    data: TrackContributorCreateManyUserInput | TrackContributorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VideoContributorCreateWithoutUserInput = {
    id?: string
    role: string
    percentage?: number | null
    createdAt?: Date | string
    video: VideoCreateNestedOneWithoutContributorsInput
  }

  export type VideoContributorUncheckedCreateWithoutUserInput = {
    id?: string
    role: string
    percentage?: number | null
    videoId: string
    createdAt?: Date | string
  }

  export type VideoContributorCreateOrConnectWithoutUserInput = {
    where: VideoContributorWhereUniqueInput
    create: XOR<VideoContributorCreateWithoutUserInput, VideoContributorUncheckedCreateWithoutUserInput>
  }

  export type VideoContributorCreateManyUserInputEnvelope = {
    data: VideoContributorCreateManyUserInput | VideoContributorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCommentCreateWithoutUserInput = {
    id?: string
    content: string
    createdAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutCommentsInput
  }

  export type SubmissionCommentUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionCommentCreateOrConnectWithoutUserInput = {
    where: SubmissionCommentWhereUniqueInput
    create: XOR<SubmissionCommentCreateWithoutUserInput, SubmissionCommentUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCommentCreateManyUserInputEnvelope = {
    data: SubmissionCommentCreateManyUserInput | SubmissionCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionApprovalCreateWithoutApproverInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    createdAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutApprovalsInput
  }

  export type SubmissionApprovalUncheckedCreateWithoutApproverInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionApprovalCreateOrConnectWithoutApproverInput = {
    where: SubmissionApprovalWhereUniqueInput
    create: XOR<SubmissionApprovalCreateWithoutApproverInput, SubmissionApprovalUncheckedCreateWithoutApproverInput>
  }

  export type SubmissionApprovalCreateManyApproverInputEnvelope = {
    data: SubmissionApprovalCreateManyApproverInput | SubmissionApprovalCreateManyApproverInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    artistName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    appleMusicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    soundcloudUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    artistName?: NullableStringFieldUpdateOperationsInput | string | null
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    facebookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyUrl?: NullableStringFieldUpdateOperationsInput | string | null
    appleMusicUrl?: NullableStringFieldUpdateOperationsInput | string | null
    soundcloudUrl?: NullableStringFieldUpdateOperationsInput | string | null
    socialLinks?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutUserInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    title?: StringFilter<"Submission"> | string
    artist?: StringFilter<"Submission"> | string
    upc?: StringNullableFilter<"Submission"> | string | null
    type?: EnumReleaseTypeFilter<"Submission"> | $Enums.ReleaseType
    coverImagePath?: StringFilter<"Submission"> | string
    releaseDate?: DateTimeFilter<"Submission"> | Date | string
    status?: EnumSubmissionStatusFilter<"Submission"> | $Enums.SubmissionStatus
    metadataLocked?: BoolFilter<"Submission"> | boolean
    published?: BoolFilter<"Submission"> | boolean
    albumName?: StringNullableFilter<"Submission"> | string | null
    mainCategory?: StringNullableFilter<"Submission"> | string | null
    subCategory?: StringNullableFilter<"Submission"> | string | null
    platforms?: JsonNullableFilter<"Submission">
    distributionLink?: StringNullableFilter<"Submission"> | string | null
    distributionPlatforms?: JsonNullableFilter<"Submission">
    statusVietnamese?: StringNullableFilter<"Submission"> | string | null
    rejectionReason?: StringNullableFilter<"Submission"> | string | null
    notes?: StringNullableFilter<"Submission"> | string | null
    userId?: StringFilter<"Submission"> | string
    labelId?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updatedAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type LabelUpsertWithoutMembersInput = {
    update: XOR<LabelUpdateWithoutMembersInput, LabelUncheckedUpdateWithoutMembersInput>
    create: XOR<LabelCreateWithoutMembersInput, LabelUncheckedCreateWithoutMembersInput>
    where?: LabelWhereInput
  }

  export type LabelUpdateToOneWithWhereWithoutMembersInput = {
    where?: LabelWhereInput
    data: XOR<LabelUpdateWithoutMembersInput, LabelUncheckedUpdateWithoutMembersInput>
  }

  export type LabelUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutLabelNestedInput
    videos?: VideoUpdateManyWithoutLabelNestedInput
  }

  export type LabelUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutLabelNestedInput
    videos?: VideoUncheckedUpdateManyWithoutLabelNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithWhereWithoutUserInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUserInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimetype?: StringFilter<"File"> | string
    size?: IntFilter<"File"> | number
    category?: EnumFileCategoryFilter<"File"> | $Enums.FileCategory
    folderId?: StringNullableFilter<"File"> | string | null
    userId?: StringNullableFilter<"File"> | string | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
  }

  export type nhatKyUpsertWithWhereUniqueWithoutUserInput = {
    where: nhatKyWhereUniqueInput
    update: XOR<nhatKyUpdateWithoutUserInput, nhatKyUncheckedUpdateWithoutUserInput>
    create: XOR<nhatKyCreateWithoutUserInput, nhatKyUncheckedCreateWithoutUserInput>
  }

  export type nhatKyUpdateWithWhereUniqueWithoutUserInput = {
    where: nhatKyWhereUniqueInput
    data: XOR<nhatKyUpdateWithoutUserInput, nhatKyUncheckedUpdateWithoutUserInput>
  }

  export type nhatKyUpdateManyWithWhereWithoutUserInput = {
    where: nhatKyScalarWhereInput
    data: XOR<nhatKyUpdateManyMutationInput, nhatKyUncheckedUpdateManyWithoutUserInput>
  }

  export type nhatKyScalarWhereInput = {
    AND?: nhatKyScalarWhereInput | nhatKyScalarWhereInput[]
    OR?: nhatKyScalarWhereInput[]
    NOT?: nhatKyScalarWhereInput | nhatKyScalarWhereInput[]
    id?: StringFilter<"nhatKy"> | string
    action?: StringFilter<"nhatKy"> | string
    details?: JsonNullableFilter<"nhatKy">
    userId?: StringNullableFilter<"nhatKy"> | string | null
    createdAt?: DateTimeFilter<"nhatKy"> | Date | string
  }

  export type VideoUpsertWithWhereUniqueWithoutUserInput = {
    where: VideoWhereUniqueInput
    update: XOR<VideoUpdateWithoutUserInput, VideoUncheckedUpdateWithoutUserInput>
    create: XOR<VideoCreateWithoutUserInput, VideoUncheckedCreateWithoutUserInput>
  }

  export type VideoUpdateWithWhereUniqueWithoutUserInput = {
    where: VideoWhereUniqueInput
    data: XOR<VideoUpdateWithoutUserInput, VideoUncheckedUpdateWithoutUserInput>
  }

  export type VideoUpdateManyWithWhereWithoutUserInput = {
    where: VideoScalarWhereInput
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyWithoutUserInput>
  }

  export type VideoScalarWhereInput = {
    AND?: VideoScalarWhereInput | VideoScalarWhereInput[]
    OR?: VideoScalarWhereInput[]
    NOT?: VideoScalarWhereInput | VideoScalarWhereInput[]
    id?: StringFilter<"Video"> | string
    title?: StringFilter<"Video"> | string
    artist?: StringFilter<"Video"> | string
    youtubeVideoId?: StringNullableFilter<"Video"> | string | null
    youtubeUrl?: StringNullableFilter<"Video"> | string | null
    thumbnailUrl?: StringNullableFilter<"Video"> | string | null
    duration?: IntNullableFilter<"Video"> | number | null
    description?: StringNullableFilter<"Video"> | string | null
    tags?: StringNullableFilter<"Video"> | string | null
    category?: StringNullableFilter<"Video"> | string | null
    language?: StringNullableFilter<"Video"> | string | null
    contentIdEnabled?: BoolFilter<"Video"> | boolean
    contentIdStatus?: StringNullableFilter<"Video"> | string | null
    userId?: StringFilter<"Video"> | string
    labelId?: StringFilter<"Video"> | string
    submissionId?: StringNullableFilter<"Video"> | string | null
    createdAt?: DateTimeFilter<"Video"> | Date | string
    updatedAt?: DateTimeFilter<"Video"> | Date | string
  }

  export type FileFolderUpsertWithWhereUniqueWithoutOwnerInput = {
    where: FileFolderWhereUniqueInput
    update: XOR<FileFolderUpdateWithoutOwnerInput, FileFolderUncheckedUpdateWithoutOwnerInput>
    create: XOR<FileFolderCreateWithoutOwnerInput, FileFolderUncheckedCreateWithoutOwnerInput>
  }

  export type FileFolderUpdateWithWhereUniqueWithoutOwnerInput = {
    where: FileFolderWhereUniqueInput
    data: XOR<FileFolderUpdateWithoutOwnerInput, FileFolderUncheckedUpdateWithoutOwnerInput>
  }

  export type FileFolderUpdateManyWithWhereWithoutOwnerInput = {
    where: FileFolderScalarWhereInput
    data: XOR<FileFolderUpdateManyMutationInput, FileFolderUncheckedUpdateManyWithoutOwnerInput>
  }

  export type FileFolderScalarWhereInput = {
    AND?: FileFolderScalarWhereInput | FileFolderScalarWhereInput[]
    OR?: FileFolderScalarWhereInput[]
    NOT?: FileFolderScalarWhereInput | FileFolderScalarWhereInput[]
    id?: StringFilter<"FileFolder"> | string
    name?: StringFilter<"FileFolder"> | string
    path?: StringFilter<"FileFolder"> | string
    parentId?: StringNullableFilter<"FileFolder"> | string | null
    ownerId?: StringNullableFilter<"FileFolder"> | string | null
    isPublic?: BoolFilter<"FileFolder"> | boolean
    createdAt?: DateTimeFilter<"FileFolder"> | Date | string
    updatedAt?: DateTimeFilter<"FileFolder"> | Date | string
  }

  export type SubmissionContributorUpsertWithWhereUniqueWithoutUserInput = {
    where: SubmissionContributorWhereUniqueInput
    update: XOR<SubmissionContributorUpdateWithoutUserInput, SubmissionContributorUncheckedUpdateWithoutUserInput>
    create: XOR<SubmissionContributorCreateWithoutUserInput, SubmissionContributorUncheckedCreateWithoutUserInput>
  }

  export type SubmissionContributorUpdateWithWhereUniqueWithoutUserInput = {
    where: SubmissionContributorWhereUniqueInput
    data: XOR<SubmissionContributorUpdateWithoutUserInput, SubmissionContributorUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionContributorUpdateManyWithWhereWithoutUserInput = {
    where: SubmissionContributorScalarWhereInput
    data: XOR<SubmissionContributorUpdateManyMutationInput, SubmissionContributorUncheckedUpdateManyWithoutUserInput>
  }

  export type SubmissionContributorScalarWhereInput = {
    AND?: SubmissionContributorScalarWhereInput | SubmissionContributorScalarWhereInput[]
    OR?: SubmissionContributorScalarWhereInput[]
    NOT?: SubmissionContributorScalarWhereInput | SubmissionContributorScalarWhereInput[]
    id?: StringFilter<"SubmissionContributor"> | string
    role?: StringFilter<"SubmissionContributor"> | string
    percentage?: FloatNullableFilter<"SubmissionContributor"> | number | null
    userId?: StringFilter<"SubmissionContributor"> | string
    submissionId?: StringFilter<"SubmissionContributor"> | string
    createdAt?: DateTimeFilter<"SubmissionContributor"> | Date | string
  }

  export type TrackContributorUpsertWithWhereUniqueWithoutUserInput = {
    where: TrackContributorWhereUniqueInput
    update: XOR<TrackContributorUpdateWithoutUserInput, TrackContributorUncheckedUpdateWithoutUserInput>
    create: XOR<TrackContributorCreateWithoutUserInput, TrackContributorUncheckedCreateWithoutUserInput>
  }

  export type TrackContributorUpdateWithWhereUniqueWithoutUserInput = {
    where: TrackContributorWhereUniqueInput
    data: XOR<TrackContributorUpdateWithoutUserInput, TrackContributorUncheckedUpdateWithoutUserInput>
  }

  export type TrackContributorUpdateManyWithWhereWithoutUserInput = {
    where: TrackContributorScalarWhereInput
    data: XOR<TrackContributorUpdateManyMutationInput, TrackContributorUncheckedUpdateManyWithoutUserInput>
  }

  export type TrackContributorScalarWhereInput = {
    AND?: TrackContributorScalarWhereInput | TrackContributorScalarWhereInput[]
    OR?: TrackContributorScalarWhereInput[]
    NOT?: TrackContributorScalarWhereInput | TrackContributorScalarWhereInput[]
    id?: StringFilter<"TrackContributor"> | string
    role?: EnumContributorRoleFilter<"TrackContributor"> | $Enums.ContributorRole
    percentage?: FloatNullableFilter<"TrackContributor"> | number | null
    userId?: StringFilter<"TrackContributor"> | string
    trackId?: StringFilter<"TrackContributor"> | string
    createdAt?: DateTimeFilter<"TrackContributor"> | Date | string
  }

  export type VideoContributorUpsertWithWhereUniqueWithoutUserInput = {
    where: VideoContributorWhereUniqueInput
    update: XOR<VideoContributorUpdateWithoutUserInput, VideoContributorUncheckedUpdateWithoutUserInput>
    create: XOR<VideoContributorCreateWithoutUserInput, VideoContributorUncheckedCreateWithoutUserInput>
  }

  export type VideoContributorUpdateWithWhereUniqueWithoutUserInput = {
    where: VideoContributorWhereUniqueInput
    data: XOR<VideoContributorUpdateWithoutUserInput, VideoContributorUncheckedUpdateWithoutUserInput>
  }

  export type VideoContributorUpdateManyWithWhereWithoutUserInput = {
    where: VideoContributorScalarWhereInput
    data: XOR<VideoContributorUpdateManyMutationInput, VideoContributorUncheckedUpdateManyWithoutUserInput>
  }

  export type VideoContributorScalarWhereInput = {
    AND?: VideoContributorScalarWhereInput | VideoContributorScalarWhereInput[]
    OR?: VideoContributorScalarWhereInput[]
    NOT?: VideoContributorScalarWhereInput | VideoContributorScalarWhereInput[]
    id?: StringFilter<"VideoContributor"> | string
    role?: StringFilter<"VideoContributor"> | string
    percentage?: FloatNullableFilter<"VideoContributor"> | number | null
    userId?: StringFilter<"VideoContributor"> | string
    videoId?: StringFilter<"VideoContributor"> | string
    createdAt?: DateTimeFilter<"VideoContributor"> | Date | string
  }

  export type SubmissionCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: SubmissionCommentWhereUniqueInput
    update: XOR<SubmissionCommentUpdateWithoutUserInput, SubmissionCommentUncheckedUpdateWithoutUserInput>
    create: XOR<SubmissionCommentCreateWithoutUserInput, SubmissionCommentUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: SubmissionCommentWhereUniqueInput
    data: XOR<SubmissionCommentUpdateWithoutUserInput, SubmissionCommentUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionCommentUpdateManyWithWhereWithoutUserInput = {
    where: SubmissionCommentScalarWhereInput
    data: XOR<SubmissionCommentUpdateManyMutationInput, SubmissionCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type SubmissionCommentScalarWhereInput = {
    AND?: SubmissionCommentScalarWhereInput | SubmissionCommentScalarWhereInput[]
    OR?: SubmissionCommentScalarWhereInput[]
    NOT?: SubmissionCommentScalarWhereInput | SubmissionCommentScalarWhereInput[]
    id?: StringFilter<"SubmissionComment"> | string
    content?: StringFilter<"SubmissionComment"> | string
    userId?: StringFilter<"SubmissionComment"> | string
    submissionId?: StringFilter<"SubmissionComment"> | string
    createdAt?: DateTimeFilter<"SubmissionComment"> | Date | string
  }

  export type SubmissionApprovalUpsertWithWhereUniqueWithoutApproverInput = {
    where: SubmissionApprovalWhereUniqueInput
    update: XOR<SubmissionApprovalUpdateWithoutApproverInput, SubmissionApprovalUncheckedUpdateWithoutApproverInput>
    create: XOR<SubmissionApprovalCreateWithoutApproverInput, SubmissionApprovalUncheckedCreateWithoutApproverInput>
  }

  export type SubmissionApprovalUpdateWithWhereUniqueWithoutApproverInput = {
    where: SubmissionApprovalWhereUniqueInput
    data: XOR<SubmissionApprovalUpdateWithoutApproverInput, SubmissionApprovalUncheckedUpdateWithoutApproverInput>
  }

  export type SubmissionApprovalUpdateManyWithWhereWithoutApproverInput = {
    where: SubmissionApprovalScalarWhereInput
    data: XOR<SubmissionApprovalUpdateManyMutationInput, SubmissionApprovalUncheckedUpdateManyWithoutApproverInput>
  }

  export type SubmissionApprovalScalarWhereInput = {
    AND?: SubmissionApprovalScalarWhereInput | SubmissionApprovalScalarWhereInput[]
    OR?: SubmissionApprovalScalarWhereInput[]
    NOT?: SubmissionApprovalScalarWhereInput | SubmissionApprovalScalarWhereInput[]
    id?: StringFilter<"SubmissionApproval"> | string
    type?: EnumApprovalTypeFilter<"SubmissionApproval"> | $Enums.ApprovalType
    isApproved?: BoolFilter<"SubmissionApproval"> | boolean
    reason?: StringNullableFilter<"SubmissionApproval"> | string | null
    submissionId?: StringFilter<"SubmissionApproval"> | string
    approverId?: StringFilter<"SubmissionApproval"> | string
    createdAt?: DateTimeFilter<"SubmissionApproval"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserCreateWithoutLabelInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutLabelInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutLabelInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLabelInput, UserUncheckedCreateWithoutLabelInput>
  }

  export type UserCreateManyLabelInputEnvelope = {
    data: UserCreateManyLabelInput | UserCreateManyLabelInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutLabelInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutLabelInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutLabelInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutLabelInput, SubmissionUncheckedCreateWithoutLabelInput>
  }

  export type SubmissionCreateManyLabelInputEnvelope = {
    data: SubmissionCreateManyLabelInput | SubmissionCreateManyLabelInput[]
    skipDuplicates?: boolean
  }

  export type VideoCreateWithoutLabelInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVideosInput
    submission?: SubmissionCreateNestedOneWithoutVideosInput
    contributors?: VideoContributorCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutLabelInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: VideoContributorUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutLabelInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutLabelInput, VideoUncheckedCreateWithoutLabelInput>
  }

  export type VideoCreateManyLabelInputEnvelope = {
    data: VideoCreateManyLabelInput | VideoCreateManyLabelInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutLabelInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLabelInput, UserUncheckedUpdateWithoutLabelInput>
    create: XOR<UserCreateWithoutLabelInput, UserUncheckedCreateWithoutLabelInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLabelInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLabelInput, UserUncheckedUpdateWithoutLabelInput>
  }

  export type UserUpdateManyWithWhereWithoutLabelInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutLabelInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    roles?: EnumUserRoleNullableListFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    labelId?: StringNullableFilter<"User"> | string | null
  }

  export type SubmissionUpsertWithWhereUniqueWithoutLabelInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutLabelInput, SubmissionUncheckedUpdateWithoutLabelInput>
    create: XOR<SubmissionCreateWithoutLabelInput, SubmissionUncheckedCreateWithoutLabelInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutLabelInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutLabelInput, SubmissionUncheckedUpdateWithoutLabelInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutLabelInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutLabelInput>
  }

  export type VideoUpsertWithWhereUniqueWithoutLabelInput = {
    where: VideoWhereUniqueInput
    update: XOR<VideoUpdateWithoutLabelInput, VideoUncheckedUpdateWithoutLabelInput>
    create: XOR<VideoCreateWithoutLabelInput, VideoUncheckedCreateWithoutLabelInput>
  }

  export type VideoUpdateWithWhereUniqueWithoutLabelInput = {
    where: VideoWhereUniqueInput
    data: XOR<VideoUpdateWithoutLabelInput, VideoUncheckedUpdateWithoutLabelInput>
  }

  export type VideoUpdateManyWithWhereWithoutLabelInput = {
    where: VideoScalarWhereInput
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyWithoutLabelInput>
  }

  export type UserCreateWithoutSubmissionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
  }

  export type LabelCreateWithoutSubmissionsInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutLabelInput
    videos?: VideoCreateNestedManyWithoutLabelInput
  }

  export type LabelUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutLabelInput
    videos?: VideoUncheckedCreateNestedManyWithoutLabelInput
  }

  export type LabelCreateOrConnectWithoutSubmissionsInput = {
    where: LabelWhereUniqueInput
    create: XOR<LabelCreateWithoutSubmissionsInput, LabelUncheckedCreateWithoutSubmissionsInput>
  }

  export type TrackCreateWithoutSubmissionInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: TrackContributorCreateNestedManyWithoutTrackInput
  }

  export type TrackUncheckedCreateWithoutSubmissionInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: TrackContributorUncheckedCreateNestedManyWithoutTrackInput
  }

  export type TrackCreateOrConnectWithoutSubmissionInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutSubmissionInput, TrackUncheckedCreateWithoutSubmissionInput>
  }

  export type TrackCreateManySubmissionInputEnvelope = {
    data: TrackCreateManySubmissionInput | TrackCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type VideoCreateWithoutSubmissionInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVideosInput
    label: LabelCreateNestedOneWithoutVideosInput
    contributors?: VideoContributorCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutSubmissionInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contributors?: VideoContributorUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutSubmissionInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutSubmissionInput, VideoUncheckedCreateWithoutSubmissionInput>
  }

  export type VideoCreateManySubmissionInputEnvelope = {
    data: VideoCreateManySubmissionInput | VideoCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionContributorCreateWithoutSubmissionInput = {
    id?: string
    role: string
    percentage?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionContributionsInput
  }

  export type SubmissionContributorUncheckedCreateWithoutSubmissionInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    createdAt?: Date | string
  }

  export type SubmissionContributorCreateOrConnectWithoutSubmissionInput = {
    where: SubmissionContributorWhereUniqueInput
    create: XOR<SubmissionContributorCreateWithoutSubmissionInput, SubmissionContributorUncheckedCreateWithoutSubmissionInput>
  }

  export type SubmissionContributorCreateManySubmissionInputEnvelope = {
    data: SubmissionContributorCreateManySubmissionInput | SubmissionContributorCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCommentCreateWithoutSubmissionInput = {
    id?: string
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutCommentsInput
  }

  export type SubmissionCommentUncheckedCreateWithoutSubmissionInput = {
    id?: string
    content: string
    userId: string
    createdAt?: Date | string
  }

  export type SubmissionCommentCreateOrConnectWithoutSubmissionInput = {
    where: SubmissionCommentWhereUniqueInput
    create: XOR<SubmissionCommentCreateWithoutSubmissionInput, SubmissionCommentUncheckedCreateWithoutSubmissionInput>
  }

  export type SubmissionCommentCreateManySubmissionInputEnvelope = {
    data: SubmissionCommentCreateManySubmissionInput | SubmissionCommentCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionApprovalCreateWithoutSubmissionInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    createdAt?: Date | string
    approver: UserCreateNestedOneWithoutApprovalsInput
  }

  export type SubmissionApprovalUncheckedCreateWithoutSubmissionInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    approverId: string
    createdAt?: Date | string
  }

  export type SubmissionApprovalCreateOrConnectWithoutSubmissionInput = {
    where: SubmissionApprovalWhereUniqueInput
    create: XOR<SubmissionApprovalCreateWithoutSubmissionInput, SubmissionApprovalUncheckedCreateWithoutSubmissionInput>
  }

  export type SubmissionApprovalCreateManySubmissionInputEnvelope = {
    data: SubmissionApprovalCreateManySubmissionInput | SubmissionApprovalCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSubmissionsInput = {
    update: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type LabelUpsertWithoutSubmissionsInput = {
    update: XOR<LabelUpdateWithoutSubmissionsInput, LabelUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<LabelCreateWithoutSubmissionsInput, LabelUncheckedCreateWithoutSubmissionsInput>
    where?: LabelWhereInput
  }

  export type LabelUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: LabelWhereInput
    data: XOR<LabelUpdateWithoutSubmissionsInput, LabelUncheckedUpdateWithoutSubmissionsInput>
  }

  export type LabelUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutLabelNestedInput
    videos?: VideoUpdateManyWithoutLabelNestedInput
  }

  export type LabelUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutLabelNestedInput
    videos?: VideoUncheckedUpdateManyWithoutLabelNestedInput
  }

  export type TrackUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: TrackWhereUniqueInput
    update: XOR<TrackUpdateWithoutSubmissionInput, TrackUncheckedUpdateWithoutSubmissionInput>
    create: XOR<TrackCreateWithoutSubmissionInput, TrackUncheckedCreateWithoutSubmissionInput>
  }

  export type TrackUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: TrackWhereUniqueInput
    data: XOR<TrackUpdateWithoutSubmissionInput, TrackUncheckedUpdateWithoutSubmissionInput>
  }

  export type TrackUpdateManyWithWhereWithoutSubmissionInput = {
    where: TrackScalarWhereInput
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type TrackScalarWhereInput = {
    AND?: TrackScalarWhereInput | TrackScalarWhereInput[]
    OR?: TrackScalarWhereInput[]
    NOT?: TrackScalarWhereInput | TrackScalarWhereInput[]
    id?: StringFilter<"Track"> | string
    title?: StringFilter<"Track"> | string
    artist?: StringFilter<"Track"> | string
    filePath?: StringFilter<"Track"> | string
    duration?: IntFilter<"Track"> | number
    isrc?: StringNullableFilter<"Track"> | string | null
    fileName?: StringNullableFilter<"Track"> | string | null
    artistFullName?: StringNullableFilter<"Track"> | string | null
    fileSize?: IntNullableFilter<"Track"> | number | null
    format?: StringNullableFilter<"Track"> | string | null
    bitrate?: StringNullableFilter<"Track"> | string | null
    sampleRate?: StringNullableFilter<"Track"> | string | null
    submissionId?: StringFilter<"Track"> | string
    createdAt?: DateTimeFilter<"Track"> | Date | string
    updatedAt?: DateTimeFilter<"Track"> | Date | string
  }

  export type VideoUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: VideoWhereUniqueInput
    update: XOR<VideoUpdateWithoutSubmissionInput, VideoUncheckedUpdateWithoutSubmissionInput>
    create: XOR<VideoCreateWithoutSubmissionInput, VideoUncheckedCreateWithoutSubmissionInput>
  }

  export type VideoUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: VideoWhereUniqueInput
    data: XOR<VideoUpdateWithoutSubmissionInput, VideoUncheckedUpdateWithoutSubmissionInput>
  }

  export type VideoUpdateManyWithWhereWithoutSubmissionInput = {
    where: VideoScalarWhereInput
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type SubmissionContributorUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: SubmissionContributorWhereUniqueInput
    update: XOR<SubmissionContributorUpdateWithoutSubmissionInput, SubmissionContributorUncheckedUpdateWithoutSubmissionInput>
    create: XOR<SubmissionContributorCreateWithoutSubmissionInput, SubmissionContributorUncheckedCreateWithoutSubmissionInput>
  }

  export type SubmissionContributorUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: SubmissionContributorWhereUniqueInput
    data: XOR<SubmissionContributorUpdateWithoutSubmissionInput, SubmissionContributorUncheckedUpdateWithoutSubmissionInput>
  }

  export type SubmissionContributorUpdateManyWithWhereWithoutSubmissionInput = {
    where: SubmissionContributorScalarWhereInput
    data: XOR<SubmissionContributorUpdateManyMutationInput, SubmissionContributorUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type SubmissionCommentUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: SubmissionCommentWhereUniqueInput
    update: XOR<SubmissionCommentUpdateWithoutSubmissionInput, SubmissionCommentUncheckedUpdateWithoutSubmissionInput>
    create: XOR<SubmissionCommentCreateWithoutSubmissionInput, SubmissionCommentUncheckedCreateWithoutSubmissionInput>
  }

  export type SubmissionCommentUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: SubmissionCommentWhereUniqueInput
    data: XOR<SubmissionCommentUpdateWithoutSubmissionInput, SubmissionCommentUncheckedUpdateWithoutSubmissionInput>
  }

  export type SubmissionCommentUpdateManyWithWhereWithoutSubmissionInput = {
    where: SubmissionCommentScalarWhereInput
    data: XOR<SubmissionCommentUpdateManyMutationInput, SubmissionCommentUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type SubmissionApprovalUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: SubmissionApprovalWhereUniqueInput
    update: XOR<SubmissionApprovalUpdateWithoutSubmissionInput, SubmissionApprovalUncheckedUpdateWithoutSubmissionInput>
    create: XOR<SubmissionApprovalCreateWithoutSubmissionInput, SubmissionApprovalUncheckedCreateWithoutSubmissionInput>
  }

  export type SubmissionApprovalUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: SubmissionApprovalWhereUniqueInput
    data: XOR<SubmissionApprovalUpdateWithoutSubmissionInput, SubmissionApprovalUncheckedUpdateWithoutSubmissionInput>
  }

  export type SubmissionApprovalUpdateManyWithWhereWithoutSubmissionInput = {
    where: SubmissionApprovalScalarWhereInput
    data: XOR<SubmissionApprovalUpdateManyMutationInput, SubmissionApprovalUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type SubmissionCreateWithoutTracksInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    label: LabelCreateNestedOneWithoutSubmissionsInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutTracksInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutTracksInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutTracksInput, SubmissionUncheckedCreateWithoutTracksInput>
  }

  export type TrackContributorCreateWithoutTrackInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutTrackContributionsInput
  }

  export type TrackContributorUncheckedCreateWithoutTrackInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    userId: string
    createdAt?: Date | string
  }

  export type TrackContributorCreateOrConnectWithoutTrackInput = {
    where: TrackContributorWhereUniqueInput
    create: XOR<TrackContributorCreateWithoutTrackInput, TrackContributorUncheckedCreateWithoutTrackInput>
  }

  export type TrackContributorCreateManyTrackInputEnvelope = {
    data: TrackContributorCreateManyTrackInput | TrackContributorCreateManyTrackInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionUpsertWithoutTracksInput = {
    update: XOR<SubmissionUpdateWithoutTracksInput, SubmissionUncheckedUpdateWithoutTracksInput>
    create: XOR<SubmissionCreateWithoutTracksInput, SubmissionUncheckedCreateWithoutTracksInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutTracksInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutTracksInput, SubmissionUncheckedUpdateWithoutTracksInput>
  }

  export type SubmissionUpdateWithoutTracksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutTracksInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type TrackContributorUpsertWithWhereUniqueWithoutTrackInput = {
    where: TrackContributorWhereUniqueInput
    update: XOR<TrackContributorUpdateWithoutTrackInput, TrackContributorUncheckedUpdateWithoutTrackInput>
    create: XOR<TrackContributorCreateWithoutTrackInput, TrackContributorUncheckedCreateWithoutTrackInput>
  }

  export type TrackContributorUpdateWithWhereUniqueWithoutTrackInput = {
    where: TrackContributorWhereUniqueInput
    data: XOR<TrackContributorUpdateWithoutTrackInput, TrackContributorUncheckedUpdateWithoutTrackInput>
  }

  export type TrackContributorUpdateManyWithWhereWithoutTrackInput = {
    where: TrackContributorScalarWhereInput
    data: XOR<TrackContributorUpdateManyMutationInput, TrackContributorUncheckedUpdateManyWithoutTrackInput>
  }

  export type UserCreateWithoutVideosInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutVideosInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutVideosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVideosInput, UserUncheckedCreateWithoutVideosInput>
  }

  export type LabelCreateWithoutVideosInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserCreateNestedManyWithoutLabelInput
    submissions?: SubmissionCreateNestedManyWithoutLabelInput
  }

  export type LabelUncheckedCreateWithoutVideosInput = {
    id?: string
    name: string
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutLabelInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabelInput
  }

  export type LabelCreateOrConnectWithoutVideosInput = {
    where: LabelWhereUniqueInput
    create: XOR<LabelCreateWithoutVideosInput, LabelUncheckedCreateWithoutVideosInput>
  }

  export type SubmissionCreateWithoutVideosInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    label: LabelCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutVideosInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutVideosInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutVideosInput, SubmissionUncheckedCreateWithoutVideosInput>
  }

  export type VideoContributorCreateWithoutVideoInput = {
    id?: string
    role: string
    percentage?: number | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutVideoContributionsInput
  }

  export type VideoContributorUncheckedCreateWithoutVideoInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    createdAt?: Date | string
  }

  export type VideoContributorCreateOrConnectWithoutVideoInput = {
    where: VideoContributorWhereUniqueInput
    create: XOR<VideoContributorCreateWithoutVideoInput, VideoContributorUncheckedCreateWithoutVideoInput>
  }

  export type VideoContributorCreateManyVideoInputEnvelope = {
    data: VideoContributorCreateManyVideoInput | VideoContributorCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutVideosInput = {
    update: XOR<UserUpdateWithoutVideosInput, UserUncheckedUpdateWithoutVideosInput>
    create: XOR<UserCreateWithoutVideosInput, UserUncheckedCreateWithoutVideosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVideosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVideosInput, UserUncheckedUpdateWithoutVideosInput>
  }

  export type UserUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type LabelUpsertWithoutVideosInput = {
    update: XOR<LabelUpdateWithoutVideosInput, LabelUncheckedUpdateWithoutVideosInput>
    create: XOR<LabelCreateWithoutVideosInput, LabelUncheckedCreateWithoutVideosInput>
    where?: LabelWhereInput
  }

  export type LabelUpdateToOneWithWhereWithoutVideosInput = {
    where?: LabelWhereInput
    data: XOR<LabelUpdateWithoutVideosInput, LabelUncheckedUpdateWithoutVideosInput>
  }

  export type LabelUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutLabelNestedInput
    submissions?: SubmissionUpdateManyWithoutLabelNestedInput
  }

  export type LabelUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutLabelNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabelNestedInput
  }

  export type SubmissionUpsertWithoutVideosInput = {
    update: XOR<SubmissionUpdateWithoutVideosInput, SubmissionUncheckedUpdateWithoutVideosInput>
    create: XOR<SubmissionCreateWithoutVideosInput, SubmissionUncheckedCreateWithoutVideosInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutVideosInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutVideosInput, SubmissionUncheckedUpdateWithoutVideosInput>
  }

  export type SubmissionUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutVideosInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type VideoContributorUpsertWithWhereUniqueWithoutVideoInput = {
    where: VideoContributorWhereUniqueInput
    update: XOR<VideoContributorUpdateWithoutVideoInput, VideoContributorUncheckedUpdateWithoutVideoInput>
    create: XOR<VideoContributorCreateWithoutVideoInput, VideoContributorUncheckedCreateWithoutVideoInput>
  }

  export type VideoContributorUpdateWithWhereUniqueWithoutVideoInput = {
    where: VideoContributorWhereUniqueInput
    data: XOR<VideoContributorUpdateWithoutVideoInput, VideoContributorUncheckedUpdateWithoutVideoInput>
  }

  export type VideoContributorUpdateManyWithWhereWithoutVideoInput = {
    where: VideoContributorScalarWhereInput
    data: XOR<VideoContributorUpdateManyMutationInput, VideoContributorUncheckedUpdateManyWithoutVideoInput>
  }

  export type FileFolderCreateWithoutChildrenInput = {
    id?: string
    name: string
    path: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: FileFolderCreateNestedOneWithoutChildrenInput
    files?: FileCreateNestedManyWithoutFolderInput
    owner?: UserCreateNestedOneWithoutFileFoldersInput
  }

  export type FileFolderUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    ownerId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FileFolderCreateOrConnectWithoutChildrenInput = {
    where: FileFolderWhereUniqueInput
    create: XOR<FileFolderCreateWithoutChildrenInput, FileFolderUncheckedCreateWithoutChildrenInput>
  }

  export type FileFolderCreateWithoutParentInput = {
    id?: string
    name: string
    path: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FileFolderCreateNestedManyWithoutParentInput
    files?: FileCreateNestedManyWithoutFolderInput
    owner?: UserCreateNestedOneWithoutFileFoldersInput
  }

  export type FileFolderUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    path: string
    ownerId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FileFolderUncheckedCreateNestedManyWithoutParentInput
    files?: FileUncheckedCreateNestedManyWithoutFolderInput
  }

  export type FileFolderCreateOrConnectWithoutParentInput = {
    where: FileFolderWhereUniqueInput
    create: XOR<FileFolderCreateWithoutParentInput, FileFolderUncheckedCreateWithoutParentInput>
  }

  export type FileFolderCreateManyParentInputEnvelope = {
    data: FileFolderCreateManyParentInput | FileFolderCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutFolderInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutFolderInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutFolderInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput>
  }

  export type FileCreateManyFolderInputEnvelope = {
    data: FileCreateManyFolderInput | FileCreateManyFolderInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFileFoldersInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutFileFoldersInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutFileFoldersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFileFoldersInput, UserUncheckedCreateWithoutFileFoldersInput>
  }

  export type FileFolderUpsertWithoutChildrenInput = {
    update: XOR<FileFolderUpdateWithoutChildrenInput, FileFolderUncheckedUpdateWithoutChildrenInput>
    create: XOR<FileFolderCreateWithoutChildrenInput, FileFolderUncheckedCreateWithoutChildrenInput>
    where?: FileFolderWhereInput
  }

  export type FileFolderUpdateToOneWithWhereWithoutChildrenInput = {
    where?: FileFolderWhereInput
    data: XOR<FileFolderUpdateWithoutChildrenInput, FileFolderUncheckedUpdateWithoutChildrenInput>
  }

  export type FileFolderUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: FileFolderUpdateOneWithoutChildrenNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
    owner?: UserUpdateOneWithoutFileFoldersNestedInput
  }

  export type FileFolderUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FileFolderUpsertWithWhereUniqueWithoutParentInput = {
    where: FileFolderWhereUniqueInput
    update: XOR<FileFolderUpdateWithoutParentInput, FileFolderUncheckedUpdateWithoutParentInput>
    create: XOR<FileFolderCreateWithoutParentInput, FileFolderUncheckedCreateWithoutParentInput>
  }

  export type FileFolderUpdateWithWhereUniqueWithoutParentInput = {
    where: FileFolderWhereUniqueInput
    data: XOR<FileFolderUpdateWithoutParentInput, FileFolderUncheckedUpdateWithoutParentInput>
  }

  export type FileFolderUpdateManyWithWhereWithoutParentInput = {
    where: FileFolderScalarWhereInput
    data: XOR<FileFolderUpdateManyMutationInput, FileFolderUncheckedUpdateManyWithoutParentInput>
  }

  export type FileUpsertWithWhereUniqueWithoutFolderInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutFolderInput, FileUncheckedUpdateWithoutFolderInput>
    create: XOR<FileCreateWithoutFolderInput, FileUncheckedCreateWithoutFolderInput>
  }

  export type FileUpdateWithWhereUniqueWithoutFolderInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutFolderInput, FileUncheckedUpdateWithoutFolderInput>
  }

  export type FileUpdateManyWithWhereWithoutFolderInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutFolderInput>
  }

  export type UserUpsertWithoutFileFoldersInput = {
    update: XOR<UserUpdateWithoutFileFoldersInput, UserUncheckedUpdateWithoutFileFoldersInput>
    create: XOR<UserCreateWithoutFileFoldersInput, UserUncheckedCreateWithoutFileFoldersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFileFoldersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFileFoldersInput, UserUncheckedUpdateWithoutFileFoldersInput>
  }

  export type UserUpdateWithoutFileFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutFileFoldersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserCreateWithoutSubmissionContributionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutSubmissionContributionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutSubmissionContributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionContributionsInput, UserUncheckedCreateWithoutSubmissionContributionsInput>
  }

  export type SubmissionCreateWithoutContributorsInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    label: LabelCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutContributorsInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutContributorsInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutContributorsInput, SubmissionUncheckedCreateWithoutContributorsInput>
  }

  export type UserUpsertWithoutSubmissionContributionsInput = {
    update: XOR<UserUpdateWithoutSubmissionContributionsInput, UserUncheckedUpdateWithoutSubmissionContributionsInput>
    create: XOR<UserCreateWithoutSubmissionContributionsInput, UserUncheckedCreateWithoutSubmissionContributionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionContributionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionContributionsInput, UserUncheckedUpdateWithoutSubmissionContributionsInput>
  }

  export type UserUpdateWithoutSubmissionContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type SubmissionUpsertWithoutContributorsInput = {
    update: XOR<SubmissionUpdateWithoutContributorsInput, SubmissionUncheckedUpdateWithoutContributorsInput>
    create: XOR<SubmissionCreateWithoutContributorsInput, SubmissionUncheckedCreateWithoutContributorsInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutContributorsInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutContributorsInput, SubmissionUncheckedUpdateWithoutContributorsInput>
  }

  export type SubmissionUpdateWithoutContributorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutContributorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type UserCreateWithoutTrackContributionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutTrackContributionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutTrackContributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTrackContributionsInput, UserUncheckedCreateWithoutTrackContributionsInput>
  }

  export type TrackCreateWithoutContributorsInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    submission: SubmissionCreateNestedOneWithoutTracksInput
  }

  export type TrackUncheckedCreateWithoutContributorsInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    submissionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TrackCreateOrConnectWithoutContributorsInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutContributorsInput, TrackUncheckedCreateWithoutContributorsInput>
  }

  export type UserUpsertWithoutTrackContributionsInput = {
    update: XOR<UserUpdateWithoutTrackContributionsInput, UserUncheckedUpdateWithoutTrackContributionsInput>
    create: XOR<UserCreateWithoutTrackContributionsInput, UserUncheckedCreateWithoutTrackContributionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTrackContributionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTrackContributionsInput, UserUncheckedUpdateWithoutTrackContributionsInput>
  }

  export type UserUpdateWithoutTrackContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutTrackContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type TrackUpsertWithoutContributorsInput = {
    update: XOR<TrackUpdateWithoutContributorsInput, TrackUncheckedUpdateWithoutContributorsInput>
    create: XOR<TrackCreateWithoutContributorsInput, TrackUncheckedCreateWithoutContributorsInput>
    where?: TrackWhereInput
  }

  export type TrackUpdateToOneWithWhereWithoutContributorsInput = {
    where?: TrackWhereInput
    data: XOR<TrackUpdateWithoutContributorsInput, TrackUncheckedUpdateWithoutContributorsInput>
  }

  export type TrackUpdateWithoutContributorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutTracksNestedInput
  }

  export type TrackUncheckedUpdateWithoutContributorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutVideoContributionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutVideoContributionsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutVideoContributionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVideoContributionsInput, UserUncheckedCreateWithoutVideoContributionsInput>
  }

  export type VideoCreateWithoutContributorsInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutVideosInput
    label: LabelCreateNestedOneWithoutVideosInput
    submission?: SubmissionCreateNestedOneWithoutVideosInput
  }

  export type VideoUncheckedCreateWithoutContributorsInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    labelId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoCreateOrConnectWithoutContributorsInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutContributorsInput, VideoUncheckedCreateWithoutContributorsInput>
  }

  export type UserUpsertWithoutVideoContributionsInput = {
    update: XOR<UserUpdateWithoutVideoContributionsInput, UserUncheckedUpdateWithoutVideoContributionsInput>
    create: XOR<UserCreateWithoutVideoContributionsInput, UserUncheckedCreateWithoutVideoContributionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVideoContributionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVideoContributionsInput, UserUncheckedUpdateWithoutVideoContributionsInput>
  }

  export type UserUpdateWithoutVideoContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutVideoContributionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type VideoUpsertWithoutContributorsInput = {
    update: XOR<VideoUpdateWithoutContributorsInput, VideoUncheckedUpdateWithoutContributorsInput>
    create: XOR<VideoCreateWithoutContributorsInput, VideoUncheckedCreateWithoutContributorsInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutContributorsInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutContributorsInput, VideoUncheckedUpdateWithoutContributorsInput>
  }

  export type VideoUpdateWithoutContributorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVideosNestedInput
    label?: LabelUpdateOneRequiredWithoutVideosNestedInput
    submission?: SubmissionUpdateOneWithoutVideosNestedInput
  }

  export type VideoUncheckedUpdateWithoutContributorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateWithoutApprovalsInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    label: LabelCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutApprovalsInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutApprovalsInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutApprovalsInput, SubmissionUncheckedCreateWithoutApprovalsInput>
  }

  export type UserCreateWithoutApprovalsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApprovalsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApprovalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
  }

  export type SubmissionUpsertWithoutApprovalsInput = {
    update: XOR<SubmissionUpdateWithoutApprovalsInput, SubmissionUncheckedUpdateWithoutApprovalsInput>
    create: XOR<SubmissionCreateWithoutApprovalsInput, SubmissionUncheckedCreateWithoutApprovalsInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutApprovalsInput, SubmissionUncheckedUpdateWithoutApprovalsInput>
  }

  export type SubmissionUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type UserUpsertWithoutApprovalsInput = {
    update: XOR<UserUpdateWithoutApprovalsInput, UserUncheckedUpdateWithoutApprovalsInput>
    create: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalsInput, UserUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type SubmissionCreateWithoutCommentsInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSubmissionsInput
    label: LabelCreateNestedOneWithoutSubmissionsInput
    tracks?: TrackCreateNestedManyWithoutSubmissionInput
    videos?: VideoCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tracks?: TrackUncheckedCreateNestedManyWithoutSubmissionInput
    videos?: VideoUncheckedCreateNestedManyWithoutSubmissionInput
    contributors?: SubmissionContributorUncheckedCreateNestedManyWithoutSubmissionInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutCommentsInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutCommentsInput, SubmissionUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type SubmissionUpsertWithoutCommentsInput = {
    update: XOR<SubmissionUpdateWithoutCommentsInput, SubmissionUncheckedUpdateWithoutCommentsInput>
    create: XOR<SubmissionCreateWithoutCommentsInput, SubmissionUncheckedCreateWithoutCommentsInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutCommentsInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutCommentsInput, SubmissionUncheckedUpdateWithoutCommentsInput>
  }

  export type SubmissionUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type FileFolderCreateWithoutFilesInput = {
    id?: string
    name: string
    path: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: FileFolderCreateNestedOneWithoutChildrenInput
    children?: FileFolderCreateNestedManyWithoutParentInput
    owner?: UserCreateNestedOneWithoutFileFoldersInput
  }

  export type FileFolderUncheckedCreateWithoutFilesInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    ownerId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: FileFolderUncheckedCreateNestedManyWithoutParentInput
  }

  export type FileFolderCreateOrConnectWithoutFilesInput = {
    where: FileFolderWhereUniqueInput
    create: XOR<FileFolderCreateWithoutFilesInput, FileFolderUncheckedCreateWithoutFilesInput>
  }

  export type UserCreateWithoutFilesInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    nhatKy?: nhatKyCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    nhatKy?: nhatKyUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type FileFolderUpsertWithoutFilesInput = {
    update: XOR<FileFolderUpdateWithoutFilesInput, FileFolderUncheckedUpdateWithoutFilesInput>
    create: XOR<FileFolderCreateWithoutFilesInput, FileFolderUncheckedCreateWithoutFilesInput>
    where?: FileFolderWhereInput
  }

  export type FileFolderUpdateToOneWithWhereWithoutFilesInput = {
    where?: FileFolderWhereInput
    data: XOR<FileFolderUpdateWithoutFilesInput, FileFolderUncheckedUpdateWithoutFilesInput>
  }

  export type FileFolderUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: FileFolderUpdateOneWithoutChildrenNestedInput
    children?: FileFolderUpdateManyWithoutParentNestedInput
    owner?: UserUpdateOneWithoutFileFoldersNestedInput
  }

  export type FileFolderUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FileFolderUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserCreateWithoutNhatKyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: ProfileCreateNestedOneWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    label?: LabelCreateNestedOneWithoutMembersInput
    files?: FileCreateNestedManyWithoutUserInput
    videos?: VideoCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalCreateNestedManyWithoutApproverInput
  }

  export type UserUncheckedCreateWithoutNhatKyInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
    labelId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    videos?: VideoUncheckedCreateNestedManyWithoutUserInput
    fileFolders?: FileFolderUncheckedCreateNestedManyWithoutOwnerInput
    submissionContributions?: SubmissionContributorUncheckedCreateNestedManyWithoutUserInput
    trackContributions?: TrackContributorUncheckedCreateNestedManyWithoutUserInput
    videoContributions?: VideoContributorUncheckedCreateNestedManyWithoutUserInput
    comments?: SubmissionCommentUncheckedCreateNestedManyWithoutUserInput
    approvals?: SubmissionApprovalUncheckedCreateNestedManyWithoutApproverInput
  }

  export type UserCreateOrConnectWithoutNhatKyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNhatKyInput, UserUncheckedCreateWithoutNhatKyInput>
  }

  export type UserUpsertWithoutNhatKyInput = {
    update: XOR<UserUpdateWithoutNhatKyInput, UserUncheckedUpdateWithoutNhatKyInput>
    create: XOR<UserCreateWithoutNhatKyInput, UserUncheckedCreateWithoutNhatKyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNhatKyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNhatKyInput, UserUncheckedUpdateWithoutNhatKyInput>
  }

  export type UserUpdateWithoutNhatKyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    label?: LabelUpdateOneWithoutMembersNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutNhatKyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    labelId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type SubmissionCreateManyUserInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyUserInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    folderId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type nhatKyCreateManyUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type VideoCreateManyUserInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    labelId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileFolderCreateManyOwnerInput = {
    id?: string
    name: string
    path: string
    parentId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionContributorCreateManyUserInput = {
    id?: string
    role: string
    percentage?: number | null
    submissionId: string
    createdAt?: Date | string
  }

  export type TrackContributorCreateManyUserInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    trackId: string
    createdAt?: Date | string
  }

  export type VideoContributorCreateManyUserInput = {
    id?: string
    role: string
    percentage?: number | null
    videoId: string
    createdAt?: Date | string
  }

  export type SubmissionCommentCreateManyUserInput = {
    id?: string
    content: string
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionApprovalCreateManyApproverInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    submissionId: string
    createdAt?: Date | string
  }

  export type SubmissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: LabelUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    folder?: FileFolderUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    folderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type nhatKyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type nhatKyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type nhatKyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: LabelUpdateOneRequiredWithoutVideosNestedInput
    submission?: SubmissionUpdateOneWithoutVideosNestedInput
    contributors?: VideoContributorUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    labelId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: VideoContributorUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    labelId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileFolderUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: FileFolderUpdateOneWithoutChildrenNestedInput
    children?: FileFolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
  }

  export type FileFolderUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FileFolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FileFolderUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutContributorsNestedInput
  }

  export type SubmissionContributorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    track?: TrackUpdateOneRequiredWithoutContributorsNestedInput
  }

  export type TrackContributorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    trackId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    trackId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    video?: VideoUpdateOneRequiredWithoutContributorsNestedInput
  }

  export type VideoContributorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    videoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    videoId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type SubmissionCommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submission?: SubmissionUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type SubmissionApprovalUncheckedUpdateWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalUncheckedUpdateManyWithoutApproverInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyLabelInput = {
    id?: string
    email: string
    name?: string | null
    password: string
    roles?: UserCreaterolesInput | $Enums.UserRole[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionCreateManyLabelInput = {
    id?: string
    title: string
    artist: string
    upc?: string | null
    type?: $Enums.ReleaseType
    coverImagePath: string
    releaseDate: Date | string
    status?: $Enums.SubmissionStatus
    metadataLocked?: boolean
    published?: boolean
    albumName?: string | null
    mainCategory?: string | null
    subCategory?: string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: string | null
    rejectionReason?: string | null
    notes?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoCreateManyLabelInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    submissionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUpdateManyWithoutUserNestedInput
    videos?: VideoUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    nhatKy?: nhatKyUncheckedUpdateManyWithoutUserNestedInput
    videos?: VideoUncheckedUpdateManyWithoutUserNestedInput
    fileFolders?: FileFolderUncheckedUpdateManyWithoutOwnerNestedInput
    submissionContributions?: SubmissionContributorUncheckedUpdateManyWithoutUserNestedInput
    trackContributions?: TrackContributorUncheckedUpdateManyWithoutUserNestedInput
    videoContributions?: VideoContributorUncheckedUpdateManyWithoutUserNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutUserNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutApproverNestedInput
  }

  export type UserUncheckedUpdateManyWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    roles?: UserUpdaterolesInput | $Enums.UserRole[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
    tracks?: TrackUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tracks?: TrackUncheckedUpdateManyWithoutSubmissionNestedInput
    videos?: VideoUncheckedUpdateManyWithoutSubmissionNestedInput
    contributors?: SubmissionContributorUncheckedUpdateManyWithoutSubmissionNestedInput
    comments?: SubmissionCommentUncheckedUpdateManyWithoutSubmissionNestedInput
    approvals?: SubmissionApprovalUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    upc?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumReleaseTypeFieldUpdateOperationsInput | $Enums.ReleaseType
    coverImagePath?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumSubmissionStatusFieldUpdateOperationsInput | $Enums.SubmissionStatus
    metadataLocked?: BoolFieldUpdateOperationsInput | boolean
    published?: BoolFieldUpdateOperationsInput | boolean
    albumName?: NullableStringFieldUpdateOperationsInput | string | null
    mainCategory?: NullableStringFieldUpdateOperationsInput | string | null
    subCategory?: NullableStringFieldUpdateOperationsInput | string | null
    platforms?: NullableJsonNullValueInput | InputJsonValue
    distributionLink?: NullableStringFieldUpdateOperationsInput | string | null
    distributionPlatforms?: NullableJsonNullValueInput | InputJsonValue
    statusVietnamese?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUpdateWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVideosNestedInput
    submission?: SubmissionUpdateOneWithoutVideosNestedInput
    contributors?: VideoContributorUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: VideoContributorUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateManyWithoutLabelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackCreateManySubmissionInput = {
    id?: string
    title: string
    artist: string
    filePath: string
    duration: number
    isrc?: string | null
    fileName?: string | null
    artistFullName?: string | null
    fileSize?: number | null
    format?: string | null
    bitrate?: string | null
    sampleRate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoCreateManySubmissionInput = {
    id?: string
    title: string
    artist: string
    youtubeVideoId?: string | null
    youtubeUrl?: string | null
    thumbnailUrl?: string | null
    duration?: number | null
    description?: string | null
    tags?: string | null
    category?: string | null
    language?: string | null
    contentIdEnabled?: boolean
    contentIdStatus?: string | null
    userId: string
    labelId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubmissionContributorCreateManySubmissionInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    createdAt?: Date | string
  }

  export type SubmissionCommentCreateManySubmissionInput = {
    id?: string
    content: string
    userId: string
    createdAt?: Date | string
  }

  export type SubmissionApprovalCreateManySubmissionInput = {
    id?: string
    type: $Enums.ApprovalType
    isApproved: boolean
    reason?: string | null
    approverId: string
    createdAt?: Date | string
  }

  export type TrackUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: TrackContributorUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: TrackContributorUncheckedUpdateManyWithoutTrackNestedInput
  }

  export type TrackUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    isrc?: NullableStringFieldUpdateOperationsInput | string | null
    fileName?: NullableStringFieldUpdateOperationsInput | string | null
    artistFullName?: NullableStringFieldUpdateOperationsInput | string | null
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    bitrate?: NullableStringFieldUpdateOperationsInput | string | null
    sampleRate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVideosNestedInput
    label?: LabelUpdateOneRequiredWithoutVideosNestedInput
    contributors?: VideoContributorUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contributors?: VideoContributorUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    artist?: StringFieldUpdateOperationsInput | string
    youtubeVideoId?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    contentIdEnabled?: BoolFieldUpdateOperationsInput | boolean
    contentIdStatus?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    labelId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSubmissionContributionsNestedInput
  }

  export type SubmissionContributorUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionContributorUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type SubmissionCommentUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCommentUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    approver?: UserUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type SubmissionApprovalUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionApprovalUncheckedUpdateManyWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    approverId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorCreateManyTrackInput = {
    id?: string
    role: $Enums.ContributorRole
    percentage?: number | null
    userId: string
    createdAt?: Date | string
  }

  export type TrackContributorUpdateWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTrackContributionsNestedInput
  }

  export type TrackContributorUncheckedUpdateWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TrackContributorUncheckedUpdateManyWithoutTrackInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumContributorRoleFieldUpdateOperationsInput | $Enums.ContributorRole
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorCreateManyVideoInput = {
    id?: string
    role: string
    percentage?: number | null
    userId: string
    createdAt?: Date | string
  }

  export type VideoContributorUpdateWithoutVideoInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVideoContributionsNestedInput
  }

  export type VideoContributorUncheckedUpdateWithoutVideoInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoContributorUncheckedUpdateManyWithoutVideoInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileFolderCreateManyParentInput = {
    id?: string
    name: string
    path: string
    ownerId?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateManyFolderInput = {
    id?: string
    name: string
    path: string
    mimetype: string
    size: number
    category?: $Enums.FileCategory
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileFolderUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FileFolderUpdateManyWithoutParentNestedInput
    files?: FileUpdateManyWithoutFolderNestedInput
    owner?: UserUpdateOneWithoutFileFoldersNestedInput
  }

  export type FileFolderUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: FileFolderUncheckedUpdateManyWithoutParentNestedInput
    files?: FileUncheckedUpdateManyWithoutFolderNestedInput
  }

  export type FileFolderUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutFolderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: EnumFileCategoryFieldUpdateOperationsInput | $Enums.FileCategory
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}