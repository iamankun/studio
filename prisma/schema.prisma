prisma
// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- BẢNG QUẢN LÝ NGƯỜI DÙNG & HỒ SƠ ---
model User {
  UID            String       @id @default(cuid())
  userName       String       
  email         String       
  fullName      String?      
  password      String
  roles         UserRole[]   @default([]) // Hạn chế tính năng vì chưa được quyền truy cập vào hệ thống
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  profile       Profile?
  submissions   Submission[] @relation("SubmissionCreator")
  labelId       String?
  label         Label?       @relation("UserLabel", fields: [labelId], references: [id]) // Quan hệ: user thuộc về một label (hãng đĩa), dùng labelId làm khóa ngoại, cho phép null nếu user không thuộc label nào
  ownedLabel    Label?       @relation("LabelOwner") // Quan hệ: user là chủ sở hữu của một label
  memberLabels  Label[]      @relation("LabelMembers") // Quan hệ: user là thành viên của nhiều label
  files         File[]      @relation("FileOwner")
  nhatKy        nhatKy[]
  videos        Video[]      @relation("VideoCreator")
  fileFolders   FileFolder[]

  submissionContributions SubmissionContributor[]
  trackContributions      TrackContributor[]
  videoContributions      VideoContributor[]
  comments                SubmissionComment[]
  approvals               SubmissionApproval[]
  
  signatureDocuments SignatureDocument[] @relation("UserSignatureDocuments")
  // XUất thông tin liên quan
  exportTemplatesCreated  ExportTemplate[] @relation("ExportTemplateCreator")
  exportsCreated          Export[] @relation("ExportCreator")
}

model Profile {
  id            String @id @default(cuid())
  bio           String?
  avatarUrl     String?
  phone         String? @unique
  artist        String? // Tên nghệ sĩ
  name          String? // Tên đầy đủ theo giấy tờ
  verified      Boolean @default(false) // Trạng thái xác minh khi đầy đủ các thông tin
  userUID         String @unique
  user            User   @relation(fields: [userUID], references: [UID], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  socialLinks   String[] // Liên kết đến các mạng xã hội

}

model SocialLink {
  id        String   @id @default(cuid())
  social    String?   // e.g., "facebook", "instagram", "youtube", etc.
  url       Json?
  homeUrl   String?
  facebookUrl String?
  instagramUrl String?
  youtubeUrl String?
  spotifyUrl String?
  soundCloudUrl String?
  appleMusicUrl String?
}
// --- BẢNG LIÊN KẾT MẠNG XÃ HỘI & MUSIC SOCIAL ---
model Social {
  id          String   @id @default(cuid()) // Khóa chính, tự sinh
  type        String?   // Loại social: facebook, instagram, youtube, spotify, appleMusic, soundCloud, v.v.
  name        String?
  url         String?   // Đường dẫn liên kết
}
model Label {
  id            String       @id @default(cuid())
  name          String       @unique
  code          String       @unique
  ownerUID       String      @unique
  owner         User         @relation("LabelOwner", fields: [ownerUID], references: [UID])
  members       User[]       @relation("LabelMembers")
  users         User[]       @relation("UserLabel")
  submissions   Submission[]
  videos        Video[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// --- BẢNG QUẢN LÝ PHÁT HÀNH & BÀI HÁT ---
model Submission {
  id              String    @id @default(cuid())
  title           String
  artist          String
  UPC             String?   @unique // Mã đóng gói sản phẩm do cung cấp sau nên sẽ chưa có và nhập sau
  type            ReleaseType @default(SINGLE) // Loại phát hành sẽ giữa trên số bài hát và thể loại.
  coverImagePath  String
  releaseDate     DateTime
  status          SubmissionStatus @default(PENDING)
  metadataLocked  Boolean   @default(false)
  published       Boolean   @default(false)
  albumName       String?
  mainCategory    String?
  subCategory     String?
  platforms       Json?     // Danh sách platforms phân phối
  distributionLink String?  // Link FFM.to, etc.
  distributionPlatforms Json? // Chi tiết platforms với URL

  // Hỗ trợ trạng thái tiếng Việt
  statusVietnamese String?
  rejectionReason  String?
  notes           String?     // Ghi chú chung cho submission
  labelId         String
  label           Label     @relation(fields: [labelId], references: [id])
  tracks          Track[]
  videos          Video[]   @relation("SubmissionVideos")
  contributors    SubmissionContributor[]
  comments        SubmissionComment[]
  approvals       SubmissionApproval[]
  signatureDocument SignatureDocument? @relation("SubmissionSignature")
  creatorUID    String // Đổi tên trường khóa ngoại
  creator        User   @relation("SubmissionCreator", fields: [creatorUID], references: [UID]) // Cập nhật references

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
model Image {
  id          String      @id @default(cuid())
  url         String
  submissionId String?
  submission  Submission? @relation("SubmissionSignatures", fields: [submissionId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}


model Track {
  id            String      @id @default(cuid())
  title         String
  artist         String
  filePath      String
  duration      Int         // in seconds
  ISRC          String     @unique // Cho phép gán thủ công và được cấp tự động khi hoàn thành gửi phát hành
  IPI           String?     // Là mã số quốc tế cho người tham gia
  ISWC          String?     // Là mã số quốc tế cho tác phẩm đang làm
  fileName      String?
  name          String?    // Tên đầy đủ nghệ sĩ từ Profile
  fileSize      Int?
  format        String?     // Chỉ chấp nhận WAV, 2 kênh stereo, 16-24 bit, 44.1+ kHz, >2s
  bitrate       String?     // 16-bit hoặc 24-bit
  sampleRate    String?     // 44.1 kHz tối thiểu đến 192 kHz tối đa
  
  // Metadata bổ sung
  mainCategory  String?     // Thể loại chính
  subCategory   String?     // Thể loại phụ
  lyrics        String?     // Lời bài hát riêng cho từng track
  
  submissionId  String
  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  contributors  TrackContributor[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// --- VIDEO MODEL (Chỉ cấp thông tin) ---
model Video {
  id            String      @id @default(cuid())
  title         String
  artist        String
  youtubeVideoId   String?  // ID video trên YouTube
  youtubeUrl       String?  // URL đầy đủ của video
  thumbnailUrl     String?  // URL thumbnail từ YouTube
  duration         Int?     // Thời lượng (seconds)
  description      String?  // Mô tả video
  tags             String?  // Tags, keywords
  category         String?  // Thể loại video
  language         String?  // Ngôn ngữ
  contentIdEnabled Boolean @default(false)
  contentIdStatus  String? // Mặc định đã có on nếu video đó đã duyệt
  creatorUID       String // Người tạo video
  labelId       String
  label         Label       @relation(fields: [labelId], references: [id])
  submissionId  String?
  submission    Submission? @relation("SubmissionVideos", fields: [submissionId], references: [id])
  contributors  VideoContributor[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  creator       User        @relation("VideoCreator", fields: [creatorUID], references: [UID])
}

// --- FILE EXPLORER SYSTEM (Dựa trên tailieu.doc) ---
model FileFolder {
  id            String      @id @default(cuid())
  name          String
  path          String      @unique
  parentId      String?
  parent        FileFolder? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children      FileFolder[] @relation("FolderHierarchy")
  files         File[]      @relation("FileFolderFiles")
  
  // Permissions
  ownerID       String?
  owner         User?       @relation(fields: [ownerID], references: [UID])
  isPublic      Boolean     @default(false)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// --- CÁC BẢNG HỖ TRỢ QUY TRÌNH & LOGIC ---

model SubmissionContributor {
  id            String @id @default(cuid())
  role          String
  percentage    Float? // Phần trăm đóng góp
  userUID       String
  user          User   @relation(fields: [userUID], references: [UID])
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model TrackContributor {
  id            String @id @default(cuid())
  role          ContributorRole
  percentage    Float?
  userUID       String
  user          User   @relation(fields: [userUID], references: [UID])
  trackId       String
  track         Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model VideoContributor {
  id            String @id @default(cuid())
  role          String // Director, Editor, etc.
  percentage    Float?
  userUID       String
  user          User   @relation(fields: [userUID], references: [UID])
  videoId       String
  video         Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model SubmissionApproval {
  id              String    @id @default(cuid())
  type            ApprovalType
  isApproved      Boolean
  reason          String?   // Lý do từ chối (nếu có)
  submissionId    String
  submission      Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  approverUID     String
  approver        User @relation(fields: [approverUID], references: [UID])
  createdAt       DateTime @default(now())
}

model SubmissionComment {
  id            String @id @default(cuid())
  content       String
  userUID       String
  user          User   @relation(fields: [userUID], references: [UID])
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
}

model File {
  id        String      @id @default(cuid())
  name      String
  path      String      @unique
  mimetype  String
  size      Int
  
  // File categorization
  category  FileCategory @default(OTHER)
  
  // Folder relationship
  folderId  String?
  folder    FileFolder? @relation("FileFolderFiles", fields: [folderId], references: [id])
  labelId   String?
  label     Label?      @relation("FileLabelFiles", fields: [labelId], references: [id])
  userUID   String? // Đã đổi thành userUID để nhất quán
  user      User?       @relation("FileOwner", fields: [userUID], references: [UID]) // Đổi tên quan hệ
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model nhatKy {
  id        String      @id @default(cuid())
  action    String
  details   Json?
  userUID   String?
  user      User?       @relation(fields: [userUID], references: [UID])
  createdAt DateTime    @default(now())
}

// --- EXPORT & DOCUMENT MANAGEMENT ---
model ExportTemplate {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  fields      Json   // Các field được chọn để export
  format      String // CSV, XLSX, TXT, PDF
  isActive    Boolean @default(true)
  createdByUID   String
  creator     User     @relation("ExportTemplateCreator", fields: [createdByUID], references: [UID])
  exports     Export[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Export {
  id         String @id @default(cuid())
  templateId String
  template   ExportTemplate @relation(fields: [templateId], references: [id])
  filePath   String
  fileName   String
  format     String
  recordCount Int
  exportedByUID String
  exporter   User   @relation("ExportCreator", fields: [exportedByUID], references: [UID])
  createdAt  DateTime @default(now())
}

model SignatureDocument {
  id             String @id @default(cuid())
  documentType String // Thêm trường này để phân biệt loại tài liệu (ví dụ: "SubmissionSignature", "LabelMembershipAgreement")
  submissionId   String @unique
  submission     Submission @relation("SubmissionSignature", fields: [submissionId], references: [id])
  documentPath   String
  signedPath     String?
  signerName     String?
  signedAt       DateTime?
  isCompleted    Boolean @default(false)
  templateData   Json    // Data used to generate the document

  // Thêm các trường khóa ngoại tùy chọn và định nghĩa quan hệ
  userUID        String? // Liên kết với người dùng (cho thỏa thuận tham gia nhãn)
 user User? @relation("UserSignatureDocuments", fields: [userUID], references: [UID]) // Định nghĩa quan hệ User-SignatureDocument
  
  labelId        String? // Liên kết với label (cho thỏa thuận tham gia nhãn)
  label          Label? @relation("LabelSignatureDocuments", fields: [labelId], references: [id]) // Định nghĩa quan hệ Label-SignatureDocument


  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// --- DISTRIBUTION PLATFORMS ---
model DistributionPlatform {
  id          String @id @default(cuid())
  name        String @unique // Spotify, Apple Music, etc.
  logoUrl     String?
  apiEndpoint String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- CÁC BỘ TRẠNG THÁI & VAI TRÒ (Cập nhật với Vietnamese support) ---
// Một user có thể có nhiều vai trò được gán, họ có thể là nghệ sĩ, nhà sản xuất, hoặc người viết lời, nhãn đĩa, người biểu diễn.
enum UserRole {
  COMPOSER // Sáng tác và viết lời bài hátẩm cũng như tạo track, release và thêm hồ sơ mới của Composer, producer và performer nhưng artist không thể xem các hồ sơ khác ngoài dữ liệu của Artist
  PRODUCER // Nhà sản xuất âm nhạc bài hát
  PERFORMER // Người biểu diễn, có hồ sơ được quản lí bởi Label Manager và Artist
  LABEL_MANAGER // Quản lý hãng đĩa, ngang như quản trị viênbel Manager và Artist
  ADMINISTRATOR // Quản trị viên hệ thốngg như quản trị viên
}
enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  PUBLISHED
  CANCELLED
  DRAFT
}
enum ReleaseType {
  SINGLE // Album đơn - Single (1 - 3 bài tối thiểu 1, 2 bài có thể instrumental hoặc cái gì đó khác) - Dạng này phổ biến
  EP // Album extended play - EP (4 - 6 bài tối thiểu 4) - Dạng này phổ biếnntal hoặc cái gì đó khác) - Dạng này phổ biến
  ALBUM // Album đầy đủ - Album (7 bài trở lên) - Thường không có vì album chỉ có thể do hãng đĩa tổng hợp
  COMPILATION // Album tổng hợp - Compilation (Album tổng hợp các bài hát từ nghệ sĩ khác nhau) - Không có vì không có trang âm nhạc nào phát hành dạng này
}
enum ContributorRole {
  COMPOSER // Người sáng tác
  LYRICIST // Người viết lời
  SINGERSONGWRITER // Người sáng tác và biểu diễn
  PRODUCER // Nhà sản xuấti sáng tác và biểu diễn
  PERFORMER // Người biểu diễn
  VOCALIST // Ca sĩi biểu diễn
  RAPPER // Rapperĩ
}
enum ApprovalType {
  DSP // Dịch vụ phân phối
  CONTENT_ID // Nhận diện nội dung
  ACR_CLOUD // ACR Cloudn nội dung
  LABEL_REVIEW // Đánh giá của hãng đĩa
}
enum FileCategory {
  AUDIO // Âm thanh
  VIDEO // Videoanh
  IMAGE // Hình ảnh
  DOCUMENT // Tài liệu
  OTHER // Khác
}