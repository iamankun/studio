// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- BẢNG QUẢN LÝ NGƯỜI DÙNG & HỒ SƠ ---
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  password      String
  roles         UserRole[]   @default([]) // KHÔNG cấp mặc định - user bị hạn chế
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  profile       Profile?
  submissions   Submission[] @relation("SubmissionCreator")
  labelId       String?
  label         Label?       @relation(fields: [labelId], references: [id])
  files         File[]
  activityLogs  ActivityLog[]
  videos        Video[]      @relation("VideoCreator")
  fileFolders   FileFolder[]

  submissionContributions SubmissionContributor[]
  trackContributions      TrackContributor[]
  videoContributions      VideoContributor[]
  comments                SubmissionComment[]
  approvals               SubmissionApproval[]
}

model Profile {
  id            String @id @default(cuid())
  bio           String?
  avatarUrl     String?
  phone         String? @unique
  artistName    String? // Tên nghệ sĩ
  fullName      String? // Tên đầy đủ theo giấy tờ
  
  // Social Links (bắt buộc)
  facebookUrl   String?
  instagramUrl  String?
  youtubeUrl    String?
  
  // Streaming Platforms (tùy chọn)
  spotifyUrl    String?
  appleMusicUrl String?
  soundcloudUrl String?
  
  userId        String @unique
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialLinks   Json?   // Backup cho các links khác
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Label {
  id            String       @id @default(cuid())
  name          String       @unique
  ownerId       String       @unique
  members       User[]
  submissions   Submission[]
  videos        Video[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// --- BẢNG QUẢN LÝ PHÁT HÀNH & BÀI HÁT ---
model Submission {
  id              String    @id @default(cuid())
  title           String
  artist          String
  upc             String?   @unique
  type            ReleaseType @default(SINGLE)
  coverImagePath  String
  releaseDate     DateTime
  status          SubmissionStatus @default(PENDING)
  metadataLocked  Boolean   @default(false)
  published       Boolean   @default(false)
  
  // Thông tin bổ sung từ source code
  albumName       String?
  mainCategory    String?
  subCategory     String?
  platforms       Json?     // Danh sách platforms phân phối
  distributionLink String?  // Link FFM.to, etc.
  distributionPlatforms Json? // Chi tiết platforms với URL
  
  // Vietnamese status support
  statusVietnamese String?
  rejectionReason  String?
  notes           String?

  userId          String
  user            User      @relation("SubmissionCreator", fields: [userId], references: [id])

  labelId         String
  label           Label     @relation(fields: [labelId], references: [id])

  tracks          Track[]
  videos          Video[]   @relation("SubmissionVideos")
  contributors    SubmissionContributor[]
  comments        SubmissionComment[]
  approvals       SubmissionApproval[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Track {
  id            String      @id @default(cuid())
  title         String
  artist        String
  filePath      String
  duration      Int         // in seconds
  isrc          String?     @unique
  
  // Metadata bổ sung từ mẫu MAU/
  fileName      String?
  artistFullName String?
  fileSize      Int?
  format        String?     // WAV, MP3, etc.
  bitrate       String?     // 24-bit, etc.
  sampleRate    String?     // 44.1 kHz, etc.

  submissionId  String
  submission    Submission  @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  contributors  TrackContributor[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// --- VIDEO MODEL (Chỉ cấp thông tin - theo MAU/) ---
model Video {
  id            String      @id @default(cuid())
  title         String
  artist        String
  
  // CHỈ CẤP THÔNG TIN VIDEO - KHÔNG CẦN FILE VIDEO
  // Thông tin này dùng cho YouTube Content ID
  youtubeVideoId   String?  // ID video trên YouTube
  youtubeUrl       String?  // URL đầy đủ của video
  thumbnailUrl     String?  // URL thumbnail từ YouTube
  duration         Int?     // Thời lượng (seconds)
  
  // Thông tin từ mẫu MAU/ để đăng ký Content ID
  description      String?  // Mô tả video
  tags             String?  // Tags, keywords
  category         String?  // Thể loại video
  language         String?  // Ngôn ngữ
  
  // Thông tin cho YouTube Content ID
  contentIdEnabled Boolean @default(false)
  contentIdStatus  String? // Trạng thái đăng ký Content ID
  
  userId        String
  user          User        @relation("VideoCreator", fields: [userId], references: [id])
  
  labelId       String
  label         Label       @relation(fields: [labelId], references: [id])
  
  submissionId  String?
  submission    Submission? @relation("SubmissionVideos", fields: [submissionId], references: [id])
  
  contributors  VideoContributor[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// --- FILE EXPLORER SYSTEM (Dựa trên tailieu.doc) ---
model FileFolder {
  id            String      @id @default(cuid())
  name          String
  path          String      @unique
  parentId      String?
  parent        FileFolder? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children      FileFolder[] @relation("FolderHierarchy")
  
  files         File[]
  
  // Permissions
  ownerId       String?
  owner         User?       @relation(fields: [ownerId], references: [id])
  isPublic      Boolean     @default(false)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// --- CÁC BẢNG HỖ TRỢ QUY TRÌNH & LOGIC ---

model SubmissionContributor {
  id            String @id @default(cuid())
  role          String
  percentage    Float? // Phần trăm đóng góp
  
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
}

model TrackContributor {
  id            String @id @default(cuid())
  role          ContributorRole
  percentage    Float?
  
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  trackId       String
  track         Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
}

model VideoContributor {
  id            String @id @default(cuid())
  role          String // Director, Editor, etc.
  percentage    Float?
  
  userId        String
  user          User   @relation(fields: [userId], references: [id])
  videoId       String
  video         Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
}

model SubmissionApproval {
  id              String    @id @default(cuid())
  type            ApprovalType
  isApproved      Boolean
  reason          String?   // Lý do từ chối (nếu có)

  submissionId    String
  submission      Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  approverId      String
  approver        User @relation(fields: [approverId], references: [id])

  createdAt       DateTime @default(now())
}

model SubmissionComment {
  id            String @id @default(cuid())
  content       String

  userId        String
  user          User   @relation(fields: [userId], references: [id])

  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
}

model File {
  id        String      @id @default(cuid())
  name      String
  path      String      @unique
  mimetype  String
  size      Int
  
  // File categorization
  category  FileCategory @default(OTHER)
  
  // Folder relationship
  folderId  String?
  folder    FileFolder? @relation(fields: [folderId], references: [id])
  
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ActivityLog {
  id        String      @id @default(cuid())
  action    String
  details   Json?
  userId    String?
  user      User?       @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
}

// --- DISTRIBUTION PLATFORMS ---
model DistributionPlatform {
  id          String @id @default(cuid())
  name        String @unique // Spotify, Apple Music, etc.
  logoUrl     String?
  apiEndpoint String?
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// --- CÁC BỘ TRẠNG THÁI & VAI TRÒ (Cập nhật với Vietnamese support) ---
enum UserRole {
  ARTIST
  COMPOSER
  PRODUCER
  PERFORMER
  LABEL_MANAGER
  ADMINISTRATOR
}

enum SubmissionStatus {
  PENDING                    // "Đã nhận, đang chờ duyệt"
  APPROVED                   // "Đã duyệt, đang chờ phát hành!"
  REJECTED                   // "Đã duyệt, từ chối phát hành"
  PROCESSING                 // "Đã phát hành, đang chờ ra mắt"
  PUBLISHED                  // "Hoàn thành phát hành!"
  CANCELLED                  // "Đã hủy"
  DRAFT                      // "Bản nháp"
}

enum ReleaseType {
  SINGLE
  EP
  ALBUM
  COMPILATION
}

enum ContributorRole {
  COMPOSER
  LYRICIST
  PRODUCER
  PERFORMER
  VOCALIST
  RAPPER
}

enum ApprovalType {
  DSP
  CONTENT_ID
  ACR_CLOUD
  LABEL_REVIEW
}

enum FileCategory {
  AUDIO
  VIDEO
  IMAGE
  DOCUMENT
  OTHER
}

